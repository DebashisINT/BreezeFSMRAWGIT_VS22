@using MyShop.Models;
@model AssignmentRevisitModel
@{
    ViewBag.Title = "Revisit Assignment";
}

<script type="text/javascript">

    $(function () {
        txtfromDate.SetDate(new Date());
        txttoDate.SetDate(new Date());
    });

    function ExportLogGrid() {
        var url = '@Url.Action("ExportEmployeesTargetLogList", "AssignmentRevisit", new { type = "_type_" })'
        window.location.href = url.replace("_type_", 3);
    }

    function close() {
        $("#fileprod").val('');
    }
    function OnEndCallback(s, e) {

        if (s.cpBatchUpdate == "1") {
            s.cpBatchUpdate = "0";
            gridEmployeesTargetList.Refresh();
        }
        if ($('#hdnExportGridListMessage').val() != '') {
            jAlert($('#hdnExportGridListMessage').val());
            $('#hdnExportGridListMessage').val('');

        }

        var count = $('#hdnExportGridListCount').val();
        if (count > 0) {
            $('.btn-excel').show();
        }
        else {
            $('.btn-excel').hide();
        }

    }

    function grdrowclick(s, e) {
        GlobalRowIndex = e.visibleIndex;
    }



    function getDownloadTemplateSettings() {
        $("#myModal").modal('show');
        $("#ddlMonths").focus();
    }

    function OnStartCallback(s, e) {
        //var ddlState = $('#hdnddlState').val();
        //var ddlDesignation = $('#hdnddlDesignation').val();

        var ddlMonth = $('#hdnddlMonth').val();
        var ddlYear = $('#ddlYear').val();
        //var ddlEmpType = $('#hdnddlEmpType').val();
        //var ddlCounterType = $('#hdnddlCounterType').val();

        //if (ddlState == "Select") {
        //    ddlState = "";
        //}
        //if (ddlDesignation == "Select") {
        //    ddlDesignation = "";
        //}
        var SettingMonthYear = ddlMonth + '-' + ddlYear;

        //e.customArgs["EmpTypeID"] = ddlEmpType;
        //e.customArgs["CounterType"] = ddlCounterType;
        //e.customArgs["State"] = ddlState;
        //e.customArgs["Designation"] = ddlDesignation;

        e.customArgs["SettingYear"] = ddlYear;
        e.customArgs["SettingMonth"] = ddlMonth;
        // e.customArgs["EmpCodeList"] = EmployeesCounterTargetList.join("|"); //EmployeesCounterTargetList

    }

    function EmployeesSelectionChanged(s, e) {
        EmployeesListGridLookup.GetSelectedFieldValues("EmployeeCode", GetEmployeesSelectedFieldValuesCallback);
    }

    function OnStartLogGridCallback(s, e) {
        //var todate = GetServerDateFormat(new Date(txttoDate.GetDate()));
        //var fromdate = GetServerDateFormat(new Date(txtfromDate.GetDate()));
        e.customArgs["fromdate"] = fromdate;
        e.customArgs["todate"] = todate;
    }

    function DateValidateFrom() {
        if (txttoDate.GetDate()) {
            if (txttoDate.GetDate() < txtfromDate.GetDate()) {
                txttoDate.SetValue(txtfromDate.GetDate());
            }
        }
    }

    function DateValidateTo() {
        if (txtfromDate.GetDate()) {
            if (txttoDate.GetDate() < txtfromDate.GetDate()) {
                txttoDate.SetValue(txtfromDate.GetDate());
            }
        }
    }

    function ActiveEmpStartCallback(s, e) {
        e.customArgs["StateId"] = StateId;
        e.customArgs["desgid"] = desigId;
    }

    var StateId = [];
    function StateSelectionChanged(s, e) {
        StateGridLookup.gridView.GetSelectedFieldValues("ID", GetSelectedFieldValuesCallback);
    }
    function GetSelectedFieldValuesCallback(values) {

        try {
            StateId = [];
            if (values.length <= 1) {
                for (var i = 0; i < values.length; i++) {
                    StateId.push(values[i]);
                }
            }
            else {
                jAlert("Please select only one State");
                StateGridLookup.GetGridView().SelectAllRowsOnPage(false);
            }
        } finally {
            console.log(StateId);
        }

    }

    var desigId = [];
    function DesigSelectionChanged(s, e) {
        DesigGridLookup.gridView.GetSelectedFieldValues("desgid", GetDesigSelectedFieldValuesCallback);
    }


    function GetDesigSelectedFieldValuesCallback(values) {
        try {
            desigId = [];
            for (var i = 0; i < values.length; i++) {
                desigId.push(values[i]);
            }
        } finally {
            console.log(desigId);
        }
    }


    var empId = [];
    function ActiveEmpSelectionChanged(s, e) {
        ActiveEmpGridLookup.gridView.GetSelectedFieldValues("empcode", GetEmpSelectedFieldValuesCallback);
    }
    function GetEmpSelectedFieldValuesCallback(values) {
        try {
            empId = [];
            for (var i = 0; i < values.length; i++) {
                empId.push(values[i]);
            }
        } finally {
            console.log(empId);
        }
    }

    function ActiveLookupValChange() {
        ActiveEmpGridLookup.GetGridView().Refresh()
        //EmpGridLookup.GetGridView().Refresh()
    }

    function getTemplateByStateDesignation() {


        if (StateId != "") {
            var selector = document.getElementById('ddlMonths');
            var value = selector[selector.selectedIndex].value;
            var monthh = $("#ddlMonths option:selected").val();
            var monthName = $("#ddlMonths option:selected").text();
            var empIDs = empId;
            // alert($("#ddlYear").val());
            var url = "@Url.Action("GetEmployeesListTemplateByStateDesignation", "AssignmentRevisit")" + "?State=" + StateId + "&Designation=" + desigId + "&Employees=" + empIDs + "&month=" + monthh + "&Year=" + $("#ddlYear").val() + "&monthName=" + monthName;
            window.location.href = url;
            pcModalTemplateExcelMode.Hide();
        }
        else {
            jAlert("Please select State");

        }
    }

    function ImportUpdatePopOpenEmployeesRevisit() {
        $("#myImportModal").modal('show');
        @*$.ajax({
            type: "POST",
            url: "@Url.Action("GetImportTemplateEmployeeSettings", "AssignmentRevisit")",
            success: function (response) {
                if (response) {
                    pcModalTemplateImportMode.SetContentHtml(response);
                    pcModalTemplateImportMode.Show();
                }
            }
    });*@

    }


    function ChekEmpSettingsUpload() {
        todate = null;
        fromdate = null;
        var isprocess = false;
        var filename = $("#fileprod").val();
        if ($('#fileprod').get(0).files.length === 0) {
            jAlert("No files selected.");
            return false;
        }
        else {
            var extension = filename.replace(/^.*\./, '');
            switch (extension.toLowerCase()) {
                case 'xls':
                    isprocess = true;
                case 'xlsx':
                    isprocess = true;
                default:
                    // Cancel the form submission
                    if (!isprocess) {
                        jAlert('Only excel file require.');
                        return false;
                    }
            }
        }

        if (isprocess == true) {
            var fileUpload = $("#fileprod").get(0);
            var files = fileUpload.files;

            // Create FormData object
            var fileData = new FormData();

            // Looping over all files and add it to FormData object
            for (var i = 0; i < files.length; i++) {
                fileData.append(files[i].name, files[i]);
            }


            $.ajax({
                url: "@Url.Action("GetUploadFilesEmployeeSettings", "AssignmentRevisit")",
                type: "POST",
                contentType: false,
                processData: false,
                data: fileData,
                success: function (result) {
                    jAlert(result,'Alert', function () {

                        pcModalTemplateImportMode.Hide();
                        if (result == "Import Process Completed!") {
                            $.ajax({
                                type: "POST",
                                url: "@Url.Action("GetEmployeesTargetSettingImportLog", "AssignmentRevisit")",
                                success: function (response) {
                                    if (response) {

                                        //pcModalTemplateImportLogMode.SetContentHtml(response);
                                        pcModalTemplateImportLogMode.Show();
                                        gridTemplateImportLogList.Refresh();
                                        gridTemplateImportLogList.Refresh();
                                    }
                                }
                            });
                        }
                    });

                },
                error: function (err) {
                    jAlert(err.statusText);
                }
            });
        }
    }

    function ImportLogView() {
        pcModalImportLogViewMode.Show();

        $('#MandatoryFromDate').attr('style', 'display:none');
        $('#MandatoryToDate').attr('style', 'display:none');
        txtfromDate.SetDate(new Date());
        txttoDate.SetDate(new Date());
        @*$.ajax({
          type: "POST",
          url: "@Url.Action("GetEmployeesTargetSettingImportLog", "EmployeesTarget")",
            success: function (response) {
                if (response) {

                    pcModalTemplateImportLogMode.Show();
                    gridTemplateImportLogList.Refresh();
                    gridTemplateImportLogList.Refresh();
                }
            }
    });*@
    }


    function getLogByDate() {
        var flag = true;
        if (txtfromDate.GetDate() == null) {
            $('#MandatoryFromDate').attr('style', 'display:block');
            flag = false;
        }
        else {
            $('#MandatoryFromDate').attr('style', 'display:none');
        }

        if (txttoDate.GetDate() == null) {
            $('#MandatoryToDate').attr('style', 'display:block');
            flag = false;
        }
        else {
            $('#MandatoryToDate').attr('style', 'display:none');
        }

        if (flag) {
            todate = GetServerDateFormat(new Date(txttoDate.GetDate()));
            fromdate = GetServerDateFormat(new Date(txtfromDate.GetDate()));

            $.ajax({
                type: "POST",
                url: "@Url.Action("GetEmployeesTargetSettingImportLog", "AssignmentRevisit")",
                data: { fromdate: fromdate, todate: todate },
                success: function (response) {
                    if (response) {
                        pcModalImportLogViewMode.Hide();
                        //pcModalTemplateImportLogMode.SetContentHtml(response);
                        pcModalTemplateImportLogMode.Show();
                        gridTemplateImportLogList.Refresh();
                        gridTemplateImportLogList.Refresh();

                        //pcModalImportLogViewMode.Hide();
                    }
                }
            });
        }
    }


    function DateValidateFrom() {
        if (txttoDate.GetDate()) {
            if (txttoDate.GetDate() < txtfromDate.GetDate()) {
                txttoDate.SetValue(txtfromDate.GetDate());
            }
        }
    }

    function DateValidateTo() {
        if (txtfromDate.GetDate()) {
            if (txttoDate.GetDate() < txtfromDate.GetDate()) {
                txttoDate.SetValue(txtfromDate.GetDate());
            }
        }
    }

    function OnStartLogGridCallback(s, e) {
        e.customArgs["fromdate"] = fromdate;
        e.customArgs["todate"] = todate;
    }

    function GetServerDateFormat(today) {
        if (today != "" && today != null) {
            var dd = today.getDate();
            var mm = today.getMonth() + 1;
            var yyyy = today.getFullYear();

            if (dd < 10) {
                dd = '0' + dd;
            }
            if (mm < 10) {
                mm = '0' + mm;
            }
            today = yyyy + '-' + mm + '-' + dd;
        }
        else {
            today = "";
        }

        return today;
    }

    function getEmployeesTargetSettingList() {

        var ddlMonth = $('#ddlMonthid option:selected').val();
        var ddlYear = $('#ddlYear option:selected').val();

        $('#hdnddlMonth').val(ddlMonth);
        $('#ddlYear').val(ddlYear);

        //if (FistLoad != 0) {
        //    pcModalEmployeelistMode.Show();
        //}
        //EmployeesListGridLookup.Refresh();
        //EmployeesListGridLookup.Refresh();
        SetEmployeeTargerHeader(ddlMonth, ddlYear);
    }

    function SetEmployeeTargerHeader(month, year) {
        gridEmployeesTargetList.Refresh();
    }

    function gridemployeestargetlistexport() {
        var url = '@Url.Action("ExportEmployeesTargetList", "AssignmentRevisit", new { type = "_type_" })'
        window.location.href = url.replace("_type_", 2);
    }

</script>


<style>
    .mtop8 {
        margin-top: 8px;
    }

    .myAssignTarget {
        margin-bottom: 0;
    }

        .myAssignTarget > li {
            list-style-type: none;
            display: inline-block;
            font-size: 11px;
            text-align: center;
        }

            .myAssignTarget > li:not(:last-child) {
                margin-right: 15px;
            }

            .myAssignTarget > li.mainCircle {
                border: 1px solid #a2d3d8;
                border-radius: 8px;
                overflow: hidden;
            }

            .myAssignTarget > li .heading {
                padding: 2px 12px;
                background: #6d82c5;
                color: #fff;
            }

            .myAssignTarget > li .Num {
                font-size: 14px;
            }

            .myAssignTarget > li.mainHeadCenter {
                font-size: 12px;
                transform: translateY(-16px);
            }

    .mright8 {
        margin-right: 8px;
    }

    .dxpcLite_PlasticBlue .dxpc-content, .dxdpLite_PlasticBlue .dxpc-content {
        background: #fff;
    }

    .dxgvStatusBar_PlasticBlue a {
        display: none;
    }

    #gridEmployeesTargetList_DXMainTable .dxgvBatchEditModifiedCell_PlasticBlue {
        background: #fff;
    }

    .secboxback {
        background: #f3f3f3;
        padding: 9px 0px;
        border-radius: 5px;
        padding-top: 0;
        overflow: hidden;
    }

    #pcModalTargetMode_PW-1 .form_main {
        border-top: none;
    }

    .gridbinded {
        position: absolute;
        right: 15px;
        top: 11px;
    }

    #myAssignTargetpopup {
        padding: 0 0 15px 0;
    }

        #myAssignTargetpopup > li .heading {
            padding: 6px 12px;
            background: #7f96dc;
            font-weight: 600;
            color: #fff;
        }

        #myAssignTargetpopup li .Num {
            font-size: 14px;
            padding: 5px 0;
        }

    .green {
        color: green;
    }

    .linerHd {
        background: #9da9c3;
        padding: 3px 15px;
        margin-bottom: 5px;
        color: #fff;
    }

    .ppHeader {
        font-size: 16px;
    }

    .mTop10 {
        margin-top: 10px;
    }

    .padtop28 {
        padding-top: 28px;
    }


    /*multiselect*/
    .multiselect-container.dropdown-menu {
        right: 0 !important;
        left: auto;
        min-width: 340px;
    }

    .iminentSpan .multiselect-container.dropdown-menu {
        right: auto !important;
        left: 0;
        min-width: 340px;
    }

    .multiselect-container > li > a {
        padding: 5px 0;
    }

        .multiselect-container > li > a input[type="checkbox"] {
            transform: translateY(3px);
        }

    .multiselect-container > li.active > a {
        background: transparent !important;
        color: #333;
    }

        .multiselect-container > li > a:hover, .multiselect-container > li.active > a:hover {
            background: #f3f3f3 !important;
            color: #333 !important;
            padding: 5px 0;
        }

    .multiselect-item.multiselect-filter {
        padding-bottom: 6px;
        border-bottom: 1px solid #ccc;
    }

        .multiselect-item.multiselect-filter .form-control.multiselect-search {
            height: 32px;
        }

        .multiselect-item.multiselect-filter .input-group-addon {
            background: #41a8f1;
            color: #fff;
            border-color: #41a8f1;
        }

    .input-group-btn .multiselect-clear-filter {
        background: #f98181;
        color: #fffefe;
        /* box-shadow: none; */
        text-shadow: none;
        border-color: #f96a6a;
        padding: 5px 10px 4px 10px;
    }

    .multiselect.dropdown-toggle {
        background: #fff;
        border-radius: 0;
    }

    .iminentSpan > span {
        display: block;
    }

    .btn-excel {
        float: right;
        margin-right: 38px;
        margin-top: -4px;
    }

    .gridbinded {
        position: absolute;
        right: 15px;
        top: 11px;
    }

    .validationDiv {
        padding-right: 35px;
        position: relative;
    }

    .validationDiv .validclass {
        top: 23px;
        position: absolute;
        right: 11px;
    }


    .devpopupStyle {
        border-radius: 15px;
    }

    .devpopupStyle .dxpc-header{
            background: #3ca1e8;
            background-image: none !important;
            padding: 11px 20px;
            border: none;
            border-radius: 15px 15px 0 0;
    }

        .devpopupStyle .dxpc-contentWrapper, .devpopupStyle .dxpc-content {
            background: #fff;
            border-radius: 0 0 15px 15px;
        }

    .devpopupStyle .dxpc-mainDiv {
        background-color: transparent !important;
    }

    .devpopupStyle .modal-footer{
        text-align: left;
    }

    .devpopupStyle .dxpc-shadow {
        box-shadow: none;
    }

    .modal-header {
        padding: 8px;
        background: #094e8c;
        border-radius: 8px 8px 0 0;
    }

    button.close {
        color: #fff;
        font-weight: 300;
        opacity: .5;
    }

    .close:hover, .close:focus {
        color: #fff;
        opacity: 1;
    }

    .modal-content {
        border-radius: 10px;
    }

    .modal-dialog {
        margin-top: 120px;
    }

    .modal-body {
        padding: 15px;
    }

    /*Rev 1.0*/

    #BranchGridLookup {
        min-height: 34px;
        border-radius: 5px;
    }

    .dxeButtonEditButton_PlasticBlue {
        background: #094e8c !important;
        border-radius: 4px !important;
        padding: 0 4px !important;
    }

    .chosen-container-single .chosen-single div {
        background: #094e8c;
        color: #fff;
        border-radius: 4px;
        height: 30px;
        top: 1px;
        right: 1px;
        /*position:relative;*/
    }

        .chosen-container-single .chosen-single div b {
            display: none;
        }

        .chosen-container-single .chosen-single div::after {
            content: '<';
            position: absolute;
            top: 2px;
            right: 3px;
            font-size: 18px;
            transform: rotate(269deg);
            font-weight: 500;
        }

    .chosen-container-active.chosen-with-drop .chosen-single div {
        background: #094e8c;
        color: #fff;
    }

        .chosen-container-active.chosen-with-drop .chosen-single div::after {
            transform: rotate(90deg);
            right: 5px;
        }

    .calendar-icon {
        position: absolute;
        bottom: 8px;
        right: 14px;
        z-index: 0;
        cursor: pointer;
    }

    .date-select .form-control {
        position: relative;
        z-index: 1;
        background: transparent;
    }

    #ddlState, #ddlPartyType, #divoutletStatus, #slmonth, #slyear {
        -webkit-appearance: none;
        position: relative;
        z-index: 1;
        background-color: transparent;
    }

    .h-branch-select {
        position: relative;
    }

        .h-branch-select::after {
            content: '<';
            position: absolute;
            top: 33px;
            right: 13px;
            font-size: 18px;
            transform: rotate(269deg);
            font-weight: 500;
            background: #094e8c;
            color: #fff;
            height: 18px;
            display: block;
            width: 28px;
            /* padding: 10px 0; */
            border-radius: 4px;
            text-align: center;
            line-height: 19px;
            z-index: 0;
        }

    .multiselect.dropdown-toggle {
        text-align: left;
    }

    .multiselect.dropdown-toggle, #ddlMonth, #ddlYear {
        -webkit-appearance: none;
        position: relative;
        z-index: 1;
        background-color: transparent;
    }

    .whclass.selectH {
        padding-right: 30px;
    }

    #ddlShowReport:focus-visible {
        box-shadow: none;
        outline: none;
        border: 1px solid #164f93;
    }

    #ddlShowReport:focus {
        border: 1px solid #164f93;
    }

    .whclass.selectH:focus-visible {
        outline: none;
    }

    .whclass.selectH:focus {
        border: 1px solid #164f93;
    }

    .dxeButtonEdit_PlasticBlue {
        border: 1px Solid #ccc;
    }

    .chosen-container-single .chosen-single {
        border: 1px solid #ccc;
        background: #fff;
        box-shadow: none;
    }

    .daterangepicker td.active, .daterangepicker td.active:hover {
        background-color: #175396;
    }

    label {
        font-weight: 500;
    }

    .dxgvHeader_PlasticBlue {
        background: #164f94;
    }

    .dxgvSelectedRow_PlasticBlue td.dxgv {
        color: #fff;
    }

    .dxeCalendarHeader_PlasticBlue {
        background: #185598;
    }

    .dxgvControl_PlasticBlue, .dxgvDisabled_PlasticBlue,
    .dxbButton_PlasticBlue,
    .dxeCalendar_PlasticBlue,
    .dxeEditArea_PlasticBlue {
        font-family: 'Poppins', sans-serif !important;
    }

    .dxgvEditFormDisplayRow_PlasticBlue td.dxgv, .dxgvDataRow_PlasticBlue td.dxgv, .dxgvDataRowAlt_PlasticBlue td.dxgv, .dxgvSelectedRow_PlasticBlue td.dxgv, .dxgvFocusedRow_PlasticBlue td.dxgv {
        font-weight: 500;
    }

    .btnPadding .btn {
        padding: 7px 14px !important;
        border-radius: 4px;
    }

    .btnPadding {
        padding-top: 24px !important;
    }

    .dxeButtonEdit_PlasticBlue {
        border-radius: 5px;
        height: 34px;
    }

    #dtFrom, #dtTo {
        position: relative;
        z-index: 1;
        background: transparent;
    }

    #tblshoplist_wrapper .dataTables_scrollHeadInner table tr th {
        background: #165092;
        vertical-align: middle;
        font-weight: 500;
    }

    /*#refreshgrid {
        background: #e5e5e5;
        padding: 0 10px;
        margin-top: 15px;
        border-radius: 8px;
    }*/

    .styled-checkbox {
        position: absolute;
        opacity: 0;
        z-index: 1;
    }

        .styled-checkbox + label {
            position: relative;
            /*cursor: pointer;*/
            padding: 0;
            margin-bottom: 0 !important;
        }

            .styled-checkbox + label:before {
                content: "";
                margin-right: 6px;
                display: inline-block;
                vertical-align: text-top;
                width: 16px;
                height: 16px;
                /*background: #d7d7d7;*/
                margin-top: 2px;
                border-radius: 2px;
                border: 1px solid #c5c5c5;
            }

        .styled-checkbox:hover + label:before {
            background: #094e8c;
        }


        .styled-checkbox:checked + label:before {
            background: #094e8c;
        }

        .styled-checkbox:disabled + label {
            color: #b8b8b8;
            cursor: auto;
        }

            .styled-checkbox:disabled + label:before {
                box-shadow: none;
                background: #ddd;
            }

        .styled-checkbox:checked + label:after {
            content: "";
            position: absolute;
            left: 3px;
            top: 9px;
            background: white;
            width: 2px;
            height: 2px;
            box-shadow: 2px 0 0 white, 4px 0 0 white, 4px -2px 0 white, 4px -4px 0 white, 4px -6px 0 white, 4px -8px 0 white;
            transform: rotate(45deg);
        }

    #dtstate {
        padding-right: 8px;
    }

    .pmsModal .modal-header {
        background: #094e8c !important;
        background-image: none !important;
        padding: 11px 20px;
        border: none;
        border-radius: 5px 5px 0 0;
        color: #fff;
        border-radius: 10px 10px 0 0;
    }

    .pmsModal .modal-content {
        border: none;
        border-radius: 10px;
    }

    .pmsModal .modal-header .modal-title {
        font-size: 14px;
    }

    .pmsModal .close {
        font-weight: 400;
        font-size: 25px;
        color: #fff;
        text-shadow: none;
        opacity: .5;
    }

    #EmployeeTable {
        margin-top: 10px;
    }

        #EmployeeTable table tr th {
            padding: 5px 10px;
        }

    .dynamicPopupTbl {
        font-family: 'Poppins', sans-serif !important;
    }

        .dynamicPopupTbl > tbody > tr > td,
        #EmployeeTable table tr th {
            font-family: 'Poppins', sans-serif !important;
            font-size: 12px;
        }

    .w150 {
        width: 160px;
    }

    .eqpadtbl > tbody > tr > td:not(:last-child) {
        padding-right: 20px;
    }

    #dtFrom_B-1, #dtTo_B-1 {
        background: transparent !important;
        border: none;
        width: 30px;
        padding: 10px !important;
    }

        #dtFrom_B-1 #dtFrom_B-1Img,
        #dtTo_B-1 #dtTo_B-1Img {
            display: none;
        }

    #dtFrom_I, #dtTo_I {
        background: transparent;
    }

    .for-cust-icon {
        position: relative;
        z-index: 1;
    }

    .pad-md-18 {
        padding-top: 24px;
    }

    .open .dropdown-toggle.btn-default {
        background: transparent !important;
    }

    .input-group-btn .multiselect-clear-filter {
        height: 32px;
        border-radius: 0 4px 4px 0;
    }

    .btn .caret {
        display: none;
    }

    .iminentSpan button.multiselect.dropdown-toggle {
        height: 34px;
    }

    .col-lg-2 {
        padding-left: 8px;
        padding-right: 8px;
    }

    select:not(.btn) {
        -webkit-appearance: none;
        position: relative;
        z-index: 1;
        background-color: transparent;
    }

    .dxgvControl_PlasticBlue a {
        margin: 0 3px;
    }

    .dxeButtonDisabled_PlasticBlue {
        background: #ababab !important;
    }

    .red {
        color: red;
    }

    .linerHd {
        background: #4e8fcf !important;
    }

    #gridreimbursementregister {
        margin-top: 10px;
    }

    .validationDiv {
        padding-right: 15px;
    }

    /*Rev end 1.0*/

    @@media only screen and (max-width: 768px) {
        .breadCumb {
            padding: 0 16%;
        }

            .breadCumb > span {
                padding: 9px 26px;
            }

        .pdTop15 button
        {
            margin-bottom: 10px;
        }

        .btn-excel {
            position: static !important;
            margin-right: 10px !important;
        }
    }

</style>

    <div class="breadCumb">
        <span>Revisit Assignment</span>
    </div>

    <input type="hidden" id="hdnddlState" value="" />
    <input type="hidden" id="hdnddlDesignation" value="" />
    <input type="hidden" id="hdnddlMonth" value="" />
    <input type="hidden" id="hdnddlYear" value="" />
    <input type="hidden" id="hdnddlEmpType" value="" />
    <input type="hidden" id="hdnddlCounterType" value="" />
    <input type="hidden" id="hdnddlEmployeeUserID" value="" />

    <input type="hidden" id="hdnemployeescountertargetid" value="0" />

<div class="container">
    <div class="backBox mt-5 p-3 ">

        <input type="hidden" id="hdnddlState" value="" />
        <input type="hidden" id="hdnddlDesignation" value="" />
        <input type="hidden" id="hdnddlMonth" value="" />
        <input type="hidden" id="hdnddlYear" value="" />
        <input type="hidden" id="hdnddlEmpType" value="" />
        <input type="hidden" id="hdnddlCounterType" value="" />
        <input type="hidden" id="hdnddlEmployeeUserID" value="" />

        <input type="hidden" id="hdnemployeescountertargetid" value="0" />

        @*@if (Model.IsHierarchywiseTargetSettings == true)
            {
                <input type="hidden" value="1" id="hdnHierarchywiseTargetSettings" />
                if (Model.UserState != null)
                {
                    <input type="hidden" value="@Model.UserState.StateName" id="hdnUserState" />
                }
                if (Model.UserDesg != null)
                {
                    <input type="hidden" value="@Model.UserDesg.DesignationName" id="hdnUserDsg" />
                }

                <input type="hidden" value="@Model.UserID" id="hdnUserID" />

               <input type="hidden" value="1700" id="hdnUserID" />
            }
            else
                {*@
        <input type="hidden" value="0" id="hdnHierarchywiseTargetSettings" />
        @*}*@

        <div class="row">

            <div class="col-md-5">
                <div class="clearfix secboxback">
                    <div class="col-md-12 linerHd"><b>Period</b></div>
                    @*Rev 1.0*@
                    @*<div class="col-lg-6">*@
                    <div class="col-lg-6 h-branch-select">
                        @*Rev end 1.0*@
                        <label><b>Month</b></label>
                        <select class="form-control" id="ddlMonthid">
                            <option value="01">January</option>
                            <option value="02">February</option>
                            <option value="03">March</option>
                            <option value="04">April</option>
                            <option value="05">May</option>
                            <option value="06">June</option>
                            <option value="07">July</option>
                            <option value="08">August</option>
                            <option value="09">September</option>
                            <option value="10">October</option>
                            <option value="11">November</option>
                            <option value="12">December</option>
                        </select>
                    </div>
                    @*Rev 1.0*@
                    @*<div class="col-lg-6">*@
                    <div class="col-lg-6 h-branch-select">
                        @*Rev end 1.0*@
                        <label><b>Year</b></label>
                        <select class="form-control" id="ddlYear">
                            <option value="@(DateTime.Now.Year - 1)">@(DateTime.Now.Year - 1)</option>
                            <option value="@(DateTime.Now.Year)" selected="selected">@(DateTime.Now.Year)</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="col-md-5">
                <label><b>&nbsp;</b></label>
                <button type="button" onclick="getEmployeesTargetSettingList();" id="btnSearch" class="btn btn-success">Search</button>
            </div>
            <div class="clear"></div>
            <div class="col-md-12 pdTop15 mt-5">


                <button type="button" onclick="getDownloadTemplateSettings();" class="btn btn-info">Download Template</button>

                <button type="button" onclick="ImportUpdatePopOpenEmployeesRevisit();" class="btn btn-danger">Import (Add/Update)</button>

                <button type="button" onclick="ImportLogView();" class="btn btn-warning">View Log</button>
            </div>
        </div>

        <div class="scrooler mTop5">
            <div class="panel-heading" role="tab" id="headingOne">
                @*data-toggle="collapse" data-parent="#accordion" href="#collapseOne"*@
                <h4 class="Widgheading relative clearfix" aria-expanded="true" aria-controls="collapseOne">
                    @*<button type="button" class="btn btn-primary pull-right" onclick="EmployeesTargetSave();">Save</button>*@


                </h4>
            </div>

            <div id="refreshgrid" class="relative">
                <span class="btn-excel gridbinded"><img src="/assests/images/excel.png" style="width: 24px; cursor:pointer;" title="Export To Excel" onclick="gridemployeestargetlistexport()" /></span>
                @{
                    Html.RenderAction("GetEmployeesTargetList", "AssignmentRevisit");
                }
            </div>

            @*<div class="text-right mTop5">
                , new { State = "", EmpTypeID = 0, CounterType = 0, Designation = "", SettingMonth = 0, SettingYear = 0, EmpCodeList = "" }
                    <button type="button" class="btn btn-primary" onclick="EmployeesTargetSave();">Save</button>
                    <button type="button" class="btn btn-danger" onclick="EmployeesTargetCancel();">Cancel</button>
                </div>*@
        </div>
    </div>
</div>



<div style="display:none;" id="hdnDivExportTemplate">

</div>

@Html.DevExpress().PopupControl(
        settings =>
        {
            settings.Name = "pcModalMode";
            settings.Width = 1250;
            settings.Height = 600;
            //settings.ScrollBars.v
            settings.AllowDragging = true;
            settings.CloseAction = CloseAction.CloseButton;
            settings.CloseOnEscape = true;
            settings.PopupAnimationType = AnimationType.None;
            settings.HeaderText = "Employees Target Setting";
            settings.Modal = true;
            settings.AutoUpdatePosition = true;
            settings.Top = 50;
            settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
            settings.PopupVerticalAlign = PopupVerticalAlign.Above;
            settings.SetContent(() =>
            { });

            settings.ClientSideEvents.CloseUp = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer(null, '', true); }";
        }).GetHtml()

@Html.DevExpress().PopupControl(
        settings =>
        {
            settings.Name = "pcModalTargetMode";
            settings.Width = 1000;
            settings.Height = 600;
            //settings.ScrollBars.v
            settings.AllowDragging = true;
            settings.CloseAction = CloseAction.CloseButton;
            settings.CloseOnEscape = true;
            settings.PopupAnimationType = AnimationType.None;
            settings.HeaderText = "Counter Wise Target Setting";
            settings.Modal = true;
            settings.AutoUpdatePosition = true;
            settings.Top = 50;
            settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
            settings.PopupVerticalAlign = PopupVerticalAlign.Above;
            settings.SetContent(() =>
            { });

            settings.ClientSideEvents.CloseUp = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer(null, '', true);SelectedEmployeeMaintarget(); }";
        }).GetHtml()

@Html.DevExpress().PopupControl(
        settings =>
        {
            settings.Name = "pcModalEmployeelistMode";
            settings.Width = 600;
            settings.Height = 480;
            //settings.ScrollBars.v
            settings.AllowDragging = true;
            settings.CloseAction = CloseAction.CloseButton;
            settings.CloseOnEscape = true;
            settings.PopupAnimationType = AnimationType.None;
            settings.HeaderText = "Employee List";
            settings.Modal = true;
            settings.AutoUpdatePosition = true;
            settings.Top = 50;
            settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
            settings.PopupVerticalAlign = PopupVerticalAlign.Above;
            settings.SetContent(() =>
            {

                Html.RenderPartial("_EmployeesListByReportTo", new List<EmployeesTargetSetting>());
                ViewContext.Writer.Write("<button type='button' class='btn btn-primary pull-right mtop8' onclick='SelectedEmployee();'>Ok</button>");
            });

            settings.ClientSideEvents.CloseUp = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer(null, '', true); }";
        }).GetHtml()


@Html.DevExpress().PopupControl(
        settings =>
        {
            settings.Name = "pcModalTemplateExcelMode";
            settings.Width = 400;
            //settings.Height = 220;
            //settings.ScrollBars.v
            settings.AllowDragging = true;
            settings.CloseAction = CloseAction.CloseButton;
            settings.CloseOnEscape = true;
            settings.PopupAnimationType = AnimationType.None;
            settings.HeaderText = "Download Template";
            settings.Modal = true;
            settings.AutoUpdatePosition = true;
            settings.Top = 50;
            settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
            settings.PopupVerticalAlign = PopupVerticalAlign.Above;
            settings.SetContent(() =>
            {

            });

            settings.ClientSideEvents.CloseUp = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer(null, '', true); }";
        }).GetHtml()

@Html.DevExpress().PopupControl(
        settings =>
        {
            settings.Name = "pcModalTemplateImportMode";
            settings.Width = 300;
            //settings.Height = 220;
            //settings.ScrollBars.v
            settings.AllowDragging = true;
            settings.CloseAction = CloseAction.CloseButton;
            settings.CloseOnEscape = true;
            settings.PopupAnimationType = AnimationType.None;
            settings.HeaderText = "Select File to Import (Add/Update)";
            settings.Modal = true;
            settings.AutoUpdatePosition = true;
            settings.Top = 50;
            settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
            settings.PopupVerticalAlign = PopupVerticalAlign.Above;
            settings.SetContent(() =>
            {

            });

            settings.ClientSideEvents.CloseUp = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer(null, '', true); }";
        }).GetHtml()


@Html.DevExpress().PopupControl(
        settings =>
        {
            settings.Name = "pcModalTemplateImportLogMode";
            settings.Width = 1200; //System.Web.UI.WebControls.Unit.Percentage(80);
            //settings.Height = 220;
            //settings.ScrollBars.v
            settings.AllowDragging = true;
            settings.CloseAction = CloseAction.CloseButton;
            settings.CloseOnEscape = true;
            settings.PopupAnimationType = AnimationType.None;
            settings.HeaderText = "Import Log";
            settings.Modal = true;
            settings.AutoUpdatePosition = true;
            settings.Top = 50;
            settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
            settings.PopupVerticalAlign = PopupVerticalAlign.Above;
            settings.SetContent(() =>
            {
                Html.RenderPartial("_ShowEmployeesTargetSettingLog", new List<EmployeesTargetSettingImportLog>());
                ViewContext.Writer.Write("<button type='button' class='btn btn-primary pull-right mtop8' title='Export To Excel' onclick='ExportLogGrid();'>Export</button>");
            });

            settings.ClientSideEvents.CloseUp = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer(null, '', true);  }";
        }).GetHtml()

@Html.DevExpress().PopupControl(
        settings =>
        {
            settings.Name = "pcModalImportLogViewMode";
            settings.Width = 300;
            //settings.Height = 220;
            //settings.ScrollBars.v
            settings.AllowDragging = true;
            settings.CloseAction = CloseAction.CloseButton;
            settings.CloseOnEscape = true;
            settings.PopupAnimationType = AnimationType.None;
            settings.HeaderText = "Select Date Range For View Log";
            settings.Modal = true;
            settings.AutoUpdatePosition = true;
            settings.Top = 50;
            settings.ControlStyle.CssClass = "devpopupStyle";
            settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
            settings.PopupVerticalAlign = PopupVerticalAlign.Above;
            settings.SetContent(() =>
            {
                Html.RenderPartial("_EmployeesTargetImportLogView");
            });

            settings.ClientSideEvents.CloseUp = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer(null, '', true); }";
        }).GetHtml()




<div id="myModal" class="modal fade pmsModal w30" data-backdrop="static" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Download Excel Template For Revisit Assignment</h4>
            </div>
            <div class="modal-body">
                <div>
                    <div class="">

                        <div class="row">
                            <div>

                                <div class="clearfix ">
                                    <div class="col-lg-12 lblmTop8">
                                        <label><b>For the Month</b></label>
                                        <div class="iminentSpan">
                                            <select class="form-control" id="ddlMonths">
                                                <option value="01">January</option>
                                                <option value="02">February</option>
                                                <option value="03">March</option>
                                                <option value="04">April</option>
                                                <option value="05">May</option>
                                                <option value="06">June</option>
                                                <option value="07">July</option>
                                                <option value="08">August</option>
                                                <option value="09">September</option>
                                                <option value="10">October</option>
                                                <option value="11">November</option>
                                                <option value="12">December</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 lblmTop8 hidden">
                                        <label><b>Year</b></label>
                                        <div class="iminentSpan">
                                            <select class="form-control" id="ddlYear">
                                                <option value="2018">2018</option>
                                                <option value="2019">2019</option>
                                                <option value="2020">2020</option>
                                                <option value="2021">2021</option>
                                                <option value="2023">2023</option>
                                                <option value="2024">2024</option>
                                                <option value="2025">2025</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-lg-12 lblmTop8">
                                        <label><b>State</b></label>
                                        <div class="iminentSpan">
                                            @Html.Action("GetStateList", "MasterPopulate")
                                        </div>


                                    </div>
                                    <div class="col-lg-12 lblmTop8">
                                        <label><b>Designation</b></label>
                                        <div class="iminentSpan">
                                            @Html.Action("GetDesigList", "SalesReportSummary")
                                        </div>

                                    </div>
                                    <div class="col-lg-12 lblmTop8">
                                        <label><b>For Employee(s)</b></label>
                                        <div class="iminentSpan">
                                            @Html.Action("GetEmpListActive", "MasterPopulate")
                                        </div>

                                    </div>
                                    <div class="col-md-12 mTop5 mt-3">
                                        <button type="button" onclick="getTemplateByStateDesignation();" class="btn btn-success mTop5">Download Now</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">

                        </div>
                    </div>

                </div>
            </div>
        </div>

    </div>
</div>


<div id="myImportModal" class="modal fade pmsModal w30" data-backdrop="static" role="dialog">
    <div class="modal-dialog ">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" onclick="close()">&times;</button>
                <h4 class="modal-title">Import Excel Template For Revisit Assignment</h4>
            </div>
            <div class="modal-body">
                <div>
                    <div class="">

                        <div class="row">
                            <div class="col-md-12">
                                <div id="divproduct">
                                    <label class="uplabel mb-3">Select File to Import (Add/Update)</label>
                                    <div><input type="file" id="fileprod" accept=".xls,.xlsx"></div>
                                    <div class="pTop10  mTop5 mt-3"><input type="submit" value="Import (Add/Update)" onclick="return ChekEmpSettingsUpload();" id="btnimportxls" class="btn btn-primary"></div>
                                </div>
                            </div>
                        </div>
                        <div class="row">

                        </div>
                    </div>

                </div>
            </div>
        </div>

    </div>
</div>



