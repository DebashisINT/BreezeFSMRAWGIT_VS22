@model MyShop.Models.OpeningStockModel
@{
    ViewBag.Title = "Opening Stock";
}

<link href="~/Content/media.css" rel="stylesheet" />
<style>
    #gridProductStockEntryList .dxgvStatusBar_PlasticBlue {
        display:none;
    }
    .multiselect-container.dropdown-menu {
        right: 0 !important;
        left: auto;
        min-width: 340px;
    }

    .iminentSpan .multiselect-container.dropdown-menu {
        right: auto !important;
        left: 0;
        min-width: 340px;
    }

    .multiselect-container > li > a {
        padding: 5px 0;
    }

        .multiselect-container > li > a input[type="checkbox"] {
            transform: translateY(3px);
        }

    .multiselect-container > li.active > a {
        background: transparent !important;
        color: #333;
    }

        .multiselect-container > li > a:hover, .multiselect-container > li.active > a:hover {
            background: #f3f3f3 !important;
            color: #333 !important;
            padding: 5px 0;
        }

    .multiselect-item.multiselect-filter {
        padding-bottom: 6px;
        border-bottom: 1px solid #ccc;
    }

        .multiselect-item.multiselect-filter .form-control.multiselect-search {
            height: 32px;
        }

        .multiselect-item.multiselect-filter .input-group-addon {
            background: #41a8f1;
            color: #fff;
            border-color: #41a8f1;
        }

    .input-group-btn .multiselect-clear-filter {
        background: #f98181;
        color: #fffefe;
        /* box-shadow: none; */
        text-shadow: none;
        border-color: #f96a6a;
        padding: 5px 10px 4px 10px;
    }

    .multiselect.dropdown-toggle {
        background: #fff;
        border-radius: 0;
    }

    .iminentSpan > span {
        display: block;
    }
    .modal-header {
        background-color: #007DB4;
        color: white;
        border-radius: 6px 6px 0 0;
    }

    button.close {
        color: #fff;
        opacity: .5;
        font-weight: 500;
    }

    .close:hover {
        color: #fff;
        opacity: 1;
    }
</style>

<script>
    var globalrowindex = 0;

    function gridclick(s, e) {
        globalrowindex = e.visibleIndex;
    }

    function OnStartCallback(s, e) {
        e.customArgs["Shop_code"] = $("#ddlWareHouse").val();
        e.customArgs["WreaHouse_id"] = $("#ddlWareHouse").val();
    }

    function SetProductClosingStock(s, e) {
        //gridProductStockEntryList.batchEditApi.StartEdit();
        gridProductStockEntryList.batchEditApi.StartEdit(globalrowindex, 4);
        var CurrentStock = gridProductStockEntryList.batchEditApi.GetCellValue(globalrowindex, 'CurrentStock');
        var newStock = gridProductStockEntryList.batchEditApi.GetCellValue(globalrowindex, 'newStock');
        var ClosingStock = gridProductStockEntryList.batchEditApi.GetCellValue(globalrowindex, 'ClosingStock');
        if (newStock > 0) {
           
            var ClosingStock = parseFloat(CurrentStock) + parseFloat(newStock);
            var Netamind = gridProductStockEntryList.batchEditApi.GetColumnIndex('ClosingStock');
            gridProductStockEntryList.batchEditApi.StartEdit(globalrowindex, Netamind);
            gridProductStockEntryList.GetEditor('ClosingStock').SetValue(parseFloat(ClosingStock));
        }
        gridProductStockEntryList.batchEditApi.EndEdit(globalrowindex, 4);
    }

    function DistributorChanges() {
        gridProductStockEntryList.Refresh();
        gridProductStockEntryList.Refresh();
    }

    function WarehouseChanges() {
        gridProductStockEntryList.Refresh();
        gridProductStockEntryList.Refresh();
    }

    function StockUpdate() {
        if ($("#ddlWareHouse").val() != "0") {
            gridProductStockEntryList.UpdateEdit();
            gridProductStockEntryList.UpdateEdit();
        }
        else {
            jAlert("Select warehouse.");
            $("#ddlWareHouse").focus();
        }

    }
</script>

<script>
    function getDownloadTemplateSettings() {

        var warehouse = $("#ddlWareHouse option:selected").val();
        if (warehouse != "0") {

            var WareHouseName = $("#ddlWareHouse option:selected").text();
            // alert($("#ddlYear").val());
            var url = "@Url.Action("GetProductListForOpeningStock", "ShopOpeningStock")" + "?WarehouseID=" + warehouse + "&WarehouseName=" + WareHouseName;
            window.location.href = url;
            //pcModalTemplateExcelMode.Hide();
        }
        else {
            jAlert("Please select Warehouse");

        }
    }

    function ChekEmpSettingsUpload() {
        todate = null;
        fromdate = null;
        var isprocess = false;
        var filename = $("#fileprod").val();
        if ($('#fileprod').get(0).files.length === 0) {
            jAlert("No files selected.");
            return false;
        }
        else {
            var extension = filename.replace(/^.*\./, '');
            switch (extension.toLowerCase()) {
                case 'xls':
                    isprocess = true;
                case 'xlsx':
                    isprocess = true;
                default:
                    // Cancel the form submission
                    if (!isprocess) {
                        jAlert('Only excel file require.');
                        return false;
                    }
            }
        }

        if (isprocess == true) {
            var fileUpload = $("#fileprod").get(0);
            var files = fileUpload.files;

            // Create FormData object
            var fileData = new FormData();

            // Looping over all files and add it to FormData object
            for (var i = 0; i < files.length; i++) {
                fileData.append(files[i].name, files[i]);
            }


            $.ajax({
                url: "@Url.Action("GetUploadFilesProductStockSettings", "ShopOpeningStock")",
                type: "POST",
                contentType: false,
                processData: false,
                data: fileData,
                success: function (result) {
                    jAlert(result, 'Alert', function () {

                        pcModalTemplateImportMode.Hide();
                        if (result == "Import Process Completed!") {
                            @*$.ajax({
                            type: "POST",
                            url: "@Url.Action("GetEmployeesTargetSettingImportLog", "AssignmentRevisit")",
                            success: function (response) {
                                if (response) {

                                    //pcModalTemplateImportLogMode.SetContentHtml(response);
                                    pcModalTemplateImportLogMode.Show();
                                    gridTemplateImportLogList.Refresh();
                                    gridTemplateImportLogList.Refresh();
                                }
                            }
                    });*@
                            //jAlert(result);
                            gridProductStockEntryList.Refresh();
                            gridProductStockEntryList.Refresh();
                        }
                    });
                },
                error: function (err) {
                    jAlert(err.statusText);
                }
            });
        }
    }

    function ImportUpdatePopOpenProductStock() {
        $("#myImportModal").modal('show');
        @*$.ajax({
            type: "POST",
            url: "@Url.Action("GetImportTemplateEmployeeSettings", "AssignmentRevisit")",
            success: function (response) {
                if (response) {
                    pcModalTemplateImportMode.SetContentHtml(response);
                    pcModalTemplateImportMode.Show();
                }
            }
    });*@

    }

</script>

<div id="divGrid">
    @*<div class="panel-title clearfix">
            <h3 class="pull-left">
                Opening stock
            </h3>
        </div>*@
    <div class="breadCumb">
        <span>Opening stock</span>
    </div>
    <div class="container">
        <div class="backBox mt-5 p-3 ">
            <div class="form_main">

                <div class="form-group">
                    <div class="row">
                        @*<div class="col-md-2">
                                <label>Distributer </label>
                                @Html.DropDownList("ddlDistributer", new SelectList(Model.Distributer_List, "Shop_Code", "Shop_Name"), new { @name = "from", @class = "full form-control", @onchange = "DistributorChanges()" })
                            </div>*@
                        <div class="col-md-2">
                            <label>Warehouse </label>
                            @Html.DropDownList("ddlWareHouse", new SelectList(Model.warehouse_List, "WAREHOUSE_ID", "WAREHOUSE_NAME"), new { @name = "from", @class = "form-control", @onchange = "WarehouseChanges();" })
                        </div>
                        <div class="col-md-8" style="padding-top: 23px; padding-bottom: 6px;">
                            <select name="ddlAppIds" class="btn btn-primary" id="ddlAppIds">
                                <option value="0">Export to</option>
                                <option value="1">PDF</option>
                                <option value="2">XLSX</option>
                                <option value="3">XLS</option>
                                <option value="4">RTF</option>
                                <option value="5">CSV</option>
                            </select>
                            <label>&nbsp; </label>
                            <button type="button" onclick="getDownloadTemplateSettings();" class="btn btn-info">Download Template</button>
                            <button type="button" onclick="ImportUpdatePopOpenProductStock();" class="btn btn-warning">Import (Add/Update)</button>
                            <button type="button" id="btnSave" value="Save" class="btn btn-success" onclick="StockUpdate();">Save</button>

                        </div>
                        <div class="col-md-2 pull-left">

                        </div>
                    </div>
                    <div class="">
                        @{
                    Html.RenderAction("GridProductOnepingStock", "ShopOpeningStock", new { Shop_code = "" });
                        }
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>


        <div id="myImportModal" class="modal fade pmsModal w30" data-backdrop="static" role="dialog">
            <div class="modal-dialog ">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" onclick="close()">&times;</button>
                        <h4 class="modal-title">Import Excel Template For Product Stock</h4>
                    </div>
                    <div class="modal-body">
                        <div>
                            <div class="">

                                <div class="row">
                                    <div class="col-md-12">
                                        <div id="divproduct">
                                            <label class="uplabel">Select File to Import (Add/Update)</label>
                                            <div><input type="file" id="fileprod" accept=".xls,.xlsx"></div>
                                            <div class="pTop10  mt-3"><input type="submit" value="Import (Add/Update)" onclick="return ChekEmpSettingsUpload();" id="btnimportxls" class="btn btn-primary"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">

                                </div>
                            </div>

                        </div>
                    </div>
                </div>

            </div>
        </div>

        @Html.DevExpress().PopupControl(
        settings =>
        {
            settings.Name = "pcModalTemplateImportMode";
            settings.Width = 300;
            //settings.Height = 220;
            //settings.ScrollBars.v
            settings.AllowDragging = true;
            settings.CloseAction = CloseAction.CloseButton;
            settings.CloseOnEscape = true;
            settings.PopupAnimationType = AnimationType.None;
            settings.HeaderText = "Select File to Import (Add/Update)";
            settings.Modal = true;
            settings.AutoUpdatePosition = true;
            settings.Top = 50;
            settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
            settings.PopupVerticalAlign = PopupVerticalAlign.Above;
            settings.SetContent(() =>
            {

            });

            settings.ClientSideEvents.CloseUp = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer(null, '', true); }";
        }).GetHtml()
