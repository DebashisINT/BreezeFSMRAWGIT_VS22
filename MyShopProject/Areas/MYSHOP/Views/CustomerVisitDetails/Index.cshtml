@*====================================================== Revision History ==========================================================*@
@*Rev Number         DATE              VERSION          DEVELOPER           CHANGES*@
@*1.0                17-01-2023        2.0.38           Pallab              25576: Report page design modification *@
@*====================================================== Revision History ==========================================================*@

@model MyShop.Models.CustomerVisitDetailsModel

@{
    ViewBag.Title = "Customer Visit";
}


<style>
    #mask {
        position: fixed;
        left: 0;
        top: 0;
        bottom: 0;
        right: 0;
        margin: auto;
        visibility: hidden;
        z-index: -2;
        background: #000;
        background: rgba(0,0,0,0.8);
        overflow: hidden;
        opacity: 0;
        transition: all .5s ease-in-out;
    }

        #mask.showing {
            opacity: 1;
            z-index: 9000;
            visibility: visible;
            overflow: auto;
            transition: all .5s ease-in-out;
        }

    #boxes {
        display: table;
        width: 100%;
        height: 100%;
    }

    .window {
        max-width: 780px;
        z-index: 9999;
        padding: 20px;
        border-radius: 15px;
        text-align: center;
        margin: auto;
        background-color: #ffffff;
        font-family: 'Segoe UI Light', sans-serif;
        font-size: 15pt;
    }

        .window img {
            width: 100%;
            height: auto;
        }

    .inner {
        display: table-cell;
        vertical-align: middle;
    }

    #popupfoot {
        font-size: 16pt;
    }

    .showImage {
        margin: 0 0 3em;
        display: table;
        text-align: center;
    }

        .showImage img {
            display: block;
        }


    #maskmap {
        position: fixed;
        left: 0;
        top: 0;
        bottom: 0;
        right: 0;
        margin: auto;
        visibility: hidden;
        z-index: -2;
        background: #000;
        background: rgba(0,0,0,0.8);
        overflow: hidden;
        opacity: 0;
        transition: all .5s ease-in-out;
    }

        #maskmap.showing {
            opacity: 1;
            z-index: 9000;
            visibility: visible;
            overflow: auto;
            transition: all .5s ease-in-out;
        }

    #boxesmap {
        display: table;
        width: 100%;
        height: 100%;
    }

    #popupfootmap {
        font-size: 16pt;
    }
</style>


<style>
    .modal-content {
        border-radius: 0px;
    }

    .modal-header {
        background-color: #007DB4;
        color: white;
    }

    .modal-body {
        height: 440px;
    }
</style>



<script src="~/Scripts/chosen/chosen.jquery.min.js"></script>
<link href="~/Scripts/chosen/chosen.min.css" rel="stylesheet" />
<link href="~/Content/media.css" rel="stylesheet" />

<script>
    var arr = [];
    var typeId;
    var Ispageload = "0";
    function addDays(date, daysToAdd) {
        var _24HoursInMilliseconds = 86400000;
        return new Date(date.getTime() + daysToAdd * _24HoursInMilliseconds);
    };
    $(function () {

        var lookup = ASPxClientControl.GetControlCollection().GetByName("EmpGridLookup");
        lookup.GetGridView().Refresh();
        // gridHomeColationList.Refresh();
        var lookup = ASPxClientControl.GetControlCollection().GetByName("StateGridLookup");
        lookup.GetGridView().Refresh();

        //var lookup = ASPxClientControl.GetControlCollection().GetByName("StateGridLookup");
        //lookup.GetGridView().Refresh();

        $("#drpuser").chosen({
            width: "100%"
        });

        $("#drpstate").chosen({
            width: "100%"
        });
        var d = new Date();

        var now = new Date();

        var yesterday = addDays(now, -1);
        $("#drpuser").chosen({
            width: "100%"
        });
        dtFrom.SetValue(yesterday);
        dtTo.SetValue(yesterday);


        dtFrom.SetMaxDate(yesterday);
        dtTo.SetMaxDate(yesterday);


        $('.window .close').click(function (e) {
            //Cancel the link behavior
            e.preventDefault();

            $('#maskmap').removeClass('showing');
        });



        $('body').on('click', '#btnshow', function () {
            var flag = true;
            var start = $('#dtFrom_I').val();
            var end = $('#dtTo_I').val();
            start = start.split('-')[1] + '-' + start.split('-')[0] + '-' + start.split('-')[2];
            end = end.split('-')[1] + '-' + end.split('-')[0] + '-' + end.split('-')[2];

            if ($("#hdnStateMandatory").val() == "True") {
                if (StateId == "") {
                    jAlert("Please select State.");
                    flag = false;
                    return;
                }
            }
            if (flag) {
                var dayse = Math.round((Date.parse(end) - Date.parse(start)) / (1000 * 60 * 60 * 24));
                if (dayse <= 30) {

                    gridCustomerVisitDetailsList.Refresh();
                }
                else {
                    jAlert("Searching days must be within 30 days");
                }
            }
        });


        $('.window .close').click(function (e) {
            //Cancel the link behavior
            e.preventDefault();
            $('#mask').removeClass('showing');
            $('#maskmap').removeClass('showing');
        });


        $('#ddlAppIds').on('change', function () {
            if ($("#ddlAppIds option:selected").index() > 0) {
                var selectedValue = $(this).val();
                $('#ddlAppIds').prop("selectedIndex", 0);
                var url = '@Url.Action("ExportActivityDetailslist", "CustomerVisitDetails", new { type = "_type_" })'
                window.location.href = url.replace("_type_", selectedValue);
            }
        });

    });

    var desigId = [];
    function DesigSelectionChanged(s, e) {
        DesigGridLookup.gridView.GetSelectedFieldValues("desgid", GetDesigSelectedFieldValuesCallback);
    }
    function GetDesigSelectedFieldValuesCallback(values) {
        try {
            desigId = [];
            for (var i = 0; i < values.length; i++) {
                desigId.push(values[i]);
            }
        } finally {
            console.log(desigId);
        }
    }

    var StateId = [];
    function StateSelectionChanged(s, e) {
        StateGridLookup.gridView.GetSelectedFieldValues("ID", GetSelectedFieldValuesCallback);
    }
    function GetSelectedFieldValuesCallback(values) {

        try {
            StateId = [];
            for (var i = 0; i < values.length; i++) {
                StateId.push(values[i]);
            }
        } finally {
            console.log(StateId);
        }
    }

    var empId = [];
    function EmpSelectionChanged(s, e) {
        EmpGridLookup.gridView.GetSelectedFieldValues("empcode", GetEmpSelectedFieldValuesCallback);
    }
    function GetEmpSelectedFieldValuesCallback(values) {
        try {
            empId = [];
            for (var i = 0; i < values.length; i++) {
                empId.push(values[i]);
            }
        } finally {
            console.log(empId);
        }
    }

    function EmpStartCallback(s, e) {
        e.customArgs["StateId"] = StateId;
        e.customArgs["desgid"] = desigId;
        e.customArgs["userId"] = $("#hdnUserID").val();
    }

    function LookupValChange() {
        EmpGridLookup.GetGridView().Refresh()
        //EmpGridLookup.GetGridView().Refresh()
    }

    function OnStartCallback(s, e) {

        e.customArgs["EmployeeID"] = empId;
        e.customArgs["State"] = StateId;
        e.customArgs["Designation_id"] = desigId;
        e.customArgs["FromDate"] = dtFrom.GetText();
        e.customArgs["ToDate"] = dtTo.GetText();
        e.customArgs["Ispageload"] = 1;
    }


    function GetServerDateFormat(today) {
        if (today != "" && today != null) {
            var dd = today.getDate();
            var mm = today.getMonth() + 1;
            var yyyy = today.getFullYear();

            if (dd < 10) {
                dd = '0' + dd;
            }
            if (mm < 10) {
                mm = '0' + mm;
            }
            today = yyyy + '-' + mm + '-' + dd;
        }
        else {
            today = "";
        }

        return today;
    }

    function DateValidateFrom() {
        if (dtTo.GetDate()) {
            if (dtTo.GetDate() < dtFrom.GetDate()) {
                dtTo.SetValue(dtFrom.GetDate());
            }
        }
    }

    function DateValidateTo() {
        if (dtFrom.GetDate()) {
            if (dtTo.GetDate() < dtFrom.GetDate()) {
                dtTo.SetValue(dtFrom.GetDate());
            }
        }
    }

    function StateStartCallback(s, e) {
        e.customArgs["UserID"] = $("#hdnUserID").val();
    }

    function EmpStateLookupValChange() {
        StateGridLookup.GetGridView().Refresh();
        StateGridLookup.GetGridView().Refresh();
    }



</script>

<script>
    function onShowChooserClick(s, e) {
        UpdateCustomizationWindowVisibility();
    }
    var visibleColumn = [];
    function grid_CustomizationWindowCloseUp(s, e) {
        UpdateButtonText();

        for (var i = 0; i <= gridCustomerVisitDetailsList.GetColumnsCount() ; i++) {
            if (gridCustomerVisitDetailsList.GetColumn(i) != null) {
                if (gridCustomerVisitDetailsList.GetColumn(i).visible == false) {
                    console.log(gridCustomerVisitDetailsList.GetColumn(i).fieldName);
                    visibleColumn.push(gridCustomerVisitDetailsList.GetColumn(i).fieldName);
                }
            }
        }

        addPageRetention(visibleColumn);
    }

    function UpdateCustomizationWindowVisibility() {
        if (gridCustomerVisitDetailsList.IsCustomizationWindowVisible())
            gridCustomerVisitDetailsList.HideCustomizationWindow();
        else
            gridCustomerVisitDetailsList.ShowCustomizationWindow();
        UpdateButtonText();
    }

    function UpdateButtonText() {
        var text = gridCustomerVisitDetailsList.IsCustomizationWindowVisible() ? "Hide" : "Show";
        text += " Column Chooser";
        btShowColumnChooser.SetText(text);
    }

    function addPageRetention(visibleColumn) {
        $.ajax({
            url: "@Url.Action("PageRetention", "CustomerVisitDetails")",
            async: false,
            data: { Columns: visibleColumn },
            type: 'POST',
            success: function (data) {
                gridCustomerVisitDetailsList.Refresh();
            },
            error: function () {
            },
        });

    }

</script>


<style>
    #tblshoplist > thead > tr > th {
        background: #26669e;
        border-top: 1px solid #18476f;
        color: #fff;
        border-color: #18476f !important;
    }

    #tblshoplist thead > tr > th, #tblshoplist tbody > tr > th, #tblshoplist tfoot > tr > th, #tblshoplist thead > tr > td, #tblshoplist tbody > tr > td, #tblshoplist tfoot > tr > td {
        padding: 1px 5px !important;
    }

    .tblspace > tbody > tr > td {
        padding-right: 15px;
    }

    .acheckbox {
    }

    /*#StateGridLookup_ET > tbody > tr > td:first-child, #DesigGridLookup_ET > tbody > tr > td:first-child, #EmpGridLookup_ET > tbody > tr > td:first-child {
        display: none;
    }*/
    label {
        font-weight: 500 !important;
    }


    /*Rev 1.0*/

    #BranchGridLookup {
        min-height: 34px;
        border-radius: 5px;
    }

    .dxeButtonEditButton_PlasticBlue {
        background: #094e8c !important;
        border-radius: 4px !important;
        padding: 0 4px !important;
    }

    .chosen-container-single .chosen-single div {
        background: #094e8c;
        color: #fff;
        border-radius: 4px;
        height: 30px;
        top: 1px;
        right: 1px;
        /*position:relative;*/
    }

        .chosen-container-single .chosen-single div b {
            display: none;
        }

        .chosen-container-single .chosen-single div::after {
            content: '<';
            position: absolute;
            top: 2px;
            right: 3px;
            font-size: 18px;
            transform: rotate(269deg);
            font-weight: 500;
        }

    .chosen-container-active.chosen-with-drop .chosen-single div {
        background: #094e8c;
        color: #fff;
    }

        .chosen-container-active.chosen-with-drop .chosen-single div::after {
            transform: rotate(90deg);
            right: 5px;
        }

    .calendar-icon {
        position: absolute;
        bottom: 8px;
        right: 20px;
        z-index: 0;
        cursor: pointer;
    }

    .date-select {
        position: relative;
        /*z-index: 1;
        background: transparent;*/
    }

    #txtDate {
        position: relative;
        z-index: 1;
        background: transparent;
    }

    .h-branch-select {
        position: relative;
    }

        .h-branch-select::after {
            content: '<';
            position: absolute;
            top: 12px;
            right: 8px;
            font-size: 18px;
            transform: rotate(269deg);
            font-weight: 500;
            background: #094e8c;
            color: #fff;
            height: 18px;
            display: block;
            width: 28px;
            /* padding: 10px 0; */
            border-radius: 4px;
            text-align: center;
            line-height: 19px;
            z-index: 0;
        }

    #ddltypes {
        -webkit-appearance: none;
        position: relative;
        z-index: 1;
        background-color: transparent;
    }

        #ddltypes:focus-visible {
            outline: none;
        }

    .whclass.selectH:focus {
        border: 1px solid #164f93;
    }

    .dxeButtonEdit_PlasticBlue {
        border: 1px Solid #ccc;
    }

    .chosen-container-single .chosen-single {
        border: 1px solid #ccc;
        background: #fff;
        box-shadow: none;
    }

    .daterangepicker td.active, .daterangepicker td.active:hover {
        background-color: #175396;
    }

    label {
        font-weight: 500;
    }

    .dxgvHeader_PlasticBlue {
        background: #164f94;
    }

    .dxgvSelectedRow_PlasticBlue td.dxgv {
        color: #fff;
    }

    .dxeCalendarHeader_PlasticBlue {
        background: #185598;
    }

    .dxgvControl_PlasticBlue, .dxgvDisabled_PlasticBlue,
    .dxbButton_PlasticBlue,
    .dxeCalendar_PlasticBlue,
    .dxeEditArea_PlasticBlue {
        font-family: 'Poppins', sans-serif !important;
    }

    .dxgvEditFormDisplayRow_PlasticBlue td.dxgv, .dxgvDataRow_PlasticBlue td.dxgv, .dxgvDataRowAlt_PlasticBlue td.dxgv, .dxgvSelectedRow_PlasticBlue td.dxgv, .dxgvFocusedRow_PlasticBlue td.dxgv {
        font-weight: 500;
    }

    .btnPadding .btn {
        padding: 7px 14px !important;
        border-radius: 4px;
    }

    .btnPadding {
        padding-top: 24px !important;
    }

    .dxeButtonEdit_PlasticBlue {
        border-radius: 5px;
        
    }
    #dtFrom, #dtTo {
        position: relative;
        z-index: 1;
        background: transparent;
    }

    #tblshoplist_wrapper .dataTables_scrollHeadInner table tr th {
        background: #165092;
        vertical-align: middle;
        font-weight: 500;
    }

    /*#refreshgrid {
        background: #e5e5e5;
        padding: 0 10px;
        margin-top: 15px;
        border-radius: 8px;
    }*/


    .styled-checkbox {
        position: absolute;
        opacity: 0;
        z-index: 1;
    }

        .styled-checkbox + label {
            position: relative;
            /*cursor: pointer;*/
            padding: 0;
            margin-bottom: 0 !important;
        }

            .styled-checkbox + label:before {
                content: "";
                margin-right: 6px;
                display: inline-block;
                vertical-align: text-top;
                width: 16px;
                height: 16px;
                background: #d7d7d7;
                margin-top: 2px;
                border-radius: 2px;
            }

        .styled-checkbox:hover + label:before {
            background: #094e8c;
        }


        .styled-checkbox:checked + label:before {
            background: #094e8c;
        }

        .styled-checkbox:disabled + label {
            color: #b8b8b8;
            cursor: auto;
        }

            .styled-checkbox:disabled + label:before {
                box-shadow: none;
                background: #ddd;
            }

        .styled-checkbox:checked + label:after {
            content: "";
            position: absolute;
            left: 3px;
            top: 9px;
            background: white;
            width: 2px;
            height: 2px;
            box-shadow: 2px 0 0 white, 4px 0 0 white, 4px -2px 0 white, 4px -4px 0 white, 4px -6px 0 white, 4px -8px 0 white;
            transform: rotate(45deg);
        }

    #dtstate {
        padding-right: 8px;
    }

    .dxeButtonDisabled_PlasticBlue {
        background: #a1a1a1 !important;
    }

    #popup_message {
        padding-left: 0;
        text-align: center;
    }

    .w150 {
        width: 180px;
    }

    .pmsModal .modal-header {
        background: #094e8c !important;
        background-image: none !important;
        padding: 11px 20px;
        border: none;
        border-radius: 5px 5px 0 0;
        color: #fff;
        border-radius: 10px 10px 0 0;
    }

    .pmsModal .modal-content {
        border: none;
        border-radius: 10px;
    }

    .pmsModal .modal-header .modal-title {
        font-size: 14px;
    }

    .pmsModal .close {
        font-weight: 400;
        font-size: 25px;
        color: #fff;
        text-shadow: none;
        opacity: .5;
    }

    #EmployeeTable {
        margin-top: 10px;
    }

        #EmployeeTable table tr th {
            padding: 5px 10px;
        }

    .dynamicPopupTbl {
        font-family: 'Poppins', sans-serif !important;
    }

        .dynamicPopupTbl > tbody > tr > td,
        #EmployeeTable table tr th {
            font-family: 'Poppins', sans-serif !important;
            font-size: 12px;
        }

    #dtFrom_B-1, #dtTo_B-1 {
        background: transparent !important;
        border: none;
        width: 30px;
        padding: 10px !important;
    }

        #dtFrom_B-1 #dtFrom_B-1Img,
        #dtTo_B-1 #dtTo_B-1Img {
            display: none;
        }

    #dtFrom_I, #dtTo_I {
        background: transparent;
    }

    .for-cust-icon {
        position: relative;
        z-index: 1;
    }
    /*Rev end 1.0*/
</style>



<div class="breadCumb">
    <span>Customer Visit</span>
</div>
<div class="container">
    <div class="form_main backBox p-3">
        <table class="pull-left tblspace smblock mb-3">
            <tr>
                @*Rev 1.0*@
                @*<td id="dtdesg2" style="width:150px;">*@
                <td id="dtdesg2" style="width:160px;">
                    @*Rev end 1.0*@
                    <label>State </label>
                    @Html.Action("GetEmployeeWiseStateList", "MasterPopulate", new { UserID = @Session["userid"].ToString() })
                </td>

                <td id="dtdesg2" style="width:190px;">
                    <label>Designation  </label>
                    @Html.Action("GetDesigList", "SalesReportSummary")
                </td>

                <td id="dtdesg2" style="width:190px;">
                    <label>Employee(s) </label>
                    @Html.Action("GetEmpList", "MasterPopulate", new { userId = @Session["userid"].ToString() })
                </td>


                @*Rev 1.0*@
                @*<td style="width:160px;">*@
                <td style="width:160px;" class="for-cust-icon">
                    @*Rev end 1.0*@
                    <label>From Date </label>
                    @Html.DevExpress().DateEditFor(x => x.FromDate,
                                deSettings =>
                                {
                                    deSettings.Name = "dtFrom";

                                    deSettings.Date = DateTime.Now;
                                    deSettings.Properties.UseMaskBehavior = true;
                                    deSettings.Properties.EditFormat = EditFormat.Custom;
                                    deSettings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                    deSettings.Properties.DisplayFormatString = "dd-MM-yyyy";
                                    deSettings.Properties.EditFormatString = "dd-MM-yyyy";
                                }).GetHtml()
                    @*Rev 1.0*@
                    <img src="/assests/images/calendar-icon.png" class="calendar-icon" />
                    @*Rev end 1.0*@
                </td>

                @*Rev 1.0*@
                @*<td style="width:160px;">*@
                <td style="width:160px;" class="for-cust-icon">
                    @*Rev end 1.0*@
                    <label>To Date </label>
                    @Html.DevExpress().DateEditFor(x => x.ToDate,
                                deSettings =>
                                {
                                    deSettings.Name = "dtTo";
                                    deSettings.Date = DateTime.Now;
                                    deSettings.Properties.UseMaskBehavior = true;
                                    deSettings.Properties.EditFormat = EditFormat.Custom;
                                    deSettings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                    deSettings.Properties.DisplayFormatString = "dd-MM-yyyy";
                                    deSettings.Properties.EditFormatString = "dd-MM-yyyy";
                                }).GetHtml()
                    @*Rev 1.0*@
                    <img src="/assests/images/calendar-icon.png" class="calendar-icon" />
                    @*Rev end 1.0*@
                </td>
                @*Rev 1.0*@
                @*<td style="padding-top: 20px; width: 200px;">*@
                <td style="padding-top: 24px; width: 200px;">
                    @*Rev end 1.0*@
                    <button type="button" id="btnshow" class="btn btn-success btn-sm btnwidth">Show</button>

                    <select name="ddlAppIds" class="btn btn-sm btn-sm btn-primary" id="ddlAppIds">
                        <option value="0">Export to</option>
                        <option value="1">PDF</option>
                        <option value="2">XLSX</option>
                        <option value="3">XLS</option>
                        <option value="4">RTF</option>
                        <option value="5">CSV</option>

                    </select>
                </td>
            </tr>
            <tr></tr>
        </table>
        <br /><br />
        <div class="clear"></div>
        <div class="options">
            <div class="options-item">
                @Html.DevExpress().Button(settings =>
                {
                    settings.Name = "btShowColumnChooser";
                    settings.Text = "Show Column Chooser";
                    settings.ClientSideEvents.Click = "function (s, e) { onShowChooserClick(s,e); }";
                    // settings.Theme = "MaterialCompactOrange";
                }).GetHtml()
            </div>
        </div>

        <div class="">
            @*scrooler*@
            <div id="refreshgrid">
                @{
                    Html.RenderAction("GetCustomerVisitDetailslistPartial", "CustomerVisitDetails", new { Employee = Model.EmployeeID, Fromdate = Model.FromDate, Todate = Model.ToDate, Ispageload = "0" });
                }
            </div>
        </div>
    </div>
</div>

<input type="hidden" id="hdnUserID" value="@Session["userid"].ToString()" />
<input type="hidden" id="hdnStateMandatory" value="@ViewBag.StateMandatory" />

<div id="mask">
    <div id="boxes">
        <div class="inner">
            <div id="dialog" class="window">
                <a href="#" class="close">CLOSE</a>
                <div id="popupfoot">

                    <img src="#" class="image" alt="Loading..."></img>

                </div>
            </div>
        </div>
    </div>
</div>


<div id="maskmap">
    <div id="boxesmap">
        <div class="inner">
            <div id="dialogmap" class="window">
                <a href="#" class="close">CLOSE</a>
                <div id="popupfootmap">

                    <div id="map" style="width: 100%; height: 450px;"></div>

                </div>
            </div>
        </div>
    </div>
</div>