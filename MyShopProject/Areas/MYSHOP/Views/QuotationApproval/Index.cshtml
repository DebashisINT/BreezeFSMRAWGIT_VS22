@model MyShop.Models.QuotationApprovalModel

@{
    ViewBag.Title = "Quotation Approval";
    /// Layout = "~/Views/Shared/_Layout.cshtml";
}






<script type="text/javascript" src="~/Scripts/globalize.js"></script>
<script src="~/Scripts/cultures/globalize.cultures.js"></script>
<link href="~/assests/css/custom/PMSStyles.css" rel="stylesheet" />

<script src="~/Scripts/chosen/chosen.jquery.min.js"></script>
<link href="~/Scripts/chosen/chosen.min.css" rel="stylesheet" />
<link href="~/Content/media.css" rel="stylesheet" />

<link href="~/assests/css/custom/SearchPopup.css" rel="stylesheet" />
<script src="~/assests/pluggins/choosen/choosen.min.js"></script>
<script src="~/Scripts/SearchMultiPopup.js"></script>


<style>
    #StateGridLookup_CC {
        width: 100%;
    }
</style>
<script>
    var is_pageload = "0";

    $(function () {

        gridQuotationApproval.Refresh();
        gridQuotationApproval.Refresh();

        var d = new Date();

        dtFrom.SetValue(d);
        dtTo.SetValue(d);

        $('#txtfromDate').daterangepicker({
            singleDatePicker: true,
            showDropdowns: true,
            locale: {
                format: 'DD-MM-YYYY'
            },
            onSelect: function (date) {

                var selectedDate = new Date(date);
                var mindt = new Date(selectedDate.getTime() + 1);
                $("#txttoDate").daterangepicker("option", "minDate", mindt);
            }
        });

        $('#txttoDate').daterangepicker({
            singleDatePicker: true,
            showDropdowns: true,
            mask: true,
            locale: {
                format: 'DD-MM-YYYY'
            },
            onSelect: function (date) {

                var selectedDate = new Date(date);
                var maxdt = new Date(selectedDate.getTime() - 1);
                $("#txtfromDate").daterangepicker("option", "maxDate", maxdt);

            }
        });





        $('body').on('click', '#btnshow', function () {
            GetEmpSelectedFieldValuesOndemand($("#hdnEmployeeId").val());
            GetCusSelectedFieldValuesOndemand($("#hdnCustomerId").val());
            var flag = true;

            if (dtFrom.GetDate() == null) {
                $('#MandatoryFromDate').attr('style', 'display:block');
                flag = false;
            }
            else {
                $('#MandatoryFromDate').attr('style', 'display:none');
            }

            if (dtTo.GetDate() == null) {
                $('#MandatoryToDate').attr('style', 'display:block');
                flag = false;
            }
            else {
                $('#MandatoryToDate').attr('style', 'display:none');
            }


            datefrm = dtFrom.GetText();
            var newdatefrom = datefrm.split("-").reverse().join("-");

            var startdate = new Date(Date.parse(newdatefrom));
            //  alert(startdate);


            dateto = dtTo.GetText();
            var newdateTo = dateto.split("-").reverse().join("-");

            var endDate = new Date(Date.parse(newdateTo));

            if (endDate < startdate) {

                jAlert('From date should be before/equal To date');
            }

            else {
                //$("#refreshgridsalessummary").show();
                if (flag == true) {
                    is_pageload = "1";
                    //  gridQuotationApproval.Refresh();
                    //gridsalessummaryregister.Refresh();
                    var start = $('#dtFrom_I').val();
                    var end = $('#dtTo_I').val();
                    start = start.split('-')[1] + '-' + start.split('-')[0] + '-' + start.split('-')[2];
                    end = end.split('-')[1] + '-' + end.split('-')[0] + '-' + end.split('-')[2];

                    var dayse = Math.round((Date.parse(end) - Date.parse(start)) / (1000 * 60 * 60 * 24));
                    //if (dayse <= 7) {
                    //Mantis Issue 24728
                    //if (dayse <= 30) {
                    //alert(dayse)
                    //if (dayse <= 34) {
                    ////End of Mantis Issue 24728
                    //    gridQuotationApproval.Refresh();
                    //}
                    //else {
                    //    //jAlert("Searching days must be within 7 days");
                    //    //Mantis Issue 24728
                    //    //jAlert("Searching days must be within One month");
                    //    jAlert("Searching days must be within 35 days");
                    //    //End of Mantis Issue 24728
                    //}
                    gridQuotationApproval.Refresh();
                }
            }




        });



        $('#ddlAppIds').on('change', function () {
            if ($("#ddlAppIds option:selected").index() > 0) {
                var selectedValue = $(this).val();
                var desg = $("#drpdesignation").val();
                var usrtype = $("#ddlusertypes").val();
                $('#ddlAppIds').prop("selectedIndex", 0);
                var url = '@Url.Action("ExportQuotationApprovalList", "QuotationApproval", new { type = "_type_" })'
                window.location.href = url.replace("_type_", selectedValue);


            }
        });


    })
    var CustId = [];
    var empId = [];
    function OnStartCallback(s, e) {
        e.customArgs["Fromdate"] = dtFrom.GetText();
        e.customArgs["Todate"] = dtTo.GetText();
        e.customArgs["shopcode"] = CustId;
        e.customArgs["empcode"] = empId;
        e.customArgs["is_pageload"] = is_pageload;
    }

    function DateValidateFrom() {
        if (dtTo.GetDate()) {
            if (dtTo.GetDate() < dtFrom.GetDate()) {
                dtTo.SetValue(dtFrom.GetDate());
            }
        }
    }

    function DateValidateTo() {
        if (dtFrom.GetDate()) {
            if (dtTo.GetDate() < dtFrom.GetDate()) {
                dtTo.SetValue(dtFrom.GetDate());
            }
        }
    }
    function GetCusSelectedFieldValuesOndemand(values) {
        try {
            CustId = [];
            var Cids = values.split(',');
            for (var i = 0; i < Cids.length; i++) {
                CustId.push(Cids[i]);
            }
        } finally {
            console.log(CustId);
        }
    }

    function OpenforApprove(DOCUMENT_NUMBER) {
       
        $("#hdnDOCUMENT_NUMBER").val(DOCUMENT_NUMBER);

        $.ajax({
            url: "@Url.Action("GetApprovalDetails", "QuotationApproval")",
            async: false,
            data: { DOCUMENT_NUMBER: DOCUMENT_NUMBER },
            type: 'POST',
            success: function (data) {
                if (data.length > 0) {
                    if (data[0].QUOTATION_STATUS == "Approved" || data[0].QUOTATION_STATUS == "Rejected" ) {
                        $("#txtQUOTATION_NUMBER").val(data[0].QUOTATION_NUMBER);
                        $("#txtRemarks").val(data[0].ApproveRemarks);

                        $("#ButtonsApproveReject").hide();
                        $("btnApprove").attr("disabled", true);
                        $("btnReject").attr("disabled", true);
                        $('#txtQUOTATION_NUMBER').attr("disabled", true);
                        $('#txtRemarks').attr("disabled", true)
                        $("#spn1").hide();
                        $("#spn2").hide();

                        $("#lblApproveReject").show();
                        var x = document.getElementById("lblApproveReject");

                        if (data[0].QUOTATION_STATUS == "Approved") {
                            x.innerHTML = "Approved";
                            x.style.color = "green";
                        }
                        else if (data[0].QUOTATION_STATUS == "Rejected") {
                            x.innerHTML = "Rejected";
                            x.style.color = "red";
                        }
                    }
                    else {
                        $("#txtQUOTATION_NUMBER").val("");
                        $("#txtRemarks").val("");
                        $("#hdnUser_loginId").val(data[0].user_loginId);

                        $("#ButtonsApproveReject").show();
                        $("btnApprove").attr("disabled", false);
                        $("btnReject").attr("disabled", false);
                        $('#txtQUOTATION_NUMBER').attr("disabled", false);
                        $('#txtRemarks').attr("disabled", false)
                        $("#spn1").show();
                        $("#spn2").show();

                        $("#lblApproveReject").hide();
                        var x = document.getElementById("lblApproveReject");
                        x.innerHTML = "";
                    }
                }
                else {
                    $("#txtQUOTATION_NUMBER").val("");
                    $("#txtRemarks").val("");

                    $("#ButtonsApproveReject").show();
                    $("btnApprove").attr("disabled", false);
                    $("btnReject").attr("disabled", false);

                    $("#lblApproveReject").hide();
                    var x = document.getElementById("lblApproveReject");
                    x.innerHTML = "";
                }
                

                $('#myApproveRejectModal').modal('show');
            },
            error: function () {
            },
        });

        $('#myApproveRejectModal').modal('show');
    }

    function UpdateStatus(status) {
        if (status == "Approve") {
            if ($("#txtQUOTATION_NUMBER").val() == "" || $("#txtQUOTATION_NUMBER").val() == null || $("#txtQUOTATION_NUMBER").val() == undefined) {
                jAlert("Please enter approval quotation number.", "Alert", function () {
                    setTimeout(function () {
                        $("#txtQUOTATION_NUMBER").focus();
                        return
                    }, 200);
                });
                return
            }
        }

        if ($("#txtRemarks").val() == "" || $("#txtRemarks").val() == null || $("#txtRemarks").val() == undefined) {
            jAlert("Please enter approval remarks.", "Alert", function () {
                setTimeout(function () {
                    $("#txtRemarks").focus();
                    return
                }, 200);
            });
            return
        }

        var QUOTATION_NUMBER = $("#txtQUOTATION_NUMBER").val();
        var Remarks = $("#txtRemarks").val();
        var DOCUMENT_NUMBER = $("#hdnDOCUMENT_NUMBER").val();
        var user_loginId = $("#hdnUser_loginId").val();
        var message = "";
        
        $.ajax({
            url: "@Url.Action("UpdateApproveReject", "QuotationApproval")",
            async: false,
            data: { 'Status': status, 'DOCUMENT_NUMBER': DOCUMENT_NUMBER, 'QUOTATION_NUMBER': QUOTATION_NUMBER, 'Remarks': Remarks },
            type: 'POST',
            success: function (returnValue)
            {
                if (returnValue != "") {
                    if (returnValue == "Rejected") {
                        message = "Your quotation document " + DOCUMENT_NUMBER + " has been rejected. ";
                        jAlert("Quotation rejected successfully.");
                    }
                    else {
                        message = "Your quotation document "+DOCUMENT_NUMBER+" has been approved & quotation number is generated ("+returnValue+"). Please check & share it.";
                        jAlert("Quotation approved successfully.");
                    }
                   

                    if (user_loginId != "") {
                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("SendNotification", "QuotationApproval")",
                            data: { Mobiles: user_loginId, messagetext: message },
                                success: function (response) {
                                    if (response == "200") {
                                       // jAlert('Notification sent successfully.');
                                    }
                                    else {
                                       // jAlert('Notification sent failed.');
                                    }
                                }
                            });
                    }
                    else {
                        jAlert('Notification sent failed. Phone No not found. ');
                    }
                    

                    $('#myApproveRejectModal').modal('hide');
                }
                else {
                    jAlert("Approved/Rejected failed.");
                }
               
                gridQuotationApproval.Refresh();
                gridQuotationApproval.Refresh();
            },
                error: function () {
            },
        });
    }
</script>
<style>
    .padTabl > tbody > tr > td {
        padding: 3px 10px;
    }

    #tblshoplist > thead > tr > th {
        background: #5F65AD !important;
        border-top: 1px solid #0f87cc;
        color: #fff;
    }

    #tblshoplist tbody > tr > th, #tblshoplist tfoot > tr > th, #tblshoplist thead > tr > td, #tblshoplist tbody > tr > td, #tblshoplist tfoot > tr > td {
        padding: 1px 5px !important;
    }



    .scrooler {
        width: 100%;
        overflow-x: scroll;
    }

    .w1 {
        width: 107px;
    }

    .date {
        width: 62px;
    }

    .labelTbl > tbody > tr > td {
        padding-right: 20px;
        padding-bottom: 5px;
    }

    #StateGridLookup_ET > tbody > tr > td:first-child, #DesigGridLookup_ET > tbody > tr > td:first-child, #EmpGridLookup_ET > tbody > tr > td:first-child {
        display: none;
    }

    .validclass {
        position: absolute;
        right: 3px;
        top: 32px;
    }
</style>

<script>
    function onShowChooserClick(s, e) {
        UpdateCustomizationWindowVisibility();
    }
    var visibleColumn = [];
    function grid_CustomizationWindowCloseUp(s, e) {
        UpdateButtonText();

        for (var i = 0; i <= gridQuotationApproval.GetColumnsCount() ; i++) {
            if (gridQuotationApproval.GetColumn(i) != null) {
                if (gridQuotationApproval.GetColumn(i).visible == false) {
                    console.log(gridQuotationApproval.GetColumn(i).fieldName);
                    visibleColumn.push(gridQuotationApproval.GetColumn(i).fieldName);
                }
            }
        }

        addPageRetention(visibleColumn);
    }

    function UpdateCustomizationWindowVisibility() {
        if (gridQuotationApproval.IsCustomizationWindowVisible())
            gridQuotationApproval.HideCustomizationWindow();
        else
            gridQuotationApproval.ShowCustomizationWindow();
        UpdateButtonText();
    }

    function UpdateButtonText() {
        var text = gridQuotationApproval.IsCustomizationWindowVisible() ? "Hide" : "Show";
        text += " Column Chooser";
        btShowColumnChooser.SetText(text);
    }

    function addPageRetention(visibleColumn) {
        $.ajax({
            url: "@Url.Action("PageRetention", "QuotationApproval")",
            async: false,
            data: { Columns: visibleColumn },
            type: 'POST',
            success: function (data) {
                gridQuotationApproval.Refresh();
            },
            error: function () {
            },
        });

    }

</script>


<script>
    $(document).ready(function () {
        $('#EmployeeModel').on('shown.bs.modal', function () {
            $('#txtEmployeeSearch').focus();
        })
    })
    var ProdArr = new Array();
    $(document).ready(function () {
        var ProdObj = new Object();
        ProdObj.Name = "EmployeeSource";
        ProdObj.ArraySource = ProdArr;
        arrMultiPopup.push(ProdObj);
    })

    function EmployeeButnClick(s, e) {
        $('#EmployeeModel').modal('show');
    }

    function Employee_KeyDown(s, e) {
        if (e.htmlEvent.key == "Enter") {
            $('#EmployeeModel').modal('show');
        }
    }

    function Employeekeydown(e) {
        var OtherDetails = {}

        if ($.trim($("#txtEmployeeSearch").val()) == "" || $.trim($("#txtEmployeeSearch").val()) == null) {
            return false;
        }
        OtherDetails.SearchKey = $("#txtEmployeeSearch").val();
        OtherDetails.ClassID = "";

        if (e.code == "Enter" || e.code == "NumpadEnter") {

            var HeaderCaption = [];
            HeaderCaption.push("Employee Name");
            HeaderCaption.push("Employee Code");


            if ($("#txtEmployeeSearch").val() != "") {
                callonServerM("../../../Models/ShopAddress.asmx/GetEmployeeList", OtherDetails, "EmployeeTable", HeaderCaption, "dPropertyIndex", "SetSelectedValues", "EmployeeSource");
            }
        }
        else if (e.code == "ArrowDown") {
            if ($("input[dPropertyIndex=0]"))
                $("input[dPropertyIndex=0]").focus();
        }
    }

    function SetfocusOnseach(indexName) {
        if (indexName == "dPropertyIndex")
            $('#txtEmployeeSearch').focus();
        else
            $('#txtEmployeeSearch').focus();
    }

    function SetSelectedValues(Id, Name, ArrName) {
        if (ArrName == 'EmployeeSource') {
            var key = Id;
            if (key != null && key != '') {
                $('#EmployeeModel').modal('hide');
                EmployeeTxt.SetText(Name);
                $('#hdnEmployeeId').val(key);
            }
            else {
                EmployeeTxt.SetText('');
                $('#hdnEmployeeId').val('');
            }
        }
        else if (ArrName == 'CustomerSource') {
            var key = Id;
            if (key != null && key != '') {
                $('#CustomerModel').modal('hide');
                CustomerTxt.SetText(Name);
                $('#hdnCustomerId').val(key);
            }
            else {
                CustomerTxt.SetText('');
                $('#hdnCustomerId').val('');
            }
        }
    }

    function GetEmpSelectedFieldValuesOndemand(values) {
        try {
            empId = [];
            var eids = values.split(',');
            for (var i = 0; i < eids.length; i++) {
                empId.push(eids[i]);
            }
        } finally {
            console.log(empId);
        }
    }
    @*</script>
<script>*@
    var CustomerArr = new Array();
    $(document).ready(function () {
        var CustomerObj = new Object();
        CustomerObj.Name = "CustomerSource";
        CustomerObj.ArraySource = CustomerArr;
        arrMultiPopup.push(CustomerObj);
    })

    function CustomerButnClick(s, e) {
        $('#CustomerModel').modal('show');
    }

    function Customer_KeyDown(s, e) {
        if (e.htmlEvent.key == "Enter") {
            $('#CustomerModel').modal('show');
        }
    }

    function Customerkeydown(e) {
        var OtherDetails = {}

        if ($.trim($("#txtCustomerSearch").val()) == "" || $.trim($("#txtCustomerSearch").val()) == null) {
            return false;
        }
        OtherDetails.SearchKey = $("#txtCustomerSearch").val();
        OtherDetails.ClassID = "";

        if (e.code == "Enter" || e.code == "NumpadEnter") {

            var HeaderCaption = [];
            HeaderCaption.push("Customer Name");
            //HeaderCaption.push("Customer Code");


            if ($("#txtCustomerSearch").val() != "") {
                callonServerM("../../../Models/ShopAddress.asmx/GetCustomerList", OtherDetails, "CustomerTable", HeaderCaption, "dPropertyIndex", "SetSelectedValues", "CustomerSource");
            }
        }
        else if (e.code == "ArrowDown") {
            if ($("input[dPropertyIndex=0]"))
                $("input[dPropertyIndex=0]").focus();
        }
    }

    function SetfocusOnseach(indexName) {
        if (indexName == "dPropertyIndex")
            $('#txtCustomerSearch').focus();
        else
            $('#txtCustomerSearch').focus();
    }

    //function GetCusSelectedFieldValuesOndemand(values) {
    //    try {
    //        CustId = [];
    //        var Cids = values.split(',');
    //        for (var i = 0; i < Cids.length; i++) {
    //            CustId.push(Cids[i]);
    //        }
    //    } finally {
    //        console.log(CustId);
    //    }
    //}
</script>
<link href="~/Content/media.css" rel="stylesheet" />
<div class="breadCumb">
    <span>Quotation Approval</span>
</div>

<div class="container">
    <div class="backBox mt-5 p-4 ">
        <div class="row px-3">
            <div class="col-md-12">
                <div class="row">
                    <table class="eqpadtbl">
                        <tr>
                            <td class="w150 relative">
                                <label>From Date</label>
                                <div>
                                    @Html.DevExpress().DateEditFor(x => x.Fromdate,
                                deSettings =>
                                {
                                    deSettings.Name = "dtFrom";
                                    deSettings.Date = DateTime.Now;
                                    deSettings.Properties.UseMaskBehavior = true;
                                    deSettings.Properties.EditFormat = EditFormat.Custom;
                                    deSettings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                    deSettings.Properties.DisplayFormatString = "dd-MM-yyyy";
                                    deSettings.Properties.EditFormatString = "dd-MM-yyyy";
                                    deSettings.Properties.ShowOutOfRangeWarning = false;
                                    deSettings.Properties.ClientSideEvents.DateChanged = "DateValidateFrom";
                                }).GetHtml()
                                    <span id="MandatoryFromDate" style="display: none" class="validclass">
                                        <img id="img_MandatoryFromDate" class="dxEditors_edtError_PlasticBlue" src="/DXR.axd?r=1_36-tyKfc" title="Mandatory">
                                    </span>
                                </div>
                            </td>
                            <td class="w150 relative">
                                <label>To Date</label>
                                <div>
                                    @*@Html.TextBoxFor(m => m.Todate, new { @class = "form-control", @id = "txttoDate", @radonly = true, @tabindex = 3 })*@
                                    @Html.DevExpress().DateEditFor(x => x.Todate,
                                deSettings =>
                                {
                                    deSettings.Name = "dtTo";
                                    deSettings.Date = DateTime.Now;
                                    deSettings.Properties.UseMaskBehavior = true;
                                    deSettings.Properties.EditFormat = EditFormat.Custom;
                                    deSettings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                    deSettings.Properties.DisplayFormatString = "dd-MM-yyyy";
                                    deSettings.Properties.EditFormatString = "dd-MM-yyyy";
                                    deSettings.Properties.ShowOutOfRangeWarning = false;
                                    deSettings.Properties.ClientSideEvents.DateChanged = "DateValidateTo";

                                }).GetHtml()
                                    <span id="MandatoryToDate" style="display: none" class="validclass">
                                        <img id="img_MandatoryToDate" class="dxEditors_edtError_PlasticBlue" src="/DXR.axd?r=1_36-tyKfc" title="Mandatory">
                                    </span>
                                </div>
                            </td>



                            @*<td class="w150">
                                <label>State </label>
                                <div>
                                    @Html.Action("GetEmployeeWiseStateList", "MasterPopulate", new { UserID = @Session["userid"].ToString() })
                                </div>
                            </td>*@
                            @*<td class="w150">
                                <label>Designation</label>
                                <div>

                                    @Html.Action("GetDesigList", "SalesReportSummary")


                                </div>
                            </td>*@
                            <td class="w150">
                                <label>Employee(s)</label>
                                <div>
                                    @*@Html.Action("GetEmpList", "MasterPopulate", new { userId = @Session["userid"].ToString() })*@

                                    @Html.DevExpress().ButtonEdit(
                                settings =>
                                {
                                    settings.Name = "EmployeeTxt";
                                    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                    //settings.Text = Model.AssignedTo;
                                    settings.ReadOnly = true;
                                    settings.Properties.Buttons.Add("...");
                                    settings.Properties.ClientSideEvents.ButtonClick = "function(s,e){EmployeeButnClick(s,e);}";
                                    settings.Properties.ClientSideEvents.KeyDown = "function(s,e){Employee_KeyDown(s,e);}";

                                }).GetHtml()

                                </div>
                            </td>
                            <td class="w150">
                                <label>Customer(s)</label>
                                <div>
                                    @*@Html.Action("GetEmpList", "MasterPopulate", new { userId = @Session["userid"].ToString() })*@

                                    @Html.DevExpress().ButtonEdit(
                                settings =>
                                {
                                    settings.Name = "CustomerTxt";
                                    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                    //settings.Text = Model.AssignedTo;
                                    settings.ReadOnly = true;
                                    settings.Properties.Buttons.Add("...");
                                    settings.Properties.ClientSideEvents.ButtonClick = "function(s,e){CustomerButnClick(s,e);}";
                                    settings.Properties.ClientSideEvents.KeyDown = "function(s,e){Customer_KeyDown(s,e);}";

                                }).GetHtml()

                                </div>
                            </td>

                            <td style="padding-top: 22px;width:170px;">
                                <label></label>
                                <button type="button" id="btnshow" class="btn btn-success btnwidth" tabindex=4>Show</button>
                                <select name="ddlAppIds" class="btn btn-sm btn-primary" id="ddlAppIds">
                                    <option value="0">Export to</option>
                                    <option value="1">PDF</option>
                                    <option value="2">XLSX</option>
                                    <option value="3">XLS</option>
                                    <option value="4">RTF</option>
                                    <option value="5">CSV</option>

                                </select>

                            </td>
                        </tr>
                    </table>
                </div>
            </div>

        </div>
        <input type="hidden" id="hdnuser_id" />
        <input type="hidden" id="hdnuser_state" />
        <input type="hidden" id="hdnuser_shop" />
        <input type="hidden" id="hdnUserID" value="@Session["userid"].ToString()" />
        @*<input type="hidden" id="hdnStateMandatory" value="@ViewBag.StateMandatory" />*@
    </div>
</div>
<div style="clear: both;"><br /></div>
<div class="container">
    <div class="backBox p-4 ">
        <div class="options">
            <div class="options-item">
                @Html.DevExpress().Button(settings =>
                {
                    settings.Name = "btShowColumnChooser";
                    settings.Text = "Show Column Chooser";
                    settings.ClientSideEvents.Click = "function (s, e) { onShowChooserClick(s,e); }";
                    // settings.Theme = "MaterialCompactOrange";
                }).GetHtml()
            </div>
        </div>
        <div class="row px-3">
            <div id="refreshgridsalessummary">
                @{
                    Html.RenderAction("GetQuotationApprovalList", "QuotationApproval", new { Fromdate = Model.Fromdate, Todate = Model.Todate, shopcode = Model.shopcode, empcode = Model.empcode, is_pageload = "0" });
                }
            </div>
        </div>
    </div>
</div>

<!--Employee Modal -->
<div class="modal fade pmsModal w50" id="EmployeeModel" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Employee Search</h4>
            </div>
            <div class="modal-body">
                <input type="text" class="form-control" onkeydown="Employeekeydown(event)" id="txtEmployeeSearch" width="100%" placeholder="Search By Employee Name" />
                <div id="EmployeeTable">
                    <table border='1' width="100%">

                        <tr class="HeaderStyle" style="font-size:small">
                            <th>Select</th>
                            <th class="hide">id</th>
                            <th>Employee Name</th>
                            <th>Employee Code</th>
                        </tr>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btnOkformultiselection btn-default btn btn-danger" onclick="DeSelectAll('EmployeeSource')">Deselect All</button>
                <button type="button" class="btnOkformultiselection btn-default  btn btn-success" data-dismiss="modal" onclick="OKPopup('EmployeeSource')">OK</button>
                @*<button type="button" class="btnOkformultiselection btn-default" data-dismiss="modal">Close</button>*@
            </div>
        </div>
    </div>
</div>
<asp:HiddenField ID="hdnEmployeeId" runat="server" />
<!--Employee Modal -->
<!--Customer Modal -->
<div class="modal fade pmsModal w50" id="CustomerModel" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Customer Search</h4>
            </div>
            <div class="modal-body">
                <input type="text" class="form-control" onkeydown="Customerkeydown(event)" id="txtCustomerSearch" width="100%" placeholder="Search By Customer Name" />
                <div id="CustomerTable">
                    <table border='1' width="100%">

                        <tr class="HeaderStyle" style="font-size:small">
                            <th>Select</th>
                            <th class="hide">id</th>
                            <th>Customer Name</th>
                            @*<th>Employee Code</th>*@
                        </tr>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btnOkformultiselection btn-default btn btn-danger" onclick="DeSelectAll('CustomerSource')">Deselect All</button>
                <button type="button" class="btnOkformultiselection btn-default  btn btn-success" data-dismiss="modal" onclick="OKPopup('CustomerSource')">OK</button>
                @*<button type="button" class="btnOkformultiselection btn-default" data-dismiss="modal">Close</button>*@
            </div>
        </div>
    </div>
</div>
<asp:HiddenField ID="hdnCustomerId" runat="server" />
<!--Customer Modal -->

<!-- Approve/Reject Modal -->
<div class="modal fade pmsModal w70 font-pp modalScroll" id="myApproveRejectModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="ClearData();"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Approve/Reject Quotation</h4>
            </div>
            <input type="hidden" id="hdnShopCode" value="" />
            <div class="modal-body inputShrink">
                <div class="row">
                    <div class="col-md-12"><label style="margin-bottom: 16px;">Approval Quotation Number <span class="red">*</span></label></div>
                    <div class="col-md-1" id="spn1"><span style="display: inline-block; padding: 7px 0px; ">EP/@DateTime.Today.ToString("MM")/</span></div>
                    <div class="col-md-6">
                        <div>
                            @Html.TextBoxFor(m => m.QUOTATION_NUMBER, new { @class = "form-control", @id = "txtQUOTATION_NUMBER", @maxlength = "8" })
                            
                        </div>
                    </div>
                    @*Mantis Issue 25465 [hipehn added in year]*@
                    <div class="col-md-2" id="spn2"><span style="display: inline-block; padding: 7px 0px; ">/@DateTime.Today.ToString("yy")-@DateTime.Today.AddYears(1).ToString("yy")</span></div>
                    <div class="clear"></div>
                   
                    <div class="col-md-10">
                        <label style="margin-bottom: 16px;margin-top:10px">Remarks <span class="red">*</span></label>
                        <div>
                            @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control", @id = "txtRemarks", @maxlength = "500" })
                        </div>
                    </div>
                    
                </div>
            </div>
            <div class="modal-footer" id="ButtonsApproveReject" >
                <button type="button" id="btnApprove" class="btn btn-success" onclick="UpdateStatus('Approve');">Approve</button>
                <button type="button" id="btnReject" class="btn btn-primary" onclick="UpdateStatus('Reject');">Reject</button>
                <button type="button" class="btn btn-danger" data-dismiss="modal" >Close</button>
            </div>
            <div class="modal-footer" id="lblApproveReject">
                <label id="lblStatus" style="font-weight:bold"> </label>
                <button type="button" class="btn btn-danger" data-dismiss="modal" >Close</button>
            </div>
        </div>
    </div>
</div>
<asp:HiddenField ID="hdnDOCUMENT_NUMBER" runat="server" />
<asp:HiddenField ID="hdnUser_loginId" runat="server" />