@model System.Data.DataSet

@{
    ViewBag.Title = "DS Visit - Hierarchy & Channel Wise";
    /// Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript" src="~/Scripts/globalize.js"></script>
<script src="~/Scripts/cultures/globalize.cultures.js"></script>


<script src="~/Scripts/chosen/chosen.jquery.min.js"></script>
<link href="~/Scripts/chosen/chosen.min.css" rel="stylesheet" />
<link href="~/Content/media.css" rel="stylesheet" />

<link href="~/assests/css/custom/SearchPopup.css" rel="stylesheet" />
<script src="~/assests/pluggins/choosen/choosen.min.js"></script>
<script src="~/Scripts/SearchMultiPopup.js"></script>


<style>
    #BranchGridLookup_CC {
        width: 100%;
    }
</style>
<script>
    function onShowChooserClick(s, e) {
        UpdateCustomizationWindowVisibility();
    }
    var visibleColumn = [];
    function grid_CustomizationWindowCloseUp(s, e) {
        UpdateButtonText();

        for (var i = 0; i <= gridDSVisitCH.GetColumnsCount() ; i++) {
            if (gridDSVisitCH.GetColumn(i) != null) {
                if (gridDSVisitCH.GetColumn(i).visible == false) {
                    console.log(gridDSVisitCH.GetColumn(i).fieldName);
                    visibleColumn.push(gridDSVisitCH.GetColumn(i).fieldName);
                }
            }
        }

        addPageRetention(visibleColumn);
    }

    function UpdateCustomizationWindowVisibility() {
        if (gridDSVisitCH.IsCustomizationWindowVisible())
            gridDSVisitCH.HideCustomizationWindow();
        else
            gridDSVisitCH.ShowCustomizationWindow();
        UpdateButtonText();
    }

    function UpdateButtonText() {
        var text = gridDSVisitCH.IsCustomizationWindowVisible() ? "Hide" : "Show";
        text += " Column Chooser";
        btShowColumnChooser.SetText(text);
    }

    function addPageRetention(visibleColumn) {
        $.ajax({
            url: "@Url.Action("PageRetention", "DSVisitChannelHierarchy")",
            async: false,
        data: { Columns: visibleColumn },
        type: 'POST',
        success: function (data) {
            gridDSVisitCH.Refresh();
        },
        error: function () {
        },
        });

    }

</script>
<script>
    var is_pageload = "0";
    $(function () {

        var d = new Date();

        dtFrom.SetValue(d);
        dtTo.SetValue(d);

        var lookup = ASPxClientControl.GetControlCollection().GetByName("BranchGridLookup");
        lookup.GetGridView().Refresh();
        var lookup = ASPxClientControl.GetControlCollection().GetByName("BranchGridLookup");
        lookup.GetGridView().Refresh();

        $('#txtfromDate').daterangepicker({
            singleDatePicker: true,
            showDropdowns: true,
            locale: {
                format: 'DD-MM-YYYY'
            },
            onSelect: function (date) {

                var selectedDate = new Date(date);
                var mindt = new Date(selectedDate.getTime() + 1);
                $("#txttoDate").daterangepicker("option", "minDate", mindt);
            }
        });

        $('#txttoDate').daterangepicker({
            singleDatePicker: true,
            showDropdowns: true,
            mask: true,
            locale: {
                format: 'DD-MM-YYYY'
            },
            onSelect: function (date) {

                var selectedDate = new Date(date);
                var maxdt = new Date(selectedDate.getTime() - 1);
                $("#txtfromDate").daterangepicker("option", "maxDate", maxdt);

            }
        });


        $('body').on('click', '#btnshow', function () {

            var flag = true;
            if (dtFrom.GetDate() == null) {
                $('#MandatoryFromDate').attr('style', 'display:block');
                flag = false;
            }
            else {
                $('#MandatoryFromDate').attr('style', 'display:none');
            }

            if (dtTo.GetDate() == null) {
                $('#MandatoryToDate').attr('style', 'display:block');
                flag = false;
            }
            else {
                $('#MandatoryToDate').attr('style', 'display:none');
            }

            datefrm = dtFrom.GetText();
            var newdatefrom = datefrm.split("-").reverse().join("-");

            var startdate = new Date(Date.parse(newdatefrom));

            dateto = dtTo.GetText();
            var newdateTo = dateto.split("-").reverse().join("-");

            var endDate = new Date(Date.parse(newdateTo));

            if (endDate < startdate) {

                jAlert('From date should be before/equal To date');
            }

            else {
                if (flag == true) {
                    is_pageload = "1";

                    var start = $('#dtFrom_I').val();
                    var end = $('#dtTo_I').val();
                    start = start.split('-')[1] + '-' + start.split('-')[0] + '-' + start.split('-')[2];
                    end = end.split('-')[1] + '-' + end.split('-')[0] + '-' + end.split('-')[2];

                    var dayse = Math.round((Date.parse(end) - Date.parse(start)) / (1000 * 60 * 60 * 24));
                    if (dayse <= 35) {
                    }
                    else {
                        jAlert("Searching days must be within 35 days");
                        flag = false;
                        return false;
                    }
                }
            }
            if (BranchId == "" || BranchId == null) {
                jAlert("Please select Branch.");
                flag = false;
                return false;
            }
            else {
            }
            if ($('#IsEmpDSAll').is(':checked')) {
            }
            else {
                GetEmpSelectedFieldValuesOndemand($("#hdnEmployeeWDId").val());
                var data = [];

                data.is_pageload = "0";

                var surl = '@Url.Action("_PartialGridDSVisitChannelHierarchy", "DSVisitChannelHierarchy")';
                $.ajax({
                    url: surl,
                    async: false,
                    data: { model: data },
                    type: 'POST',
                    success: function (data) {

                    },
                    error: function () {

                    },
                });

                if (dayse <= 35) {
                    if (flag == true) {
                        is_pageload = "1";
                        gridDSVisitCH.Refresh();
                    }
                }
                else {
                    jAlert("Searching days must be within 35 days.");

                }
                GetEmpSelectedFieldValuesOndemand($("#hdnEmployeeWDId").val());
            }

            gridDSVisitCH.Refresh();

        });


        $('#ddlAppIds').on('change', function () {
            if ($("#ddlAppIds option:selected").index() > 0) {
                var selectedValue = $(this).val();
                $('#ddlAppIds').prop("selectedIndex", 0);
                var url = '@Url.Action("ExportDSVisitChannelHierarchyList", "DSVisitChannelHierarchy", new { type = "_type_" })'
                window.location.href = url.replace("_type_", selectedValue);
            }
        });


    })

    function BranchStartCallback(s, e) {
        e.customArgs["UserID"] = $("#hdnUserID").val();
    }

    function ChannelStartCallback(s, e) {
        e.customArgs["UserID"] = $("#hdnUserID").val();
    }

    function BranchLookupValChange() {
        BranchGridLookup.GetGridView().Refresh();
    }

    function ChannelLookupValChange() {
        ChannelGridLookup.GetGridView().Refresh();
    }

    function OnStartCallback(s, e) {

        e.customArgs["Fromdate"] = dtFrom.GetText();
        e.customArgs["Todate"] = dtTo.GetText();
        e.customArgs["BranchId"] = BranchId;
        e.customArgs["empcode"] = empId;
        e.customArgs["ChannelId"] = ChannelId;
        e.customArgs["is_pageload"] = is_pageload;
    }

    var BranchId = [];
    var Branch_Id = "";
    function BranchSelectionChanged(s, e) {
        BranchGridLookup.gridView.GetSelectedFieldValues("BRANCH_ID", GetSelectedFieldValuesCallbackBranch);
    }
    function GetSelectedFieldValuesCallbackBranch(values) {

        try {
            BranchId = [];
            Branch_Id = "";
            for (var i = 0; i < values.length; i++) {
                BranchId.push(values[i]);
                Branch_Id += values[i] + ',';
            }

        } finally {
            console.log(BranchId);
        }
    }
    var ChannelId = [];
    var Channel_Id = "";
    function ChannelSelectionChanged(s, e) {
        ChannelGridLookup.gridView.GetSelectedFieldValues("ch_id", GetSelectedFieldValuesCallbackChannel);
    }
    function GetSelectedFieldValuesCallbackChannel(values) {
        try {
            ChannelId = [];
            Channel_Id = "";
            for (var i = 0; i < values.length; i++) {
                ChannelId.push(values[i]);
                Channel_Id += values[i] + ',';
            }
        } finally {
            console.log(ChannelId);
        }
    }
    function SelectAllGridLookup(s, e) {
        var Hoid = $('#HeadBranch').val();
        BranchId = "";
        BranchGridLookup.SetText("");
        if (Hoid == null || Hoid == "") {
            Hoid = "0";
        }

        $.ajax({
            type: 'POST',
            url: "/MasterPopulate/GetSelectedChildBranchList",
            data: { "Hoid": Hoid },
            dataType: "json",
            async: false,
            success: function (data) {
                BranchId = [];
                Branch_Id = "";
                $.each(data, function (i, data) {
                    BranchId.push(data.BRANCH_ID);
                    Branch_Id += data.BRANCH_ID + ',';
                });
                BranchGridLookup.gridView.SelectRows();
            },
            error: function () {
            }
        });
    }
    function DeSelectAllGridLookup(s, e) {
        BranchGridLookup.gridView.UnselectRows();

        $('#hdnEmployeeWDId').val('')
        EmployeeWDTxt.SetText('')
        EmpGridLookup.GetGridView().Refresh()
        BranchId = [];
        Branch_Id = "";
    }

    //channel select all part
    function SelectAllChannelGridLookup(s, e) {
        ChannelId = "";
        ChannelGridLookup.SetText("");
        $.ajax({
            type: 'POST',
            url: "/MasterPopulate/GetSelectedChannelList",
            dataType: "json",
            async: false,
            success: function (data) {
                ChannelId = [];
                Channel_Id = "";
                $.each(data, function (i, data) {
                    ChannelId.push(data.ch_id);
                    Channel_Id += data.ch_id + ',';
                });
                ChannelGridLookup.gridView.SelectRows();
            },
            error: function () {
            }
        });
    }
    function DeSelectAllChannelGridLookup(s, e) {
        ChannelGridLookup.gridView.UnselectRows();
        ChannelId = [];
        Channel_Id = "";
    }
    //end of channel select all part
    var empId = [];
    function EmpSelectionChanged(s, e) {
        EmpGridLookup.gridView.GetSelectedFieldValues("empcode", GetEmpSelectedFieldValuesCallback);
    }
    function GetEmpSelectedFieldValuesCallback(values) {
        try {
            empId = [];
            for (var i = 0; i < values.length; i++) {
                empId.push(values[i]);
            }
        } finally {
            console.log(empId);
        }
    }


    function LookupValChange() {
    }

    function EmpStartCallback(s, e) {
        e.customArgs["Fromdate"] = dtFrom.GetText();
        e.customArgs["Todate"] = dtTo.GetText();
        e.customArgs["BranchId"] = BranchId;
        e.customArgs["empcode"] = empId;
        e.customArgs["ChannelId"] = ChannelId;
        e.customArgs["is_pageload"] = is_pageload;
    }
    function DateValidateFrom() {
        if (dtTo.GetDate()) {
            if (dtTo.GetDate() < dtFrom.GetDate()) {
                dtTo.SetValue(dtFrom.GetDate());
            }
        }
    }

    function DateValidateTo() {
        if (dtFrom.GetDate()) {
            if (dtTo.GetDate() < dtFrom.GetDate()) {
                dtTo.SetValue(dtFrom.GetDate());
            }
        }
    }

</script>
<style>
    .padTabl > tbody > tr > td {
        padding: 3px 10px;
    }

    #tblshoplist > thead > tr > th {
        background: #5F65AD !important;
        border-top: 1px solid #0f87cc;
        color: #fff;
    }

    #tblshoplist tbody > tr > th, #tblshoplist tfoot > tr > th, #tblshoplist thead > tr > td, #tblshoplist tbody > tr > td, #tblshoplist tfoot > tr > td {
        padding: 1px 5px !important;
    }



    .scrooler {
        width: 100%;
        overflow-x: scroll;
    }

    .w1 {
        width: 107px;
    }

    .date {
        width: 62px;
    }

    .labelTbl > tbody > tr > td {
        padding-right: 20px;
        padding-bottom: 5px;
    }

    #BranchGridLookup_ET > tbody > tr > td:first-child, #DesigGridLookup_ET > tbody > tr > td:first-child, #EmpGridLookup_ET > tbody > tr > td:first-child {
        display: none;
    }

    .validclass {
        position: absolute;
        right: 3px;
        top: 32px;
    }

    .inputSpacer {
        padding-top: 24px;
    }

        .inputSpacer input {
            margin-right: 5px;
        }

    .fontLAbel {
        font-weight: 400;
    }

    .selectH {
        height: 28px !important;
        padding: 0px 5px !important;
    }

    .pmsModal .modal-header {
        background: #298ecc !important;
        background-image: none !important;
        padding: 11px 20px;
        border: none;
        border-radius: 5px 5px 0 0;
        color: #fff;
    }

    .pmsModal .modal-content {
        border: none;
    }

    .pmsModal .modal-header .modal-title {
        font-size: 14px;
    }

    .pmsModal .close {
        font-weight: 400;
        font-size: 25px;
        color: #fff;
        text-shadow: none;
        opacity: .5;
    }
</style>

@*<script>
        function onShowChooserClick(s, e) {
            UpdateCustomizationWindowVisibility();
        }
        var visibleColumn = [];
        function grid_CustomizationWindowCloseUp(s, e) {
            UpdateButtonText();

            for (var i = 0; i <= gridDSVisitCH.GetColumnsCount() ; i++) {
                if (gridDSVisitCH.GetColumn(i) != null) {
                    if (gridDSVisitCH.GetColumn(i).visible == false) {
                        console.log(gridDSVisitCH.GetColumn(i).fieldName);
                        visibleColumn.push(gridDSVisitCH.GetColumn(i).fieldName);
                    }
                }
            }

            addPageRetention(visibleColumn);
        }

        function UpdateCustomizationWindowVisibility() {
            if (gridDSVisitCH.IsCustomizationWindowVisible())
                gridDSVisitCH.HideCustomizationWindow();
            else
                gridDSVisitCH.ShowCustomizationWindow();
            UpdateButtonText();
        }

        function UpdateButtonText() {
            var text = gridDSVisitCH.IsCustomizationWindowVisible() ? "Hide" : "Show";
            text += " Column Chooser";
            btShowColumnChooser.SetText(text);
        }

    </script>*@


<script>
    $(document).ready(function () {
        $('#IsEmpWDAll').prop('checked', true);
        $('#hdnEmployeeWDId').val('')
        EmployeeWDTxt.SetText('')
        EmployeeWDTxt.SetEnabled(false);
    })
    var ProdArrWD = new Array();
    $(document).ready(function () {
        var ProdObjWD = new Object();
        ProdObjWD.Name = "EmployeeWDSource";
        ProdObjWD.ArraySource = ProdArrWD;
        arrMultiPopup.push(ProdObjWD);
    })

    function EmployeeWDButnClick(s, e) {
        $('#EmployeeWDModel').modal('show');
    }
    function EmployeeWD_KeyDown(s, e) {
        if (e.htmlEvent.key == "Enter") {
            $('#EmployeeWDModel').modal('show');
        }
    }
    function EmployeeWDkeydown(e) {
        var OtherDetails = {}

        if (Branch_Id == "" || Branch_Id == null) {
            jAlert("Please select Branch.");
            return false;
        }
        if ($.trim($("#txtEmployeeWDSearch").val()) == "" || $.trim($("#txtEmployeeWDSearch").val()) == null) {
            return false;
        }
        OtherDetails.SearchKey = $("#txtEmployeeWDSearch").val();
        OtherDetails.Desig = "WD";
        OtherDetails.ClassID = "";
        OtherDetails.SearchKeyAE = $('#hdnEmployeeAEId').val();
        OtherDetails.SearchKeyWD = "";
        OtherDetails.BranchId = Branch_Id;

        if (e.code == "Enter" || e.code == "NumpadEnter") {

            var HeaderCaption = [];
            HeaderCaption.push("Employee Name");
            HeaderCaption.push("Employee Code");
            if (BranchId == "" || BranchId == null) {
                jAlert("Please select Branch.");
                return false;
            }

            if ($("#txtEmployeeWDSearch").val() != "") {
                callonServerM("../../../Models/ShopAddress.asmx/GetEmployeeListDesigWise", OtherDetails, "EmployeeWDTable", HeaderCaption, "dPropertyIndex", "SetSelectedWDValues", "EmployeeWDSource");
            }
        }
        else if (e.code == "ArrowDown") {
            if ($("input[dPropertyIndex=0]"))
                $("input[dPropertyIndex=0]").focus();
        }
        GetEmpSelectedFieldValuesOndemand($("#hdnEmployeeWDId").val());
    }

    function SetfocusOnseach(indexName) {
        if (indexName == "dPropertyIndex")
            $('#txtEmployeeSearch').focus();
        else
            $('#txtEmployeeSearch').focus();
    }
    function SetfocusOnseach(indexName) {
        if (indexName == "dPropertyIndex")
            $('#txtEmployeeWDSearch').focus();
        else
            $('#txtEmployeeWDSearch').focus();
    }
    function SetSelectedValues(Id, Name, ArrName) {
        if (ArrName == 'EmployeeSource') {
            var key = Id;
            if (key != null && key != '') {
                $('#EmployeeAeModel').modal('hide');
                EmployeeTxt.SetText(Name);
                $('#hdnEmployeeAEId').val(key);
            }
            else {
                EmployeeTxt.SetText('');
                $('#hdnEmployeeAEId').val('');
            }
        }
        if (ArrName == 'EmployeeWDSource') {
            var key = Id;
            if (key != null && key != '') {
                $('#EmployeeWDModel').modal('hide');
                EmployeeWDTxt.SetText(Name);
                $('#hdnEmployeeWDId').val(key);
            }
            else {
                EmployeeWDTxt.SetText('');
                $('#hdnEmployeeWDId').val('');
            }
        }
        if (ArrName == 'EmployeeDSSource') {
            var key = Id;
            if (key != null && key != '') {
                $('#EmployeeDSModel').modal('hide');
                EmployeeDSTxt.SetText(Name);
                $('#hdnEmployeeDSId').val(key);
            }
            else {
                EmployeeDSTxt.SetText('');
                $('#hdnEmployeeDSId').val('');
            }
        }
    }
    function SetSelectedWDValues(Id, Name, ArrName) {
        if (ArrName == 'EmployeeWDSource') {
            var key = Id;
            if (key != null && key != '') {
                $('#EmployeeWDModel').modal('hide');
                EmployeeWDTxt.SetText(Name);
                $('#hdnEmployeeWDId').val(key);
            }
            else {
                EmployeeWDTxt.SetText('');
                $('#hdnEmployeeWDId').val('');
            }
        }
        alert($('#hdnEmployeeWDId').val())
    }
    function SetSelectedDSValues(Id, Name, ArrName) {
        if (ArrName == 'EmployeeDSSource') {
            var key = Id;
            if (key != null && key != '') {
                $('#EmployeeDSModel').modal('hide');
                EmployeeDSTxt.SetText(Name);
                $('#hdnEmployeeDSId').val(key);
            }
            else {
                EmployeeDSTxt.SetText('');
                $('#hdnEmployeeDSId').val('');
            }
        }
        alert($('#hdnEmployeeDSId').val())
    }

    function GetEmpSelectedFieldValuesOndemand(values) {
        try {
            empId = [];
            var eids = values.split(',');
            for (var i = 0; i < eids.length; i++) {
                empId.push(eids[i]);
            }
        } finally {
            console.log(empId);
        }
    }

    $(document).on('change', '#HeadBranch', function () {
        var Hoid = $('#HeadBranch').val();
        BranchId = "";
        BranchGridLookup.SetText("");
        if (Hoid == null || Hoid == "") {
            Hoid = "0";
        }

        $.ajax({
            type: 'POST',
            url: "/MasterPopulate/GetChildBranchList",
            data: { "Hoid": Hoid },
            dataType: "json",
            async: false,
            success: function (data) {
            },
            error: function () {
            }
        });
        BranchGridLookup.GetGridView().Refresh();

    })

    function CheckEmployeeWDSelection() {
        if ($('#IsEmpWDAll').prop('checked')) {
            $('#hdnEmployeeWDId').val('')
            EmployeeWDTxt.SetText('')
            EmployeeWDTxt.SetEnabled(false);
            $('#IsEmpWDAll').prop('checked', true);
        } else {
            EmployeeWDTxt.SetEnabled(true);
        }
    }

</script>

<link href="~/Content/media.css" rel="stylesheet" />
<div class="breadCumb">
    <span>DS Visit - Hierarchy & Channel Wise</span>
</div>

<div class="container">
    <div class="backBox px-3  font-pp">
        <div class="">
            <div class="col-md-12">
                <div class="row">
                    <table class="eqpadtbl mt-3 mb-3">
                        <tr>
                            <td class="w150 relative">
                                <label>From Date</label>
                                <div>
                                    @Html.DevExpress().DateEdit(
                                        settings =>
                                        {
                                            settings.Name = "dtFrom";
                                            settings.Properties.DisplayFormatString = "dd-MM-yyyy";
                                            settings.Properties.EditFormatString = "dd-MM-yyyy";
                                            settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                            settings.Date = DateTime.Now;
                                            settings.Properties.EditFormat = EditFormat.Custom;
                                            settings.Properties.ShowOutOfRangeWarning = false;
                                            settings.Properties.UseMaskBehavior = true;
                                            settings.Properties.ClientSideEvents.DateChanged = "DateValidateFrom";
                                            //settings.Properties.ClientSideEvents.Init = "SetDefaultDate";

                                        }
                                    ).GetHtml()
                                    <span id="MandatoryFromDate" style="display: none" class="validclass">
                                        <img id="img_MandatoryFromDate" class="dxEditors_edtError_PlasticBlue" src="/DXR.axd?r=1_36-tyKfc" title="Mandatory">
                                    </span>
                                </div>
                            </td>
                            <td class="w150 relative">
                                <label>To Date</label>
                                <div>
                                    @Html.DevExpress().DateEdit(
                                        settings =>
                                        {
                                            settings.Name = "dtTo";
                                            settings.Properties.DisplayFormatString = "dd-MM-yyyy";
                                            settings.Properties.EditFormatString = "dd-MM-yyyy";
                                            settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                            settings.Date = DateTime.Now;
                                            settings.Properties.EditFormat = EditFormat.Custom;
                                            settings.Properties.ShowOutOfRangeWarning = false;
                                            settings.Properties.UseMaskBehavior = true;
                                            settings.Properties.ClientSideEvents.DateChanged = "DateValidateTo";
                                            //settings.Properties.ClientSideEvents.Init = "SetDefaultDate";

                                        }
                                    ).GetHtml()
                                    <span id="MandatoryToDate" style="display: none" class="validclass">
                                        <img id="img_MandatoryToDate" class="dxEditors_edtError_PlasticBlue" src="/DXR.axd?r=1_36-tyKfc" title="Mandatory">
                                    </span>
                                </div>
                            </td>

                            <td style="width:150px;">
                                <label>Head Branch : </label>
                                @Html.DropDownList("HeadBranch", new SelectList(ViewBag.HeadBranch, "BRANCH_ID", "CODE"), new { @id = "HeadBranch", @onchange = "BindBranches()", @class = "whclass selectH" })
                            </td>

                            <td class="w150">
                                <label>Branch </label>
                                <div>
                                    @Html.Action("GetChildBranchList", "MasterPopulate", new { Hoid = @ViewBag.h_id })
                                </div>
                            </td>
                            <td class="w150">
                                <label>Channel </label>
                                <div>
                                    @Html.Action("GetChannelList", "MasterPopulate")
                                </div>
                            </td>

                            <td class="w150">
                                <label> Select WD(s)</label>
                                <div>
                                    @Html.DevExpress().ButtonEdit(
                                settings =>
                                {
                                    settings.Name = "EmployeeWDTxt";

                                    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                    //settings.Text = Model.AssignedTo;
                                    settings.ReadOnly = true;
                                    settings.Properties.Buttons.Add("...");
                                    settings.Properties.ClientSideEvents.ButtonClick = "function(s,e){EmployeeWDButnClick(s,e);}";
                                    settings.Properties.ClientSideEvents.KeyDown = "function(s,e){EmployeeWD_KeyDown(s,e);}";

                                }).GetHtml()

                                </div>
                            </td>
                            <td class="w10 inputSpacer">
                                <input type="checkbox" id="IsEmpWDAll" name="IsEmpWDAll" onchange="CheckEmployeeWDSelection()" value="0"><span class="w140">Select All</span>
                            </td>
                        </tr>
                        <tr>
                            <td style="padding-top: 22px;width:200px;">
                                <label></label>
                                <button type="button" id="btnshow" class="btn btn-success btnwidth" tabindex=4>Show</button>
                                <select name="ddlAppIds" class="btn btn-sm btn-primary" id="ddlAppIds">
                                    <option value="0">Export to</option>
                                    <option value="2">XLSX</option>
                                    <option value="5">CSV</option>
                                </select>

                            </td>
                            <td></td>
                        </tr>
                    </table>
                </div>

                <div class="">
                    <table class="eqpadtbl mt-1 mb-3"></table>
                </div>
            </div>
        </div>
        <input type="hidden" id="hdnuser_id" />
        <input type="hidden" id="hdnUserID" value="@Session["userid"].ToString()" />
        @*<div style="clear: both;"><br /></div>*@

        <div class="options">
            <div class="options-item">
                @Html.DevExpress().Button(settings =>
                {
                    settings.Name = "btShowColumnChooser";
                    settings.Text = "Show Column Chooser";
                    settings.ClientSideEvents.Click = "function (s, e) { onShowChooserClick(s,e); }";
                    // settings.Theme = "MaterialCompactOrange";
                }).GetHtml()
            </div>
        </div>
        <div class="pb-3">
            <div id="refreshgridDSVisitCH">
                @{
                    //Html.RenderAction("GetDSVisitChannelHierarchyList", "DSVisitChannelHierarchy", new { Fromdate = Model.Fromdate, Todate = Model.Todate, BranchId = Model.BranchId, empcode = Model.empcode, channellist=Model.channellist, is_pageload = "0" });
                    Html.RenderAction("GetDSVisitChannelHierarchyList", "DSVisitChannelHierarchy", new { is_pageload = "0" });
                }
                @*change for design*@
            </div>
        </div>
    </div>
</div>

<asp:HiddenField ID="hdnEmployeeAEId" runat="server" />

<div class="modal fade pmsModal w50" id="EmployeeWDModel" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Employee(WD) Search</h4>
            </div>
            <div class="modal-body">
                <input type="text" class="form-control" onkeydown="EmployeeWDkeydown(event)" id="txtEmployeeWDSearch" width="100%" placeholder="Search By Employee Name" />
                <div id="EmployeeWDTable">
                    <table border='1' width="100%">

                        <tr class="HeaderStyle" style="font-size:small">
                            <th>Select</th>
                            <th class="hide">id</th>
                            <th>Employee Name</th>
                            <th>Employee Code</th>
                        </tr>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btnOkformultiselection btn-default btn btn-danger" onclick="DeSelectAll('EmployeeWDSource')">Deselect All</button>
                <button type="button" class="btnOkformultiselection btn-default  btn btn-success" data-dismiss="modal" onclick="OKPopup('EmployeeWDSource')">OK</button>
                @*<button type="button" class="btnOkformultiselection btn-default" data-dismiss="modal">Close</button>*@
            </div>
        </div>
    </div>
</div>
<asp:HiddenField ID="hdnEmployeeWDId" runat="server" />