
@using FSMMaster.Models;
@model FSMMaster.Models.WorkRoasterListModel
@{
    ViewBag.Title = "Working Roaster";
}
<link href="~/assests/css/custom/PMSStyles.css" rel="stylesheet" />
<script src="~/Scripts/SearchPopup.js"></script>
@*<link href="~/assests/css/custom/SearchPopup.css" rel="stylesheet" />*@
<link href="~/assests/css/custom/SearchPopup.css" rel="stylesheet" />
<script src="~/assests/pluggins/choosen/choosen.min.js"></script>
<script src="~/Scripts/SearchMultiPopup.js"></script>


<link rel="stylesheet" href="~/assests/css/jquery.timepicker.min.css">

<script src="~/assests/js/jquery.timepicker.min.js"></script>



<style>
    .pmsModal .modal-header {
        background: #094e8c !important;
        background-image: none !important;
        padding: 11px 20px;
        border: none;
        border-radius: 20px 20px 0 0;
        color: #fff;
    }

    .pmsModal .modal-content {
        border: none;
    }

    .pmsModal .modal-header .modal-title {
        font-size: 14px;
    }

    .pmsModal.w70 .modal-dialog {
        width: 70%;
    }

    #myModal label {
        font-weight: 500;
        margin-top: 5px;
    }

    .red {
        color: red;
    }

    .sample {
        font-size: 12px;
        color: #d48a28;
    }

    .buttonphoto {
        padding: 11px 12px;
        display: inline-block;
        background: #dee3f7;
        margin-top: 11px;
        border-radius: 3px;
        cursor: pointer;
    }

        .buttonphoto:hover {
            background: #415ed2;
            color: #fff;
        }

    .infoQ {
        color: #4b98b8;
        margin-left: 5px;
        cursor: pointer;
    }

    #PanModel {
        z-index: 9999;
    }

    .inputShrink select:not(.btn), .inputShrink .form-control:not(textarea) {
        height: 34px;
        padding: 3px 12px;
    }

    .modalScroll .modal-body {
        max-height: 75vh !important;
        overflow-y: auto;
    }

    .bulAssignTbl > tbody > tr > td {
        padding-right: 15px;
        padding-bottom: 15px;
    }

    .mHead {
        margin: 0;
        padding: 5px 0;
        border-bottom: 1px solid #ddd;
        color: #415ed2;
        margin-bottom: 13px;
    }

    /*Rev 1.0*/

    body, .dxtcLite_PlasticBlue {
        font-family: 'Poppins', sans-serif !important;
    }

    #BranchGridLookup {
        min-height: 34px;
        border-radius: 5px;
    }

    .dxeButtonEditButton_PlasticBlue {
        background: #094e8c !important;
        border-radius: 4px !important;
        padding: 0 4px !important;
    }

    .dxeButtonDisabled_PlasticBlue {
        background: #ababab !important;
    }

    .chosen-container-single .chosen-single div {
        background: #094e8c;
        color: #fff;
        border-radius: 4px;
        height: 30px;
        top: 1px;
        right: 1px;
        /*position:relative;*/
    }

        .chosen-container-single .chosen-single div b {
            display: none;
        }

        .chosen-container-single .chosen-single div::after {
            /*content: '<';*/
            content: url(../../../assests/images/left-arw.png);
            position: absolute;
            top: 2px;
            right: 3px;
            font-size: 13px;
            transform: rotate(269deg);
            font-weight: 500;
        }

    .chosen-container-active.chosen-with-drop .chosen-single div {
        background: #094e8c;
        color: #fff;
    }

        .chosen-container-active.chosen-with-drop .chosen-single div::after {
            transform: rotate(90deg);
            right: 7px;
        }

    .calendar-icon {
        position: absolute;
        bottom: 9px;
        right: 20px;
        z-index: 0;
        cursor: pointer;
    }

    .date-select .form-control {
        position: relative;
        z-index: 1;
        background: transparent;
    }

    #ddlState, #ddlPartyType, #divoutletStatus, #slmonth, #slyear {
        -webkit-appearance: none;
        position: relative;
        z-index: 1;
        background-color: transparent;
    }

    .h-branch-select, .h-branch-select-new {
        position: relative;
    }

        .h-branch-select::after {
            content: '<';
            /*content: url(../../../assests/images/left-arw.png);*/
            position: absolute;
            top: 38px;
            right: 13px;
            font-size: 18px;
            transform: rotate(269deg);
            font-weight: 500;
            background: #094e8c;
            color: #fff;
            height: 18px;
            display: block;
            width: 28px;
            /* padding: 10px 0; */
            border-radius: 4px;
            text-align: center;
            line-height: 19px;
            z-index: 0;
        }

        .h-branch-select-new::after {
            content: '<';
            /*content: url(../../../assests/images/left-arw.png);*/
            position: absolute;
            top: 9px;
            right: 13px;
            font-size: 18px;
            transform: rotate(269deg);
            font-weight: 500;
            background: #094e8c;
            color: #fff;
            height: 18px;
            display: block;
            width: 28px;
            /* padding: 10px 0; */
            border-radius: 4px;
            text-align: center;
            line-height: 19px;
            z-index: 0;
        }

    select:not(.btn):focus {
        border-color: #094e8c;
    }

    select:not(.btn):focus-visible {
        box-shadow: none;
        outline: none;
    }

    .multiselect.dropdown-toggle {
        text-align: left;
    }

    .multiselect.dropdown-toggle, #ddlMonth, #ddlYear {
        -webkit-appearance: none;
        position: relative;
        z-index: 1;
        background-color: transparent;
    }

    select:not(.btn) {
        padding-right: 30px;
        -webkit-appearance: none;
        position: relative;
        z-index: 1;
        background-color: transparent;
    }

    #ddlShowReport:focus-visible {
        box-shadow: none;
        outline: none;
        border: 1px solid #164f93;
    }

    #ddlShowReport:focus {
        border: 1px solid #164f93;
    }

    .whclass.selectH:focus-visible {
        outline: none;
    }

    .whclass.selectH:focus {
        border: 1px solid #164f93;
    }

    .dxeButtonEdit_PlasticBlue {
        border: 1px Solid #ccc;
    }

    .chosen-container-single .chosen-single {
        border: 1px solid #ccc;
        background: #fff;
        box-shadow: none;
    }

    .daterangepicker td.active, .daterangepicker td.active:hover {
        background-color: #175396;
    }

    label {
        font-weight: 500;
    }

    .dxgvHeader_PlasticBlue {
        background: #164f94;
    }

    .dxgvSelectedRow_PlasticBlue td.dxgv {
        color: #fff;
    }

    .dxeCalendarHeader_PlasticBlue {
        background: #185598;
    }

    .dxgvControl_PlasticBlue, .dxgvDisabled_PlasticBlue,
    .dxbButton_PlasticBlue,
    .dxeCalendar_PlasticBlue,
    .dxeEditArea_PlasticBlue,
    .dxgvControl_PlasticBlue, .dxgvDisabled_PlasticBlue {
        font-family: 'Poppins', sans-serif !important;
    }

    .dxgvEditFormDisplayRow_PlasticBlue td.dxgv, .dxgvDataRow_PlasticBlue td.dxgv, .dxgvDataRowAlt_PlasticBlue td.dxgv, .dxgvSelectedRow_PlasticBlue td.dxgv, .dxgvFocusedRow_PlasticBlue td.dxgv {
        font-weight: 500;
    }

    .btnPadding .btn {
        padding: 7px 14px !important;
        border-radius: 4px;
    }

    .btnPadding {
        padding-top: 24px !important;
    }

    .dxeButtonEdit_PlasticBlue {
        border-radius: 5px;
        height: 34px;
    }

    #dtFrom, #dtTo, #FormDate, #toDate, #appcbl_frm_dt {
        position: relative;
        z-index: 1;
        background: transparent;
    }

    #tblshoplist_wrapper .dataTables_scrollHeadInner table tr th {
        background: #165092;
        vertical-align: middle;
        font-weight: 500;
    }

    /*#refreshgrid {
        background: #e5e5e5;
        padding: 0 10px;
        margin-top: 15px;
        border-radius: 8px;
    }*/

    .styled-checkbox {
        position: absolute;
        opacity: 0;
        z-index: 1;
    }

        .styled-checkbox + label {
            position: relative;
            /*cursor: pointer;*/
            padding: 0;
            margin-bottom: 0 !important;
        }

            .styled-checkbox + label:before {
                content: "";
                margin-right: 6px;
                display: inline-block;
                vertical-align: text-top;
                width: 16px;
                height: 16px;
                /*background: #d7d7d7;*/
                margin-top: 2px;
                border-radius: 2px;
                border: 1px solid #c5c5c5;
            }

        .styled-checkbox:hover + label:before {
            background: #094e8c;
        }


        .styled-checkbox:checked + label:before {
            background: #094e8c;
        }

        .styled-checkbox:disabled + label {
            color: #b8b8b8;
            cursor: auto;
        }

            .styled-checkbox:disabled + label:before {
                box-shadow: none;
                background: #ddd;
            }

        .styled-checkbox:checked + label:after {
            content: "";
            position: absolute;
            left: 3px;
            top: 9px;
            background: white;
            width: 2px;
            height: 2px;
            box-shadow: 2px 0 0 white, 4px 0 0 white, 4px -2px 0 white, 4px -4px 0 white, 4px -6px 0 white, 4px -8px 0 white;
            transform: rotate(45deg);
        }

    #dtstate {
        padding-right: 8px;
    }

    .modal-header {
        background: #094e8c !important;
        background-image: none !important;
        padding: 11px 20px;
        border: none;
        border-radius: 5px 5px 0 0;
        color: #fff;
        border-radius: 10px 10px 0 0;
    }

    .modal-content {
        border: none;
        border-radius: 16px;
    }

    .modal-header .modal-title {
        font-size: 14px;
    }

    .close {
        font-weight: 400;
        font-size: 25px;
        color: #fff;
        text-shadow: none;
        opacity: .5;
    }

    #EmployeeTable {
        margin-top: 10px;
    }

        #EmployeeTable table tr th {
            padding: 5px 10px;
        }

    .dynamicPopupTbl {
        font-family: 'Poppins', sans-serif !important;
    }

        .dynamicPopupTbl > tbody > tr > td,
        #EmployeeTable table tr th {
            font-family: 'Poppins', sans-serif !important;
            font-size: 12px;
        }

    .w150 {
        width: 160px;
    }

    .eqpadtbl > tbody > tr > td:not(:last-child) {
        padding-right: 20px;
    }

    #dtFrom_B-1, #dtTo_B-1, #cmbDOJ_B-1, #cmbLeaveEff_B-1, #FormDate_B-1, #toDate_B-1, #appcbl_frm_dt_B-1 {
        background: transparent !important;
        border: none;
        width: 30px;
        padding: 10px !important;
    }

        #dtFrom_B-1 #dtFrom_B-1Img,
        #dtTo_B-1 #dtTo_B-1Img,
        #cmbDOJ_B-1 #cmbDOJ_B-1Img,
        #cmbLeaveEff_B-1 #cmbLeaveEff_B-1Img,
        #FormDate_B-1 #FormDate_B-1Img, #toDate_B-1 #toDate_B-1Img, #appcbl_frm_dt_B-1 #appcbl_frm_dt_B-1Img {
            display: none;
        }

    #FormDate_I, #toDate_I {
        background: transparent;
    }

    .for-cust-icon {
        position: relative;
        /*z-index: 1;*/
    }

    .pad-md-18 {
        padding-top: 10px;
    }

    .open .dropdown-toggle.btn-default {
        background: transparent !important;
    }

    .input-group-btn .multiselect-clear-filter {
        height: 32px;
        border-radius: 0 4px 4px 0;
    }

    .btn .caret {
        display: none;
    }

    .iminentSpan button.multiselect.dropdown-toggle {
        height: 34px;
    }

    .col-lg-2 {
        padding-left: 8px;
        padding-right: 8px;
    }

    .dxeCalendarSelected_PlasticBlue {
        color: White;
        background-color: #185598;
    }

    .dxeTextBox_PlasticBlue {
        height: 34px;
        border-radius: 4px;
    }

    #cmbDOJ_DDD_PW-1 {
        z-index: 9999 !important;
    }

    #cmbDOJ, #cmbLeaveEff {
        position: relative;
        z-index: 1;
        background: transparent;
    }

    .btn-sm, .btn-xs {
        padding: 7px 10px !important;
    }

    #productAttributePopUp_PWH-1 span, #ASPxPopupControl2_PWH-1 span {
        color: #fff !important;
    }

    #marketsGrid_DXPEForm_tcefnew, .dxgvPopupEditForm_PlasticBlue {
        height: 220px !important;
    }

    .btn {
        height: 34px;
    }
    /*Rev end 1.0*/
    /*Rev start 3.0*/
    .mrtop-6 {
        margin-top: 6px;
    }

    #myModalReAssignSalesman .modal-dialog {
        max-width: 32%;
    }

    .btn-default {
        background-color: #dbdbdb;
    }

        .btn-default:hover, .btn-default:focus, .btn-default:active, .btn-default.active, .open .dropdown-toggle.btn-default {
            background-color: #c1c1c1;
        }

    #ddlSalesmanRe, #ddlSalesman1 {
        -webkit-appearance: auto;
    }

    #divDate #appcbl_frm_dt_DDD_PW-1 {
        left: 15px !important;
    }

    #divDate #appcbl_frm_dt_DDD_C_FNP_PW-1 {
        left: 60px !important;
    }
    /*Rev end 3.0*/
    /*Rev 4.0*/
    #myImportEnquiriesModal .modal-body {
        border-radius: 0 0 20px 20px;
    }
    /*End of Rev 4.0*/

    .listStyle > li {
        list-style-type: none;
        padding: 5px;
    }

    .listStyle {
        /*height: 450px;*/
        overflow-y: auto;
    }

        .listStyle > li > input[type="checkbox"] {
            -webkit-transform: translateY(3px);
            -moz-transform: translateY(3px);
            transform: translateY(3px);
        }

    #divModalBody li a:hover:not(.header) {
        background-color: none;
    }

    .modal-backdrop {
        z-index: auto !important;
    }

    .modal .modal-header {
        border-radius: 15px 15px 0 0 !important;
    }

    .working-roaster-table thead {
        border-radius: 10px !important;
        border: none;
        background: #6127ac;
        color: #fff;
        font-weight: 500 !important;
        overflow: hidden;
    }

    .working-roaster-table {
        border-radius: 10px;
        overflow: hidden;
        background: #faf4ff;
        box-shadow: 1px 1px 10px #11111130;
    }

    .table-bordered > thead > tr > th, .table-bordered > tbody > tr > th, .table-bordered > tfoot > tr > th, .table-bordered > thead > tr > td, .table-bordered > tbody > tr > td, .table-bordered > tfoot > tr > td {
        vertical-align: middle;
        border: none;
    }

    .table-bordered tbody tr:nth-child(odd) {
        background: #fff;
    }

    .btn {
        border-radius: 8px;
        height: 38px;
        padding-left: 12px;
        padding-right: 12px;
        color: #fff;
    }

    .add-btn {
        background-color: #238945;
        margin-right: 5px;
        transition: all .4s;
    }

        .add-btn:hover {
            color: #fff;
            background-color: #0e4f23;
            border-color: #0e4f23;
        }

        .add-btn .btn-icon {
            border-radius: 50px;
            width: 21px;
            height: 21px;
            display: inline-block;
            background: #fff;
            line-height: 21px;
            margin-right: 5px;
        }

            .add-btn .btn-icon i {
                color: #238945;
            }

    .show-btn {
        background: #054682;
        transition: all .4s;
        margin-right: 5px;
    }

        .show-btn:hover {
            background: #072743;
        }

        .show-btn .btn-icon {
            border-radius: 50px;
            width: 21px;
            height: 21px;
            display: inline-block;
            background: #fff;
            line-height: 21px;
            margin-right: 5px;
            color: #054682;
        }

    .btn-export {
        background: #e17134;
        color: #fff;
    }

        .btn-export:hover, .btn-export:focus {
            background: #a24716 !important;
            color: #fff;
        }

    .btn:active, .btn:hover, .btn:focus {
        color: #fff !important;
    }

    .dxgvControl_PlasticBlue a img
    {
        width: 30px;
    }

    .dxgvControl_PlasticBlue a
    {
        transition: all .3s ease-in-out;
    }

    .dxgvControl_PlasticBlue a:hover {
        transform: scale(1.1);
    }

    .tooltip-container {
        position: relative;
        display: inline-block;
    }

    .tooltip {
        visibility: hidden;
        /*width: 140px;*/
        background-color: #0d8f24;
        color: #fff;
        text-align: center;
        border-radius: 10px;
        padding: 8px 10px;
        position: absolute;
        z-index: 99;
        bottom: 130%;
        left: 42%;
        transform: translateX(-50%);
        opacity: 0;
        transition: opacity 0.3s;
    }

        .tooltip::after {
            content: '';
            position: absolute;
            top: 100%;
            left: 50%;
            margin-left: -10px;
            border-width: 10px;
            border-style: solid;
            border-color: #0d8f24 transparent transparent transparent;
        }

    .tooltip-container:hover .tooltip {
        visibility: visible;
        opacity: 1;
    }
    .dxgvEditFormDisplayRow_PlasticBlue td.dxgv, .dxgvDataRow_PlasticBlue td.dxgv, .dxgvDataRowAlt_PlasticBlue td.dxgv, .dxgvSelectedRow_PlasticBlue td.dxgv, .dxgvFocusedRow_PlasticBlue td.dxgv {
        overflow: visible;
    }
</style>



<script>
    var Is_PageLoad = "Ispageload";

    $(function () {

        //gridWorkRoaster.Refresh();
        //gridWorkRoaster.Refresh();

         $('#ddlAppIds').on('change', function () {
             if ($("#ddlAppIds option:selected").index() > 0) {
                 var selectedValue = $(this).val();
                 var desg = $("#drpdesignation").val();
                 var usrtype = $("#ddlusertypes").val();
                 $('#ddlAppIds').prop("selectedIndex", 0);
                 var url = '@Url.Action("ExporRegisterList", "WorkRoasterMaster", new { type = "_type_" })'
                 window.location.href = url.replace("_type_", selectedValue);

             }
         });

    });

    $(document).ready(function () {
        $('#myModal').on('shown.bs.modal', function () {
            $('#txt_RosterName').focus();
        });
    });

    function SHOWDATA() {
        Is_PageLoad = "1";
        gridWorkRoaster.Refresh();
        gridWorkRoaster.Refresh();
    }

    function OnStartCallback(s, e) {
        e.customArgs["Is_PageLoad"] = Is_PageLoad;
    }

    function CLEARDATA() {
        $("#txt_RosterName").val("");

        $("#chkMonday").prop("checked", false);
        $("#chktuesday").prop("checked", false);
        $("#chkWednesday").prop("checked", false);
        $("#chkThursday").prop("checked", false);
        $("#chkFriday").prop("checked", false);
        $("#chkSaturday").prop("checked", false);
        $("#chkSunday").prop("checked", false);

        $("#beginMonday").val("");
        $("#Endmonday").val("");
        $("#graceMonday").val("");

        $("#BeginTuesDay").val("");
        $("#endTuesDay").val("");
        $("#graceTuesday").val("");

        $("#beginWednesday").val("");
        $("#endWednesday").val("");
        $("#graceWednesday").val("");

        $("#beginThursday").val("");
        $("#endThursday").val("");
        $("#gracethursday").val("");

        $("#beginFriday").val("");
        $("#endFriday").val("");
        $("#graceFridDay").val("");

        $("#beginSaturday").val("");
        $("#endSaturday").val("");
        $("#graceSaturday").val("");

        $("#beginSunday").val("");
        $("#endSunday").val("");
        $("#graceSunday").val("");
    }

    function ADDWORKROSTER() {
        $("#hdnAction").val("ADDWORKROSTER");
        $("#hdnuniqueid").val(0);

        CLEARDATA();

        $("#myModal").modal('show');
    }

    function save_new() {
        if (validateForm()) {
            save("N");
        }
    }

    function save_exit() {
        if (validateForm()) {
            save("E");
        }
    }

    function parseTime(timeString) {
        // Create a Date object with a fixed date
        var date = new Date("01/01/2000 " + timeString);
        return date;
    }

    function validateForm()
    {

        var x = true;

        if ($("#txt_RosterName").val() == '') {
            jAlert("Please select Roster Name.");
            x = false;
            $("#appcbl_frm_dt").focus();
            return false;
        }


        if ($("#chkMonday").prop("checked")) {
            if ($("#beginMonday").val() == '' || $("#beginMonday").val() == null) {
                jAlert("Please provide Begin time for Monday");
                x = false;
                //$("#beginMonday").focus();
                return false;
            }

            if ($("#Endmonday").val() == '' || $("#Endmonday").val() == null) {
                jAlert("Please provide End time for Monday");
                x = false;
                //$("#Endmonday").focus();
                return false;
            }

            var startDate = parseTime($("#beginMonday").val());
            var endDate = parseTime($("#Endmonday").val());

            if (startDate >= endDate) {
                jAlert("End time cannot be less than or equal to Begin time for Monday");
                x = false;
                //$("#beginMonday").focus();
                return false;
            }

        }

        if ($("#chktuesday").prop("checked")) {
            if ($("#BeginTuesDay").val() == '' || $("#BeginTuesDay").val() == null) {
                jAlert("Please provide Begin time for Tuesday");
                x = false;
                //$("#BeginTuesDay").focus();
                return false;
            }

            if ($("#endTuesDay").val() == '' || $("#endTuesDay").val() == null) {
                jAlert("Please provide End time for Tuesday");
                x = false;
                //$("#endTuesDay").focus();
                return false;
            }

            var startDate = parseTime($("#BeginTuesDay").val());
            var endDate = parseTime($("#endTuesDay").val());

            //if ($("#BeginTuesDay").val() >= $("#endTuesDay").val()) {
            if (startDate >= endDate) {
                jAlert("End time cannot be less than or equal to Begin time for Tuesday");
                x = false;
                //$("#BeginTuesDay").focus();
                return false;
            }

        }
        if ($("#chkWednesday").prop("checked")) {
            if ($("#beginWednesday").val() == '' || $("#beginWednesday").val() == null) {
                jAlert("Please provide Begin time for Wednesday");
                x = false;
                //$("#beginWednesday").focus();
                return false;
            }

            if ($("#endWednesday").val() == '' || $("#endWednesday").val() == null) {
                jAlert("Please provide End time for Wednesday");
                x = false;
                //$("#endWednesday").focus();
                return false;
            }

            var startDate = parseTime($("#beginWednesday").val());
            var endDate = parseTime($("#endWednesday").val());

            if (startDate >= endDate) {
                jAlert("End time cannot be less than or equal to Begin time for Wednesday");
                x = false;
                //$("#beginWednesday").focus();
                return false;
            }
        }
        if ($("#chkThursday").prop("checked")) {
            if ($("#beginThursday").val() == '' || $("#beginThursday").val() == null) {
                jAlert("Please provide Begin time for Thursday");
                x = false;
                //$("#beginThursday").focus();
                return false;
            }

            if ($("#endThursday").val() == '' || $("#endThursday").val() == null) {
                jAlert("Please provide End time for Thursday");
                x = false;
                //$("#endThursday").focus();
                return false;
            }

            var startDate = parseTime($("#beginThursday").val());
            var endDate = parseTime($("#endThursday").val());

            if (startDate >= endDate) {
                jAlert("End time cannot be less than or equal to Begin time for Thursday");
                x = false;
                //$("#beginThursday").focus();
                return false;
            }
        }
        if ($("#chkFriday").prop("checked")) {
            if ($("#beginFriday").val() == '' || $("#beginFriday").val() == null) {
                jAlert("Please provide Begin time for Friday");
                x = false;
                //$("#beginFriday").focus();
                return false;
            }

            if ($("#endFriday").val() == '' || $("#endFriday").val() == null) {
                jAlert("Please provide End time for Friday");
                x = false;
                //$("#endFriday").focus();
                return false;
            }

            var startDate = parseTime($("#beginFriday").val());
            var endDate = parseTime($("#endFriday").val());

            if (startDate >= endDate) {
                jAlert("End time cannot be less than or equal to Begin time for Friday");
                x = false;
                //$("#beginFriday").focus();
                return false;
            }
        }
        if ($("#chkSaturday").prop("checked")) {
            if ($("#beginSaturday").val() == '' || $("#beginSaturday").val() == null) {
                jAlert("Please provide Begin time for Saturday");
                x = false;
                //$("#beginSaturday").focus();
                return false;
            }

            if ($("#endSaturday").val() == '' || $("#endSaturday").val() == null) {
                jAlert("Please provide End time for Saturday");
                x = false;
                //$("#endSaturday").focus();
                return false;
            }

            var startDate = parseTime($("#beginSaturday").val());
            var endDate = parseTime($("#endSaturday").val());

            if (startDate >= endDate) {
                jAlert("End time cannot be less than or equal to Begin time for Saturday");
                x = false;
                //$("#beginSaturday").focus();
                return false;
            }

        }

        if ($("#chkSunday").prop("checked")) {


            if ($("#beginSunday").val() == '' || $("#beginSunday").val() == null) {
                jAlert("Please provide Begin time for Sunday");
                x = false;
                //$("#beginSunday").focus();
                return false;
            }

            if ($("#endSunday").val() == '' || $("#endSunday").val() == null) {
                jAlert("Please provide End time for Sunday");
                x = false;
                //$("#endSunday").focus();
                return false;
            }

            var startDate = parseTime($("#beginSunday").val());
            var endDate = parseTime($("#endSunday").val());

            if (startDate >= endDate) {
                jAlert("End time cannot be less than or equal to Begin time for Sunday");
                x = false;
                //$("#beginSunday").focus();
                return false;
            }
        }

        if (x == true) {
            return true;
        }
        else {
            return false;
        }


    }

    function save(actionType) {

        var action = $("#hdnAction").val();
        var uniqueid = $("#hdnuniqueid").val();


        var WorkingRoasterList = [];
        var i = 0;
        var graceval = "0";


        if ($("#chkSunday").prop("checked") ) {

            //if (beginSunday.DateTime.Year == 100)
            //    beginSunday.DateTime = beginSunday.DateTime.AddMinutes(1);

            //if (endSunday.DateTime.Year == 100)
            //    endSunday.DateTime = endSunday.DateTime.AddMinutes(1);

            i++ ;

            if ($("#graceSunday").val() == '') {
                graceval = '0';
            }
            else {
                graceval =  $("#graceSunday").val();
            }

            WorkingRoasterList[i] = {
                Day: "1",
                BeginTime: $("#beginSunday").val() ,
                EndTime: $("#endSunday").val() ,
                Grace: graceval
            }

        }

        if ($("#chkMonday").prop("checked") )
        {
            //if (beginMonday.DateTime.Year == 100)
            //    beginMonday.DateTime = beginMonday.DateTime.AddMinutes(1);

            //if (Endmonday.DateTime.Year == 100)
            //    Endmonday.DateTime = Endmonday.DateTime.AddMinutes(1);

            if ($("#graceMonday").val() == '') {
                graceval = '0';
            }
            else {
                graceval = $("#graceMonday").val();
            }

            i++;

            WorkingRoasterList[i] = {
                Day: "2",
                BeginTime: $("#beginMonday").val(),
                EndTime: $("#Endmonday").val(),
                Grace: graceval
            }

        }
        if ($("#chktuesday").prop("checked") )
        {
            //if (BeginTuesDay.DateTime.Year == 100)
            //    BeginTuesDay.DateTime = BeginTuesDay.DateTime.AddMinutes(1);

            //if (endTuesDay.DateTime.Year == 100)
            //    endTuesDay.DateTime = endTuesDay.DateTime.AddMinutes(1);

            i++;

            if ($("#graceTuesday").val() == '') {
                graceval = '0';
            }
            else {
                graceval = $("#graceTuesday").val();
            }

            WorkingRoasterList[i] = {
                Day: "3",
                BeginTime: $("#BeginTuesDay").val(),
                EndTime: $("#endTuesDay").val(),
                Grace: graceval
            }

        }
        if ($("#chkWednesday").prop("checked") )
        {
            //if (beginWednesday.DateTime.Year == 100)
            //    beginWednesday.DateTime = beginWednesday.DateTime.AddMinutes(1);

            //if (endWednesday.DateTime.Year == 100)
            //    endWednesday.DateTime = endWednesday.DateTime.AddMinutes(1);

            i++;

            if ($("#graceWednesday").val() == '') {
                graceval = '0';
            }
            else {
                graceval = $("#graceWednesday").val();
            }

            WorkingRoasterList[i] = {
                Day: "4",
                BeginTime: $("#beginWednesday").val(),
                EndTime: $("#endWednesday").val(),
                Grace: graceval
            }


        }
        if ($("#chkThursday").prop("checked") )
        {
            //if (beginThursday.DateTime.Year == 100)
            //    beginThursday.DateTime = beginThursday.DateTime.AddMinutes(1);

            //if (endThursday.DateTime.Year == 100)
            //    endThursday.DateTime = endThursday.DateTime.AddMinutes(1);

            i++;

            if ($("#gracethursday").val() == '') {
                graceval = '0';
            }
            else {
                graceval = $("#gracethursday").val();
            }

            WorkingRoasterList[i] = {
                Day: "5",
                BeginTime: $("#beginThursday").val(),
                EndTime: $("#endThursday").val(),
                Grace: graceval
            }

        }
        if ($("#chkFriday").prop("checked") )
        {
            //if (beginFriday.DateTime.Year == 100)
            //    beginFriday.DateTime = beginFriday.DateTime.AddMinutes(1);

            //if (endFriday.DateTime.Year == 100)
            //    endFriday.DateTime = endFriday.DateTime.AddMinutes(1);

            i++;

            if ($("#graceFridDay").val() == '') {
                graceval = '0';
            }
            else {
                graceval = $("#graceFridDay").val();
            }

            WorkingRoasterList[i] = {
                Day: "6",
                BeginTime: $("#beginFriday").val(),
                EndTime: $("#endFriday").val(),
                Grace: graceval
            }


        }
        if ($("#chkSaturday").prop("checked") )
        {
            //if (beginSaturday.DateTime.Year == 100)
            //    beginSaturday.DateTime = beginSaturday.DateTime.AddMinutes(1);

            //if (endSaturday.DateTime.Year == 100)
            //    endSaturday.DateTime = endSaturday.DateTime.AddMinutes(1);

            i++;

            if ($("#graceSaturday").val() == '') {
                graceval = '0';
            }
            else {
                graceval = $("#graceSaturday").val();
            }

            WorkingRoasterList[i] = {
                Day: "7",
                BeginTime: $("#beginSaturday").val(),
                EndTime: $("#endSaturday").val(),
                Grace: graceval
            }


        }


        $.ajax({
            type: "POST",
            url: "/WorkRoasterMaster/SaveRoaster",
            data: "{RosterID:" + JSON.stringify(uniqueid) +", RoasterName:" + JSON.stringify($("#txt_RosterName").val()) + ",WorkingRoasterList:" + JSON.stringify(WorkingRoasterList) + ", Action:" + JSON.stringify(action) +" }",
            async: false,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                console.log(response);
                if (response.response_msg == "SUCCESS") {

                    jAlert("Saved Successfully", "Alert", function () {
                        if (actionType == "N") {

                            CLEARDATA();

                        }
                        else {
                            //var url = '@Url.Action("Index", "WorkRoasterMaster")'
                            //window.location.href = url;
                            $("#myModal").modal('hide');
                            Is_PageLoad = "1";
                            gridWorkRoaster.Refresh();
                            gridWorkRoaster.Refresh();
                        }
                    });
                }
                else if (response.response_msg == "EXISTS") {
                    jAlert("Roster Name already exists.", "Alert");
                }
                else {
                    jAlert(response.response_msg);
                }
            },
            error: function (response) {
                jAlert("Please try again later");
            }
        });
    }

    function OpenWorkRosterforEdit(rosterid) {
        $("#hdnAction").val('EDITWORKROSTER');
        $("#hdnuniqueid").val(rosterid);
        CLEARDATA();

        $.ajax({
            url: "@Url.Action("ShowWorkRosterDetails", "WorkRoasterMaster")",
            async: false,
            data: { RosterID: rosterid },
            type: 'POST',
            success: function (data) {
                $("#txt_RosterName").val(data[0].RoasterName);

                for (i = 0; i < data.length; i++) {

                    if (data[i].Day == "1") {
                        $("#chkSunday").prop("checked", true);
                        $("#beginSunday").val(data[i].BeginTime);
                        $("#endSunday").val(data[i].EndTime);
                        $("#graceSunday").val(data[i].Grace);
                    }

                    if (data[i].Day == "2") {
                        $("#chkMonday").prop("checked", true);
                        $("#beginMonday").val(data[i].BeginTime);
                        $("#Endmonday").val(data[i].EndTime);
                        $("#graceMonday").val(data[i].Grace);
                    }

                    if (data[i].Day == "3") {
                        $("#chktuesday").prop("checked", true);
                        $("#BeginTuesDay").val(data[i].BeginTime);
                        $("#endTuesDay").val(data[i].EndTime);
                        $("#graceTuesday").val(data[i].Grace);
                    }

                    if (data[i].Day == "4") {
                        $("#chkWednesday").prop("checked", true);
                        $("#beginWednesday").val(data[i].BeginTime);
                        $("#endWednesday").val(data[i].EndTime);
                        $("#graceWednesday").val(data[i].Grace);
                    }

                    if (data[i].Day == "5") {
                        $("#chkThursday").prop("checked", true);
                        $("#beginThursday").val(data[i].BeginTime);
                        $("#endThursday").val(data[i].EndTime);
                        $("#gracethursday").val(data[i].Grace);
                    }

                    if (data[i].Day == "6") {
                        $("#chkFriday").prop("checked", true);
                        $("#beginFriday").val(data[i].BeginTime);
                        $("#endFriday").val(data[i].EndTime);
                        $("#graceFridDay").val(data[i].Grace);
                    }

                    if (data[i].Day == "7") {
                        $("#chkSaturday").prop("checked", true);
                        $("#beginSaturday").val(data[i].BeginTime);
                        $("#endSaturday").val(data[i].EndTime);
                        $("#graceSaturday").val(data[i].Grace);
                    }


                }



                $('#myModal').modal('show');
            },
            error: function () {
            },
        });
    }

    function OnClickDeleteWorkRoster(rosterid) {
        var url = '/WorkRoasterMaster/WorkRosterDelete/';

        Swal.fire({
            title: 'Are you sure you want to delete?',
            text: "This action cannot be undone!",
            /*icon: 'question',*/
            imageUrl: '/assests/images/delete-big.png',
            imageWidth: 40,
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes',
            cancelButtonText: 'No'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    type: "POST",
                    url: url,
                    data: JSON.stringify({ 'RosterID': rosterid }),
                    async: false,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        console.log(response.response_code);
                        if (response.response_code == "-14") {
                            Swal.fire({
                                icon: 'error',
                                title: 'Sorry!',
                                text: 'Error in Delete.'
                            });
                            //GridShow();
                        }
                        else if (response.response_code == "-99") {
                            Swal.fire({
                                icon: 'error',
                                title: 'Sorry!',
                                text: 'Used in other module.can not delete.'
                            });
                            //GridShow();
                       }
                        else if (response.response_code == "1") {
                            Swal.fire({
                                icon: 'success',
                                title: 'Deleted',
                                text: 'Successfully Deleted.'
                            }).then(() => {
                                Is_PageLoad = "1";
                                gridWorkRoaster.Refresh();
                                gridWorkRoaster.Refresh();
                            });
                            //GridShow();
                        }
                        else {
                            Swal.fire({
                                icon: 'info',
                                title: 'Info',
                                text: response
                            });
                        }
                    },
                    error: function (response) {
                        console.log(response.response_code);
                        Swal.fire({
                            icon: 'error',
                            title: 'Sorry!',
                            text: 'An error occurred while deleting the topic.'
                        });
                    }
                });
            }
        });
    }


    function MapModuleForWorkRoster(rosterid) {
        $("#hdnuniqueid").val(rosterid);
        var str
        str = { RosterId: rosterid }
        var html = "";
        // alert();
        $.ajax({
            type: "POST",
            url: "/WorkRoasterMaster/GetModuleList",
            data: JSON.stringify({ 'RosterID': rosterid }),
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            success: function (responseFromServer) {
                for (i = 0; i < responseFromServer.length; i++) {
                    if (responseFromServer[i].IsChecked == true) {
                        html += "<li><input type='checkbox' id=" + responseFromServer[i].ModuleId + "  class='mapmodulecheck' onclick=CheckParticular($(this).is(':checked')) value=" + responseFromServer[i].ModuleId + " checked  /><a href='#'><label id='lblstatename' class='lblstate' for=" + responseFromServer[i].ModuleId + " >" + responseFromServer[i].ModuleName + "</label></a></li>";
                    }
                    else {
                        html += "<li><input type='checkbox' id=" + responseFromServer[i].ModuleId + " class='mapmodulecheck'  onclick=CheckParticular($(this).is(':checked')) value=" + responseFromServer[i].ModuleId + "   /><a href='#'><label id='lblstatename' class='lblstate' for=" + responseFromServer[i].ModuleId + ">" + responseFromServer[i].ModuleName + "</label></a></li>";
                    }
                }
                $("#divModalBody").html(html);
                $("#MapModuleModel").modal('show');
            }
        });
    }

    function myFunction() {
        // Declare variables
        var input, filter, ul, li, a, i, txtValue;
        input = document.getElementById('myInput');
        filter = input.value.toUpperCase();
        ul = document.getElementById("divModalBody");
        li = ul.getElementsByTagName('li');

        // Loop through all list items, and hide those who don't match the search query
        for (i = 0; i < li.length; i++) {
            a = li[i].getElementsByTagName("a")[0];
            txtValue = a.textContent || a.innerText;

            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                li[i].style.display = "";
            } else {
                li[i].style.display = "none";
            }

        }
    }


    var Modulelist = []
    function ModulePushPop() {
        var RosterId = $("#hdnuniqueid").val();
        let a = [];

        $(".mapmodulecheckall:checked").each(function () {
            a.push(this.value);
        });

        $(".mapmodulecheck:checked").each(function () {
            a.push(this.value);
        });
        //var str1
        ////  alert(a);

        //str1 = { RosterID: RosterId, ModuleId: a }
        $.ajax({
            type: "POST",
            url: "/WorkRoasterMaster/MapModuleListSubmit",
            //data: JSON.stringify(str1),
            data: "{RosterID:" + JSON.stringify(RosterId) + ", Modulelist:" + JSON.stringify(a) + " }",
            async: false,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (responseFromServer) {
                if (responseFromServer.response_code == "1") {
                    $("#MapModuleModel").modal('hide');
                    jAlert('Module assigned successfully');
                }
                else {
                    jAlert('Module assigned failed');
                }

                // alert(responseFromServer.d)

            }
        });
    }


</script>

<script>
    $(document).ready(function () {
        $('.timepicker').timepicker({
            timeFormat: 'h:i A', // 12-hour format with AM/PM
            interval: 30, // 30-minute intervals
            minTime: '12:00am',
            maxTime: '11:59pm',
            defaultTime: 'now',
            startTime: '12:00am',
            dynamic: false,
            dropdown: true,
            scrollbar: true
        });
    });
</script>

<div class="breadCumb">
    <span>Working Roaster</span>
</div>


<div class="container ">
    <div class="row">
        <div class="col-md-12">
            <div class="backBox mt-5 px-3 pb-3">
                <div class="row">
                    <div class="col-md-12" style="padding-top: 15px;margin-bottom: 10px;">
                        <!-- Button trigger modal -->
                        @if (ViewBag.CanAdd)
                            {
                        <button type="button" class="btn add-btn" data-toggle="modal" onclick="ADDWORKROSTER()" data-backdrop="static" data-keyboard="false">
                            <span class="btn-icon"><i class="fa fa-plus"></i></span> Add New
                        </button>
                        }

                        @if (ViewBag.CanView)
                            {
                        <button type="button" class="btn show-btn" data-toggle="modal" onclick="SHOWDATA()" data-backdrop="static" data-keyboard="false">
                            <span class="btn-icon"><i class="fa fa-eye" aria-hidden="true"></i></span> Show Data
                        </button>
                        }

                        @if (ViewBag.CanExport)
                            {
                        <select name="ddlAppIds" class="btn btn-sm btn-export" id="ddlAppIds">
                            <option value="0">Export to</option>
                            <option value="2">XLSX</option>
                        </select>
                        }

                        
                    </div>
                    <div class="clear"></div>


                </div>
                <div class="clearfix"></div>

                <div class="scrooler">
                    <div id="refreshgrid">
                        @{
                            Html.RenderAction("PartialWorkRosterGridList", "WorkRoasterMaster", new { Is_PageLoad = "Ispageload" });
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<input type="hidden" id="hdnAction" />
<input type="hidden" id="hdnuniqueid" />

<!-- Modal -->
<!-- Modal -->
<div class="modal fade pmsModal w70 font-pp modalScroll" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="CLEARDATA();"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Add Enquiry</h4>
            </div>
            @*<input type="hidden" id="hdnuniqueid" value="" />*@
            <div class="modal-body inputShrink">
                <div class="mb-4">
                    <label>Roster Name <span class="red">*</span></label>
                    <div>
                        <input type="text" id="txt_RosterName" class="form-control" value="@Model.RoasterName" />
                    </div>

                </div>
                <div class="clear"></div>
                <div class="">

                    <table class="table table-bordered mTop15 working-roaster-table">
                        <thead>
                            <tr>

                                <th>Day</th>
                                <th>Is Working Day?</th>
                                <th style="width: 190px">Day Begin</th>
                                <th style="width: 190px">Day End</th>
                                <th style="width: 190px; display: none">Total Break</th>
                                <th style="width: 190px">Grace Time (Minute)</th>
                            </tr>
                        </thead>

                        <tbody>
                            <tr>

                                <td>Monday:</td>
                                <td>
                                    @*<dxe:ASPxCheckBox ID="chkMonday" ClientInstanceName="cchkMonday" runat="server" ClientSideEvents-CheckedChanged="mondayChkChange"></dxe:ASPxCheckBox>*@
                                    <input type="checkbox" id="chkMonday" name="chkMonday" value="">
                                </td>
                                <td>
                                    <input type="text" id="beginMonday" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="beginMonday"  />*@
                                    @*<dxe:ASPxTimeEdit ID="beginMonday" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cbeginMonday">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>
                                <td class="tdMonday minput">
                                    <input type="text" id="Endmonday" placeholder="HH:MM AM/PM" class="form-control timepicker" />

                                </td>
                                <td class="tdMonday hide minput">
                                    <input type="text" id="brkMonday" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="brkMonday" />*@
                                    @*<dxe:ASPxTimeEdit ID="brkMonday" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cbrkMonday">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>
                                <td class="tdMonday minput">
                                    @*<dxe:ASPxTextBox ID="graceMonday" runat="server" Width="170px">
                                            <MaskSettings Mask="&lt;0..999&gt;" AllowMouseWheel="false" />
                                        </dxe:ASPxTextBox>*@
                                    <input type="number" id="graceMonday" name="graceMonday" min="0" max="999" class="form-control" />
                                </td>

                            </tr>

                            <tr>

                                <td>Tuesday:</td>
                                <td>
                                    @*<dxe:ASPxCheckBox ID="chktuesday" ClientInstanceName="cchktuesday" runat="server"
                                        ClientSideEvents-CheckedChanged="tuesdayCheckChange"></dxe:ASPxCheckBox>*@
                                    <input type="checkbox" id="chktuesday" name="chktuesday" value="">

                                </td>
                                <td class="tdTuesday minput">
                                    <input type="text" id="BeginTuesDay" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="BeginTuesDay" />*@
                                    @*<dxe:ASPxTimeEdit ID="BeginTuesDay" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cBeginTuesDay">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>
                                <td class="tdTuesday minput">
                                    <input type="text" id="endTuesDay" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="endTuesDay" />*@
                                    @*<dxe:ASPxTimeEdit ID="endTuesDay" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cendTuesDay">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>
                                <td class="tdTuesday hide minput">
                                    <input type="text" id="brkTuesDay" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="brkTuesDay" />*@
                                    @*<dxe:ASPxTimeEdit ID="brkTuesDay" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cbrkTuesDay">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>

                                <td class="tdTuesday minput">
                                    <input type="number" id="graceTuesday" name="graceTuesday" min="0" max="999" class="form-control" />
                                    @*<dxe:ASPxTextBox ID="graceTuesday" runat="server" Width="170px">
                                            <MaskSettings Mask="&lt;0..999&gt;" AllowMouseWheel="false" />
                                        </dxe:ASPxTextBox>*@
                                </td>

                            </tr>

                            <tr>

                                <td>Wednesday:</td>
                                <td>
                                    @*<dxe:ASPxCheckBox ID="chkWednesday" ClientInstanceName="cchkWednesday" runat="server" ClientSideEvents-CheckedChanged="WednesdayCheckChange"></dxe:ASPxCheckBox>*@
                                    <input type="checkbox" id="chkWednesday" name="chkWednesday" value="">
                                </td>
                                <td class="tdWednesday minput">
                                    <input type="text" id="beginWednesday" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="beginWednesday" />*@
                                    @*<dxe:ASPxTimeEdit ID="beginWednesday" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cbeginWednesday">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>
                                <td class="tdWednesday minput">
                                    <input type="text" id="endWednesday" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="endWednesday" />*@
                                    @*<dxe:ASPxTimeEdit ID="endWednesday" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cendWednesday">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>
                                <td class="tdWednesday hide minput">
                                    <input type="text" id="brkWednesday" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="brkWednesday" />*@
                                    @*<dxe:ASPxTimeEdit ID="brkWednesday" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cbrkWednesday">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>
                                <td class="tdWednesday minput">
                                    <input type="number" id="graceWednesday" name="graceWednesday" min="0" max="999" class="form-control" />
                                    @*<dxe:ASPxTextBox ID="graceWednesday" runat="server" Width="170px">
                                            <MaskSettings Mask="&lt;0..999&gt;" AllowMouseWheel="false" />
                                        </dxe:ASPxTextBox>*@
                                </td>



                            </tr>


                            <tr>

                                <td>Thursday:</td>
                                <td>
                                    @*<dxe:ASPxCheckBox ID="chkThursday" ClientInstanceName="cchkThursday" runat="server" ClientSideEvents-CheckedChanged="thursdayCheckChange"></dxe:ASPxCheckBox>*@
                                    <input type="checkbox" id="chkThursday" name="chkThursday" value="">
                                </td>
                                <td class="tdthursday minput">
                                    <input type="text" id="beginThursday" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="beginThursday" />*@
                                    @*<dxe:ASPxTimeEdit ID="beginThursday" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cbeginThursday">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>
                                <td class="tdthursday minput">
                                    <input type="text" id="endThursday" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="endThursday" />*@
                                    @*<dxe:ASPxTimeEdit ID="endThursday" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cendThursday">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>
                                <td class="tdthursday hide minput">
                                    <input type="text" id="brkThursday" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="brkThursday" />*@
                                    @*<dxe:ASPxTimeEdit ID="brkThursday" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cbrkThursday">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>
                                <td class="tdthursday minput">
                                    <input type="number" id="gracethursday" name="gracethursday" min="0" max="999" class="form-control" />
                                    @*<dxe:ASPxTextBox ID="gracethursday" runat="server" Width="170px">
                                            <MaskSettings Mask="&lt;0..999&gt;" AllowMouseWheel="false" />
                                        </dxe:ASPxTextBox>*@
                                </td>

                            </tr>


                            <tr>

                                <td>Friday:</td>
                                <td>
                                    <input type="checkbox" id="chkFriday" name="chkFriday" value="">
                                    @*<dxe:ASPxCheckBox ID="chkFriday" ClientInstanceName="cchkFriday" runat="server"
                                                          ClientSideEvents-CheckedChanged="friDayCheckChange">
                                        </dxe:ASPxCheckBox>*@
                                </td>
                                <td class="tdFriday minput">
                                    <input type="text" id="beginFriday" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="beginFriday"  />*@
                                    @*<dxe:ASPxTimeEdit ID="beginFriday" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cbeginFriday">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>
                                <td class="tdFriday minput">
                                    <input type="text" id="endFriday" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="endFriday" />*@
                                    @*<dxe:ASPxTimeEdit ID="endFriday" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cendFriday">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>
                                <td class="tdFriday hide minput">
                                    <input type="text" id="brkFriday" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="brkFriday" />*@
                                    @*<dxe:ASPxTimeEdit ID="brkFriday" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cbrkFriday">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>
                                <td class="tdFriday minput">
                                    <input type="number" id="graceFridDay" name="graceFridDay" min="0" max="999" class="form-control" />
                                    @*<dxe:ASPxTextBox ID="graceFridDay" runat="server" Width="170px">
                                            <MaskSettings Mask="&lt;0..999&gt;" AllowMouseWheel="false" />
                                        </dxe:ASPxTextBox>*@
                                </td>


                            </tr>

                            <tr>

                                <td>Saturday:</td>
                                <td>
                                    <input type="checkbox" id="chkSaturday" name="chkSaturday" value="">
                                    @*<dxe:ASPxCheckBox ID="chkSaturday" ClientInstanceName="cchkSaturday" runat="server"
                                                          ClientSideEvents-CheckedChanged="SaturdayCheckChange">
                                        </dxe:ASPxCheckBox>*@
                                </td>
                                <td class="tdSaturday minput">
                                    <input type="text" id="beginSaturday" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="beginSaturday" />*@
                                    @*<dxe:ASPxTimeEdit ID="beginSaturday" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cbeginSaturday">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>
                                <td class="tdSaturday minput">
                                    <input type="text" id="endSaturday" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="endSaturday" />*@
                                    @*<dxe:ASPxTimeEdit ID="endSaturday" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cendSaturday" Height="22">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>
                                <td class="tdSaturday hide minput">
                                    <input type="text" id="brkSaturday" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="brkSaturday" />*@
                                    @*<dxe:ASPxTimeEdit ID="brkSaturday" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cbrkSaturday">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>
                                <td class="tdSaturday minput">
                                    <input type="number" id="graceSaturday" name="graceMonday" min="0" max="999" class="form-control" />
                                    @*<dxe:ASPxTextBox ID="graceSaturday" runat="server" Width="170px">
                                            <MaskSettings Mask="&lt;0..999&gt;" AllowMouseWheel="false" />
                                        </dxe:ASPxTextBox>*@
                                </td>
                            </tr>


                            <tr>

                                <td>Sunday:</td>
                                <td>
                                    <input type="checkbox" id="chkSunday" name="chkMonday" value="">
                                    @*<dxe:ASPxCheckBox ID="chkSunday" ClientInstanceName="cchkSunday" runat="server"
                                                          ClientSideEvents-CheckedChanged="sundayCheckChange">
                                        </dxe:ASPxCheckBox>*@
                                </td>
                                <td class="tdSunday minput">
                                    <input type="text" id="beginSunday" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="beginSunday" />*@
                                    @*<dxe:ASPxTimeEdit ID="beginSunday" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cbeginSunday">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>
                                <td class="tdSunday minput">
                                    <input type="text" id="endSunday" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="endSunday" />*@
                                    @*<dxe:ASPxTimeEdit ID="endSunday" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cendSunday">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>
                                <td class="tdSunday hide minput">
                                    <input type="text" id="brkSunday" placeholder="HH:MM AM/PM" class="form-control timepicker" />
                                    @*<input type="time" id="brkSunday" />*@
                                    @*<dxe:ASPxTimeEdit ID="brkSunday" runat="server" Width="190" EditFormat="Custom"
                                                          EditFormatString="h:mm tt" DisplayFormatString="h:mm tt" ClientInstanceName="cbrkSunday">
                                            <ClearButton DisplayMode="OnHover"></ClearButton>
                                            <ValidationSettings ErrorDisplayMode="None" />
                                        </dxe:ASPxTimeEdit>*@
                                </td>
                                <td class="tdSunday minput">
                                    <input type="number" id="graceSunday" name="graceSunday" min="0" max="999" class="form-control" />
                                    @*<dxe:ASPxTextBox ID="graceSunday" runat="server" Width="170px">
                                            <MaskSettings Mask="&lt;0..999&gt;" AllowMouseWheel="false" />
                                        </dxe:ASPxTextBox>*@
                                </td>
                            </tr>
                        </tbody>





                    </table>


                    <div class="clear"></div>

                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="save_exit();">Save & Exit</button>
                <button type="button" class="btn btn-success" onclick="save_new();">Save & New</button>
                <button type="button" class="btn btn-danger" data-dismiss="modal" onclick="CLEARDATA();">Close</button>
            </div>
        </div>
    </div>
</div>

<div id="MapModuleModel" class="modal fade" data-backdrop="static" role="dialog">
    <div class="modal-dialog" style="width: 450px;">

        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Module List</h4>
            </div>
            <div class="modal-body">
                <div>

                    <input type="text" id="myInput" onkeyup="myFunction()" placeholder="Search for Module">
                    <ul id="divModalBody" class="listStyle"> </ul>
                </div>
                <input type="button" id="btnsatesubmit" title="SUBMIT" value="SUBMIT" class="btn btn-primary" onclick="ModulePushPop()" />

            </div>
        </div>

    </div>
</div>

<input type="hidden" id="hdnAction" />
<input type="hidden" id="hdnuniqueid" />

<style>
    #myInput {
        /*background-image: url('../../../../assests/images/search.svg'); 
    background-position: 10px 12px; 
    background-repeat: no-repeat; */
        width: 100%; /* Full-width */
        font-size: 16px; /* Increase font-size */
        padding: 8px 12px 8px 12px; /* Add some padding */
        border: 1px solid #ddd; /* Add a grey border */
        margin-bottom: 12px; /* Add some space below the input */
        border-radius: 10px;
    }

        #myInput:focus-visible {
            border-color: #002d96;
            box-shadow: none;
            outline: none;
        }

    #divModalBody {
        /* Remove default list styling */
        list-style-type: none;
        padding: 0;
        margin: 0;
        margin-bottom: 8px;
    }

        #divModalBody li {
            padding: 5px 10px;
        }

            #divModalBody li a {
                margin-top: -1px; /* Prevent double borders */
                padding: 0 12px; /* Add some padding */
                text-decoration: none; /* Remove default text underline */
                font-size: 14px; /* Increase the font-size */
                color: black; /* Add a black text color */
                display: inline-block; /* Make it into a block element to fill the whole list */
                cursor: pointer;
            }

    .tblView > tbody > tr > td {
        padding-right: 5px;
        padding-bottom: 10px
    }

        .tblView > tbody > tr > td > label {
            display: block
        }
</style>

<script>
    function isValidTimePart(value, max) {
        const num = parseInt(value, 10);
        return !isNaN(num) && num >= 0 && num <= max;
    }

    function validateAndFormatTime(value) {
        value = value.replace(/[^0-9]/g, ''); // Remove non-numeric characters

        if (value.length >= 2) {
            let hours = value.slice(0, 2);
            if (!isValidTimePart(hours, 23)) return '00' + value.slice(3, 5) + ':' + value.slice(6, 8); // Invalid hours
            value = hours + ':' + value.slice(2);
        }

        if (value.length >= 5) {
            let minutes = value.slice(3, 5);
            if (!isValidTimePart(minutes, 59)) return value.slice(0, 2) + ':00:' + value.slice(6, 8); // Invalid minutes
            value = value.slice(0, 5) + ':' + value.slice(5);
        }

        if (value.length >= 8) {
            let seconds = value.slice(6, 8);
            if (!isValidTimePart(seconds, 59)) return value.slice(0, 2) + ':' + value.slice(3, 5) + ':00'; // Invalid seconds
            value = value.slice(0, 8);
        }

        return value;
    }

    document.getElementById('beginMonday').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('beginMonday').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });



    document.getElementById('Endmonday').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('Endmonday').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });

    document.getElementById('brkMonday').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('brkMonday').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });

    document.getElementById('BeginTuesDay').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('BeginTuesDay').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });

    document.getElementById('endTuesDay').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('endTuesDay').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });

    document.getElementById('brkTuesDay').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('brkTuesDay').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });

    document.getElementById('beginWednesday').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('beginWednesday').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });

    document.getElementById('endWednesday').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('endWednesday').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });

    document.getElementById('brkWednesday').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('brkWednesday').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });





    document.getElementById('beginThursday').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('beginThursday').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });

    document.getElementById('endThursday').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('endThursday').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });

    document.getElementById('brkThursday').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('brkThursday').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });

    document.getElementById('beginFriday').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('beginFriday').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });

    document.getElementById('endFriday').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('endFriday').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });

    document.getElementById('brkFriday').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('brkFriday').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });

    document.getElementById('beginSaturday').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('beginSaturday').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });

    document.getElementById('endSaturday').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('endSaturday').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });

    document.getElementById('brkSaturday').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('brkSaturday').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });

    document.getElementById('beginSunday').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('beginSunday').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });

    document.getElementById('endSunday').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('endSunday').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });

    document.getElementById('brkSunday').addEventListener('input', function (e) {
        e.target.value = validateAndFormatTime(e.target.value);
    });

    document.getElementById('brkSunday').addEventListener('blur', function (e) {
        if (e.target.value.length !== 8) {
            e.target.value = ''; // Clear the input if the format is incomplete
        }
    });



</script>