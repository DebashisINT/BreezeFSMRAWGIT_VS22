
@using System.Web.UI.WebControls
@using DevExpress.Web.Mvc
@using DevExpress.Web
@model LMS.Models.LMSQuestionsModel
@{

    ViewBag.Title = "Question Add";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .crossBtn {
        border: 1px solid #ccc;
        border-radius: 50%;
        color: #a5a5a5;
        font-size: 20px !important;
        height: 35px;
        line-height: 33px !important;
        position: absolute;
        right: 5px;
        text-align: center;
        top: 5px;
        width: 35px;
    }

    .modal-header {
        padding: 8px;
        background: #094e8c;
        border-radius: 8px 8px 0 0;
    }

    button.close {
        color: #fff;
        font-weight: 300;
        opacity: .5;
    }

    .close:hover, .close:focus {
        color: #fff;
        opacity: 1;
    }

    .modal-content {
        border-radius: 10px;
    }

    .modal-footer {
        padding: 10px 20px 10px;
    }

    .dxgvLoadingPanel_PlasticBlue {
        left: 42% !important;
    }
    /*Rev 2.0*/
    #gridUserList {
        width: 100% !important;
        max-width: 100% !important;
    }
    /*Rev end 2.0*/

    /*Rev 3.0*/

    #BranchGridLookup {
        min-height: 34px;
        border-radius: 5px;
    }

    .dxeButtonEditButton_PlasticBlue {
        background: #094e8c !important;
        border-radius: 4px !important;
        padding: 0 4px !important;
    }

    .chosen-container-single .chosen-single div {
        background: #094e8c;
        color: #fff;
        border-radius: 4px;
        height: 30px;
        top: 1px;
        right: 1px;
        /*position:relative;*/
    }

        .chosen-container-single .chosen-single div b {
            display: none;
        }

        .chosen-container-single .chosen-single div::after {
            content: '<';
            position: absolute;
            top: 2px;
            right: 3px;
            font-size: 18px;
            transform: rotate(269deg);
            font-weight: 500;
        }

    .chosen-container-active.chosen-with-drop .chosen-single div {
        background: #094e8c;
        color: #fff;
    }

        .chosen-container-active.chosen-with-drop .chosen-single div::after {
            transform: rotate(90deg);
            right: 5px;
        }

    .calendar-icon {
        position: absolute;
        bottom: 8px;
        right: 14px;
        z-index: 0;
        cursor: pointer;
    }

    .date-select .form-control {
        position: relative;
        z-index: 1;
        background: transparent;
    }

    #ddlState, #ddlPartyType, #divoutletStatus, #slmonth, #slyear {
        -webkit-appearance: none;
        position: relative;
        z-index: 1;
        background-color: transparent;
    }

    .h-branch-select {
        position: relative;
    }

        .h-branch-select::after {
            content: '<';
            position: absolute;
            top: 8px;
            right: -2px;
            font-size: 18px;
            transform: rotate(269deg);
            font-weight: 500;
            background: #094e8c;
            color: #fff;
            height: 18px;
            display: block;
            width: 28px;
            /* padding: 10px 0; */
            border-radius: 4px;
            text-align: center;
            line-height: 19px;
            z-index: 0;
        }

    .multiselect.dropdown-toggle {
        text-align: left;
    }

    .multiselect.dropdown-toggle, #ddlMonth, #ddlYear {
        -webkit-appearance: none;
        position: relative;
        z-index: 1;
        background-color: transparent;
    }

    .whclass.selectH {
        padding-right: 30px;
    }

    #ddlShowReport:focus-visible {
        box-shadow: none;
        outline: none;
        border: 1px solid #164f93;
    }

    #ddlShowReport:focus {
        border: 1px solid #164f93;
    }

    .whclass.selectH:focus-visible {
        outline: none;
    }

    .whclass.selectH:focus {
        border: 1px solid #164f93;
    }

    .dxeButtonEdit_PlasticBlue {
        border: 1px Solid #ccc;
    }

    .chosen-container-single .chosen-single {
        border: 1px solid #ccc;
        background: #fff;
        box-shadow: none;
    }
    
    #TopicGridLookup_I {
        font-weight: 700 !important;
    }
    .daterangepicker td.active, .daterangepicker td.active:hover {
        background-color: #175396;
    }

    label {
        font-weight: 500;
    }

    .dxgvHeader_PlasticBlue {
        background: #164f94;
    }

    .dxgvSelectedRow_PlasticBlue td.dxgv {
        color: #fff;
    }

    .dxeCalendarHeader_PlasticBlue {
        background: #185598;
    }

    .dxgvControl_PlasticBlue, .dxgvDisabled_PlasticBlue,
    .dxbButton_PlasticBlue,
    .dxeCalendar_PlasticBlue,
    .dxeEditArea_PlasticBlue {
        font-family: 'Poppins', sans-serif !important;
    }

    .dxgvEditFormDisplayRow_PlasticBlue td.dxgv, .dxgvDataRow_PlasticBlue td.dxgv, .dxgvDataRowAlt_PlasticBlue td.dxgv, .dxgvSelectedRow_PlasticBlue td.dxgv, .dxgvFocusedRow_PlasticBlue td.dxgv {
        font-weight: 500;
    }

    .btnPadding .btn {
        padding: 7px 14px !important;
        border-radius: 4px;
    }

    .btnPadding {
        padding-top: 24px !important;
    }

    .dxeButtonEdit_PlasticBlue {
        border-radius: 5px;
        height: 34px;
    }

    #dtFrom, #dtTo {
        position: relative;
        z-index: 1;
        background: transparent;
    }

    #tblshoplist_wrapper .dataTables_scrollHeadInner table tr th {
        background: #165092;
        vertical-align: middle;
        font-weight: 500;
    }

    /*#refreshgrid {
        background: #e5e5e5;
        padding: 0 10px;
        margin-top: 15px;
        border-radius: 8px;
    }*/

    .styled-checkbox {
        position: absolute;
        opacity: 0;
        z-index: 1;
    }

        .styled-checkbox + label {
            position: relative;
            /*cursor: pointer;*/
            padding: 0;
            margin-bottom: 0 !important;
        }

            .styled-checkbox + label:before {
                content: "";
                margin-right: 6px;
                display: inline-block;
                vertical-align: text-top;
                width: 16px;
                height: 16px;
                /*background: #d7d7d7;*/
                margin-top: 2px;
                border-radius: 2px;
                border: 1px solid #c5c5c5;
            }

        .styled-checkbox:hover + label:before {
            background: #094e8c;
        }


        .styled-checkbox:checked + label:before {
            background: #094e8c;
        }

        .styled-checkbox:disabled + label {
            color: #b8b8b8;
            cursor: auto;
        }

            .styled-checkbox:disabled + label:before {
                box-shadow: none;
                background: #ddd;
            }

        .styled-checkbox:checked + label:after {
            content: "";
            position: absolute;
            left: 3px;
            top: 9px;
            background: white;
            width: 2px;
            height: 2px;
            box-shadow: 2px 0 0 white, 4px 0 0 white, 4px -2px 0 white, 4px -4px 0 white, 4px -6px 0 white, 4px -8px 0 white;
            transform: rotate(45deg);
        }

    #dtstate {
        padding-right: 8px;
    }

    .pmsModal .modal-header {
        /*background: #094e8c !important;
background-image: none !important;*/
        padding: 11px 20px;
        border: none;
        border-radius: 15px 15px 0 0 !important;
        /*color: #fff;*/
        /*background: linear-gradient(to right, #1f5fbf, #11998e) !important;*/
    }

    .pmsModal .modal-content {
        border: none;
        background: linear-gradient(1deg, #cff3ff, #ffffff);
    }

    /*.pmsModal .modal-header .modal-title {
    font-size: 14px;
}*/

    .pmsModal .modal-header .modal-title {
        font-size: 16px !important;
        color: #111;
        font-size: 24px;
    }

    .pmsModal .modal-header {
        background: transparent !important;
        margin-bottom: 10px;
        border-bottom: 1px solid #d5d5d5;
    }

    .close {
        font-size: 34px;
        opacity: .8;
    }

    button.close {
        color: #111 !important;
        font-weight: 400 !important;
        opacity: .8 !important;
        font-size: 32px !important;
    }

    .pmsModal .close {
        font-weight: 400;
        font-size: 25px;
        color: #fff;
        text-shadow: none;
        opacity: .5;
    }

    #EmployeeTable {
        margin-top: 10px;
    }

        #EmployeeTable table tr th {
            padding: 5px 10px;
        }

    .dynamicPopupTbl {
        font-family: 'Poppins', sans-serif !important;
    }

        .dynamicPopupTbl > tbody > tr > td,
        #EmployeeTable table tr th {
            font-family: 'Poppins', sans-serif !important;
            font-size: 12px;
        }

    .w150 {
        width: 160px;
    }

    .eqpadtbl > tbody > tr > td:not(:last-child) {
        padding-right: 20px;
    }

    #dtFrom_B-1, #dtTo_B-1 {
        background: transparent !important;
        border: none;
        width: 30px;
        padding: 10px !important;
    }

        #dtFrom_B-1 #dtFrom_B-1Img,
        #dtTo_B-1 #dtTo_B-1Img {
            display: none;
        }

    #dtFrom_I, #dtTo_I {
        background: transparent;
    }

    .for-cust-icon {
        position: relative;
        z-index: 1;
    }

    .pad-md-18 {
        padding-top: 24px;
    }

    .open .dropdown-toggle.btn-default {
        background: transparent !important;
    }

    .input-group-btn .multiselect-clear-filter {
        height: 32px;
        border-radius: 0 4px 4px 0;
    }

    .btn .caret {
        display: none;
    }

    .iminentSpan button.multiselect.dropdown-toggle {
        height: 34px;
    }

    .col-lg-2 {
        padding-left: 8px;
        padding-right: 8px;
    }

    select:not(.btn) {
        -webkit-appearance: none;
        position: relative;
        z-index: 1;
        background-color: transparent;
    }

    .dxgvControl_PlasticBlue a {
        margin: 0 3px;
    }

    .dxeButtonDisabled_PlasticBlue {
        background: #ababab !important;
    }

    .red {
        color: red;
    }

    .linerHd {
        background: #4e8fcf !important;
    }

    /*Rev end 3.0*/
    /*Rev 4.0*/
    #popup_message {
        padding-left: 0 !important;
        text-align: center !important;
    }

    #popup_panel {
        margin: 14px 0 5px;
    }

    #popup_ok, #popup_cancel {
        border-radius: 4px !important;
    }
    /*Rev end 4.0*/
    /*Rev 5.0*/
    #gridUserList_DXPagerTop_PSP, #gridUserList_DXPagerBottom_PSP {
        right: 36px !important;
        left: auto !important;
    }
    /*Rev end 5.0*/


    .add-btn .btn-icon {
        border-radius: 50px;
        width: 21px;
        height: 21px;
        display: inline-block;
        background: #fff;
        line-height: 21px;
        margin-right: 5px;
    }

    .add-btn {
        transition: all .4s;
    }

        .add-btn:hover {
            color: #fff;
            background-color: #0e4f23;
            border-color: #0e4f23;
        }

        .add-btn .btn-icon i {
            color: #238945;
        }

    .add-btn {
        background-color: #238945;
        margin-right: 5px;
    }

    .btn {
        border-radius: 8px;
        height: 38px;
        padding-left: 12px;
        padding-right: 12px;
        color: #fff;
    }

        .btn:active, .btn:hover, .btn:focus {
            color: #fff !important;
        }

    .buttons-alignment {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .show-btn .btn-icon {
        border-radius: 50px;
        width: 21px;
        height: 21px;
        display: inline-block;
        background: #fff;
        line-height: 21px;
        margin-right: 5px;
        color: #054682;
    }

    .show-btn {
        background: #054682;
        transition: all .4s;
    }

        .show-btn:hover {
            background: #072743;
        }

    .btn-cancel {
        background-color: #DC0505;
        color: #fff;
    }

    .btn-export {
        background: #e17134;
        color: #fff;
    }

        .btn-export:hover {
            background: #a24716 !important;
            color: #fff;
        }

    .swal2-confirm.swal2-styled {
        border-radius: 12px !important;
    }

    .swal2-styled {
        border-radius: 12px !important;
        padding: 8px 20px !important;
        color: #fff !important;
        font-size: 14px !important;
    }

    .swal2-html-container {
        margin-top: 5px !important;
    }

    .delete-col {
        width: 4%;
        padding: 10px 10px;
    }

    .option-col {
        width: 76%;
        padding: 10px 10px;
    }

    .number-col {
        width: 10%;
        padding: 10px 10px;
    }

    .correct-col {
        width: 10%;
        padding: 10px 10px;
    }

    .ans-option {
        display: flex;
        align-items: center;
    }

    .save-exit-btn {
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .save-exit-btn button {
            margin: 0 10px 15px;
        }

    .backBox {
        padding: 15px !important;
    }

    .option-part {
        background: #ffffffb8;
        padding: 10px;
        border-radius: 10px;
        border: 1px solid #ccc;
    }

    .backBox {
        background: linear-gradient(1deg, #cff3ff, #ffffff);
    }

    .form-control:focus {
        box-shadow: none;
    }

    .delete-col a img {
        width: 25px;
        transition: all .3s ease-in-out;
    }

    .delete-col a:hover img {
        transform: scale(1.2);
    }

    /*.correct-col div {
        border: 1px solid #ccc;
        padding: 6px 5px;
        border-radius: 4px;
        height: 34px;
    }*/

    .tooltip-container {
        position: relative;
        display: inline-block;
    }

    .tooltip {
        visibility: hidden;
        /*width: 140px;*/
        background-color: #0d8f24;
        color: #fff;
        text-align: center;
        border-radius: 10px;
        padding: 8px 10px;
        position: absolute;
        z-index: 99;
        bottom: 130%;
        left: 50%;
        transform: translateX(-50%);
        opacity: 0;
        transition: opacity 0.3s;
    }

        .tooltip::after {
            content: '';
            position: absolute;
            top: 100%;
            left: 50%;
            margin-left: -10px;
            border-width: 10px;
            border-style: solid;
            border-color: #0d8f24 transparent transparent transparent;
        }

    .tooltip-container:hover .tooltip {
        visibility: visible;
        opacity: 1;
    }

    .btn-warning {
        background: #e08d19;
    }

    .crossBtnN {
        color: #fff;
        cursor: pointer;
    }

    #TopicGridLookup_DDD_gv, #CategoryGridLookup_DDD_gv {
        width: 100% !important;
    }

    #TopicGridLookup_DDD_PW-1, #CategoryGridLookup_DDD_PW-1 {
        width: 95% !important;
    }

    #btnSave .btn-icon, .cancel-catg .btn-icon {
        border-radius: 50px;
        width: 21px;
        height: 21px;
        display: inline-block;
        background: #fff;
        line-height: 20px;
        margin-right: 5px;
    }

        #btnSave .btn-icon img {
            color: #238945;
            width: 14px;
        }

    #btnSave.btn-warning .btn-icon img {
        color: #e08d19;
        width: 14px;
    }

        .cancel-catg .btn-icon img {
            color: #DC0505;
            width: 16px;
        }
</style>

<script>
      var TOPICID = [];
  var TOPIC_ID = "";

  var Category = [];
  var Category_ID = "";

    function validateInput(event) {
        var input = event.target;
        if (input.value.length >= 5 && (event.keyCode >= 48 && event.keyCode <= 57)) {
            event.preventDefault();
        }
    }

    function setup() {
        var inputField1 = document.getElementById("txtPoint1");
        inputField1.addEventListener("keydown", validateInput);

        var inputField2 = document.getElementById("txtPoint2");
        inputField2.addEventListener("keydown", validateInput);

        var inputField3 = document.getElementById("txtPoint3");
        inputField3.addEventListener("keydown", validateInput);


        var inputField4 = document.getElementById("txtPoint4");
        inputField4.addEventListener("keydown", validateInput);
    }

    window.onload = setup;

    // Rev Sanchita
    var QuestionID = 0;
    var urlKeys = getUrlVars();
    // End of Rev Sanchita

    $(document).ready(function () {

         $('#txtPoint4').on('input', function() {
        this.value = this.value.replace(/[^0-9]/g, '');
        if (this.value.length > 2) {
            this.value = this.value.slice(0, 2); // Limit to 2 digits
        }
        });

        $('#txtPoint3').on('input', function() {
        this.value = this.value.replace(/[^0-9]/g, '');
        if (this.value.length > 2) {
        this.value = this.value.slice(0, 2); // Limit to 2 digits
        }
        });

        $('#txtPoint2').on('input', function() {
        this.value = this.value.replace(/[^0-9]/g, '');
        if (this.value.length > 2) {
        this.value = this.value.slice(0, 2); // Limit to 2 digits
        }
        });

        $('#txtPoint1').on('input', function() {
        this.value = this.value.replace(/[^0-9]/g, '');
        if (this.value.length > 2) {
        this.value = this.value.slice(0, 2); // Limit to 2 digits
        }
        });



        // Rev Sanchita
        if (urlKeys.key == 'AddOnFly' || urlKeys.key == 'AddOnFlySave') {
            TOPIC_ID = urlKeys.TOPICID;
           // document.getElementById('TopicGridLookup_I').className = 'bold';
            TopicGridLookup.SetEnabled(false);
        }


        //var actionUrlHtml = "";

        //var ApprovalCross = $('#ApprovalCross');
        //ApprovalCross.empty();

        //if (urlKeys.key == 'AddOnFly') {
        //    actionUrlHtml = `<a href="@Url.Action("Index", "LMSContentUpload")"><i class="fa fa-times"></i></a>` ;
        //}
        //else {
        //    actionUrlHtml = `<a href="@Url.Action("Index", "LMSQuestions")"><i class="fa fa-times"></i></a>`;
        //}
        //ApprovalCross.append(actionUrlHtml);

        // End of Rev Sanchita

        $(".allow_decimal").on("input", function (evt) {
            var self = $(this);
            self.val(self.val().replace(/[^0-9\.]/g, ''));
            if ((evt.which != 46 || self.val().indexOf('.') != -1) && (evt.which < 48 || evt.which > 57)) {
                evt.preventDefault();
            }
        });
        $('.numbersOnly').keyup(function () {
            if (this.value != this.value.replace(/[^0-9\.]/g, '')) {
                this.value = this.value.replace(/[^0-9\.]/g, '');
            }
        });

        $('#txtQuestionName').focus();
        $('#chkCorrect1').change(function () {
            var chkCorrect1 = document.getElementById("chkCorrect1").checked ? "1" : "0";
            if (chkCorrect1 == "1") {
                $("#txtPoint1").prop("disabled", false);
                $("#txtPoint1").focus();
                
            }
            else {
                $("#txtPoint1").prop("disabled", true);
                
            }
        });

        $('#chkCorrect2').change(function () {
            var chkCorrect2 = document.getElementById("chkCorrect2").checked ? "1" : "0";
            if (chkCorrect2 == "1") {
                $("#txtPoint2").prop("disabled", false);
                $("#txtPoint2").focus();
                
            }
            else {
                $("#txtPoint2").prop("disabled", true);
                
            }
        });

        $('#chkCorrect3').change(function () {
            var chkCorrect3 = document.getElementById("chkCorrect3").checked ? "1" : "0";
            if (chkCorrect3 == "1") {
                $("#txtPoint3").prop("disabled", false);
                $("#txtPoint3").focus();
                
            }
            else {
                $("#txtPoint3").prop("disabled", true);
               
            }
        });

        $('#chkCorrect4').change(function () {
            var chkCorrect4 = document.getElementById("chkCorrect4").checked ? "1" : "0";
            if (chkCorrect4 == "1") {
                $("#txtPoint4").prop("disabled", false);
                $("#txtPoint4").focus();
                
            }
            else {
                $("#txtPoint4").prop("disabled", true);
                
            }
        });
    });

    function handleInputFocus(chkId, txtId, placeholderText) {
        // Enable the focused input and remove its placeholder on checkbox change
        $("#" + chkId).change(function () {
            var isChecked = document.getElementById(chkId).checked ? "1" : "0";

            // Disable and reset placeholders for all inputs
            $(".txtPoint").prop("disabled", true).each(function () {
                $(this).attr("placeholder", $(this).data("placeholder"));
            });

            // Enable the selected input if checked
            if (isChecked == "1") {
                $("#" + txtId).prop("disabled", false).focus();
            }
        });

        // Remove placeholder on focus
        $("#" + txtId).focus(function () {
            $(this).attr("placeholder", "");
        });

        // Restore placeholder on focus out
        $("#" + txtId).focusout(function () {
            $(this).attr("placeholder", $(this).data("placeholder"));
        });
    }

    // Initialize the inputs
    $(document).ready(function () {
        // Store original placeholders
        $("#txtPoint1").data("placeholder", "Point 1");
        $("#txtPoint2").data("placeholder", "Point 2");
        $("#txtPoint3").data("placeholder", "Point 3");
        $("#txtPoint4").data("placeholder", "Point 4");

        // Apply the function to each checkbox/input pair
        handleInputFocus('chkCorrect1', 'txtPoint1', 'Point 1');
        handleInputFocus('chkCorrect2', 'txtPoint2', 'Point 2');
        handleInputFocus('chkCorrect3', 'txtPoint3', 'Point 3');
        handleInputFocus('chkCorrect4', 'txtPoint4', 'Point 4');
    });





    function getUrlVars() {
        var vars = [], hash;
        var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        for (var i = 0; i < hashes.length; i++) {
            hash = hashes[i].split('=');
            vars.push(hash[0]);
            vars[hash[0]] = hash[1];
        }
        return vars;
    }

    // Rev Sanchita
    //var QuestionID = 0;
    //var urlKeys = getUrlVars();

    //if (urlKeys.key != 'Add') {
    if (urlKeys.key != 'Add' && urlKeys.key != 'AddOnFly' && urlKeys.key != 'AddOnFlySave' ) {

        //document.getElementById("TopicGridLookup_I").style.fontSize = "larger";
       //$("#TopicGridLookup_I").addClass("bold");
       //  //document.getElementById('TopicGridLookup_I').className = 'bold';
        // End of Rev Sanchita
       // $("#titleheader").va("Modify Question");


        QuestionID = urlKeys.key;
        $("#hdnIDADd").val(QuestionID);
        if (QuestionID != 0) {
            $('#btnSave').show();
            $.ajax({
                type: "POST",
                url: "@Url.Action("EditQuestion", "LMSQuestions")",
                data: { id: QuestionID },
                success: function (response) {
                    if (response.code == "") {
                        jAlert('No data found');
                    }
                    else {
                        $("#txtQuestionName").val(response.NAME);
                        $("#txtQuestionDescription").val(response.DESCRIPTION);


                        $("#txtOption1").val(response.OPTIONS_NUMBER1);
                        $("#txtOption2").val(response.OPTIONS_NUMBER2);
                        $("#txtOption3").val(response.OPTIONS_NUMBER3);
                        $("#txtOption4").val(response.OPTIONS_NUMBER4);


                        $("#txtPoint1").val(response.OPTIONS_POINT1);
                        $("#txtPoint2").val(response.OPTIONS_POINT2);
                        $("#txtPoint3").val(response.OPTIONS_POINT3);
                        $("#txtPoint4").val(response.OPTIONS_POINT4);

                        if (response.OPTIONS_CORRECT1 == "True") {
                            $("#chkCorrect1").prop("checked", true);
                            $("#txtPoint1").prop("disabled", false);

                        }
                        else {
                            $("#chkCorrect1").prop("checked", false);
                            $("#txtPoint1").prop("disabled", true);
                        }

                        if (response.OPTIONS_CORRECT2 == "True") {
                            $("#chkCorrect2").prop("checked", true);
                            $("#txtPoint2").prop("disabled", false);
                        }
                        else {
                            $("#chkCorrect2").prop("checked", false);
                            $("#txtPoint2").prop("disabled", true);
                        }

                        if (response.OPTIONS_CORRECT3 == "True") {
                            $("#chkCorrect3").prop("checked", true);
                            $("#txtPoint3").prop("disabled", false);
                        }
                        else {
                            $("#chkCorrect3").prop("checked", false);
                            $("#txtPoint3").prop("disabled", true);
                        }

                        if (response.OPTIONS_CORRECT4 == "True") {
                            $("#chkCorrect4").prop("checked", true);
                            $("#txtPoint3").prop("disabled", false);
                        }
                        else {
                            $("#chkCorrect4").prop("checked", false);
                            $("#txtPoint4").prop("disabled", true);
                        }


                        TOPIC_ID = response.TOPICIDS;
                        Category_ID = response.CATEGORYIDS;

                    }
                }
            });




        }
    }



    function CategorySelectionChanged(s, e) {
        CategoryGridLookup.gridView.GetSelectedFieldValues("CATEGORYID", GetSelectedFieldValuesCallbackCategory);
    }
    function GetSelectedFieldValuesCallbackCategory(values) {
        try {
            Category = [];
            Category_ID = "";
            for (var i = 0; i < values.length; i++) {
                Category.push(values[i]);
                Category_ID += values[i] + ',';
            }
        } finally {
            console.log(Category);
        }
    }
    function SelectAllGridLookup(s, e) {
        CategoryGridLookup.gridView.SelectRows();
        Category = "";
        CategoryGridLookup.SetText("");
        $.ajax({
            type: 'POST',
            url: "/LMSQuestions/GetCategoryListJson",
            //data: { "Hoid": Hoid },
            dataType: "json",
            async: false,
            success: function (data) {
                Category = [];
                Category_ID = "";
                $.each(data, function (i, data) {
                    Category.push(data.CATEGORYID);
                    Category_ID += data.CATEGORYID + ',';
                });
                CategoryGridLookup.gridView.SelectRows();
            },
            error: function () {
            }
        });

    }
    function DeSelectAllGridLookup(s, e) {
        CategoryGridLookup.gridView.UnselectRows();

        Category = [];
        Category_ID = "";
    }


    function TopicSelectionChanged(s, e) {
        TopicGridLookup.gridView.GetSelectedFieldValues("TOPICID", GetSelectedFieldValuesCallbackTopic);
    }
    function GetSelectedFieldValuesCallbackTopic(values) {
        try {
            TOPICID = [];
            TOPIC_ID = "";
            for (var i = 0; i < values.length; i++) {
                TOPICID.push(values[i]);
                TOPIC_ID += values[i] + ',';
            }
        } finally {
            console.log(TOPICID);
        }
    }
    function SelectAllGridLookupTopic(s, e) {
        TopicGridLookup.gridView.SelectRows();
        Category = "";
        TopicGridLookup.SetText("");
        $.ajax({
            type: 'POST',
            url: "/LMSQuestions/GetTopicListJson",
            //data: { "Hoid": Hoid },
            dataType: "json",
            async: false,
            success: function (data) {
                TOPICID = [];
                TOPIC_ID = "";
                $.each(data, function (i, data) {
                    TOPICID.push(data.TOPICID);
                    TOPIC_ID += data.TOPICID + ',';
                });
                TopicGridLookup.gridView.SelectRows();
            },
            error: function () {
            }
        });

    }
    function DeSelectAllGridLookupTopic(s, e) {
        TopicGridLookup.gridView.UnselectRows();
        TOPICID = [];
        TOPIC_ID = "";
    }




</script>
<script>
    function SaveQuestion(mode ) {
            var id = $("#hdnIDADd").val();
            if (id == "") {
                id = "0";
            }
            if ($("#txtQuestionName").val().trim() == "") {
            // SweetAlert for empty Question name
            Swal.fire({
                icon: 'warning',
                title: 'Warning',
                text: 'Enter Question Name to proceed.'
            });
            return false;
            }

            //else if ($("#txtQuestionDescription").val().trim() == "") {
            //// SweetAlert for empty Question description
            //Swal.fire({
            //    icon: 'warning',
            //    title: 'Warning',
            //    text: 'Enter Question Description to proceed.'
            //});
            //return false;
            //}
            else if ($("#txtOption1").val().trim() == "") {
                // SweetAlert for empty Question description
                Swal.fire({
                    icon: 'warning',
                    title: 'Warning',
                    text: 'Enter Option1 to proceed.'
                });
                return false;
            }
            else if ($("#txtOption2").val().trim() == "") {
                // SweetAlert for empty Question description
                Swal.fire({
                    icon: 'warning',
                    title: 'Warning',
                    text: 'Enter Option2 to proceed.'
                });
                return false;
            }
            else if ($("#txtOption3").val().trim() == "") {
                // SweetAlert for empty Question description
                Swal.fire({
                    icon: 'warning',
                    title: 'Warning',
                    text: 'Enter Option3 to proceed.'
                });
                return false;
            }
            else if ($("#txtOption4").val().trim() == "") {
                // SweetAlert for empty Question description
                Swal.fire({
                    icon: 'warning',
                    title: 'Warning',
                    text: 'Enter Option4 to proceed.'
                });
                return false;
            }
            if ($("#txtPoint1").val().trim() == "" || $("#txtPoint1").val().trim() == "0") {

                if ($("#txtPoint2").val().trim() == "" || $("#txtPoint2").val().trim() == "0") {

                    if ($("#txtPoint3").val().trim() == "" || $("#txtPoint3").val().trim() == "0") {

                        if ($("#txtPoint4").val().trim() == "" || $("#txtPoint4").val().trim() == "0") {

                            //jAlert('Enter Points  to proceed.');
                            Swal.fire({
                                icon: 'warning',
                                title: 'Warning',
                                text: 'Please Enter minimum one point to proceed.'
                            });
                            return false;
                        }
                    }
                }
            }
            var chkCorrect1 = document.getElementById("chkCorrect1").checked ? "1" : "0";
            var chkCorrect2 = document.getElementById("chkCorrect2").checked ? "1" : "0";
            var chkCorrect3 = document.getElementById("chkCorrect3").checked ? "1" : "0";
            var chkCorrect4 = document.getElementById("chkCorrect4").checked ? "1" : "0";

            if (chkCorrect1 == "0") {

                if (chkCorrect2 == "0") {

                    if (chkCorrect3 == "0") {

                        if (chkCorrect4 == "0") {

                            Swal.fire({
                                icon: 'warning',
                                title: 'Warning',
                                text: 'Please tick the correct answer(s).'
                            });
                            return false;
                        }
                    }
                }
            }

            if (TOPIC_ID.trim() == "") {
                Swal.fire({
                    icon: 'warning',
                    title: 'Warning',
                    text: 'Select Topic(s) to proceed.'
                });
                return false;
            }
            //else if (Category_ID.trim() == "") {
            //    Swal.fire({
            //        icon: 'warning',
            //        title: 'Warning',
            //        text: 'Select Category to proceed.'
            //    });
            //    return false;
            //}
            else {

            var Option1 = $("#txtOption1").val().trim();
            var Option2 = $("#txtOption2").val().trim();
            var Option3 = $("#txtOption3").val().trim();
            var Option4 = $("#txtOption4").val().trim();

            var Point1 = $("#txtPoint1").val().trim();
            var Point2 = $("#txtPoint2").val().trim();
            var Point3 = $("#txtPoint3").val().trim();
            var Point4 = $("#txtPoint4").val().trim();

            var chkCorrect1 = document.getElementById("chkCorrect1").checked ? "1" : "0";

            if (chkCorrect1 == "1") {
                if ($("#txtPoint1").val().trim() == "" || $("#txtPoint1").val().trim() == "0") {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Warning',
                        text: 'Please Enter Point1 to proceed.'
                    });
                    return false;
                }
                if ($("#txtOption1").val().trim() == "" || $("#txtOption1").val().trim() == "0") {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Warning',
                        text: 'Please Enter Option1 to proceed.'
                    });
                    return false;
                }
            }

            var chkCorrect2 = document.getElementById("chkCorrect2").checked ? "1" : "0";

            if (chkCorrect2 == "1") {
                if ($("#txtPoint2").val().trim() == "" || $("#txtPoint2").val().trim() == "0") {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Warning',
                        text: 'Please Enter Point2 to proceed.'
                    });
                    return false;
                }
                if ($("#txtOption2").val().trim() == "" || $("#txtOption2").val().trim() == "0") {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Warning',
                        text: 'Please Enter Option2 to proceed.'
                    });
                    return false;
                }
            }
            var chkCorrect3 = document.getElementById("chkCorrect3").checked ? "1" : "0";
                if (chkCorrect3 == "1") {
                    if ($("#txtPoint3").val().trim() == "" || $("#txtPoint3").val().trim() == "0") {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Warning',
                            text: 'Please Enter Point3 to proceed.'
                        });
                        return false;
                    }
                    if ($("#txtOption3").val().trim() == "" || $("#txtOption3").val().trim() == "0") {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Warning',
                            text: 'Please Enter Option3 to proceed.'
                        });
                        return false;
                    }
                }


            var chkCorrect4 = document.getElementById("chkCorrect4").checked ? "1" : "0";

                if (chkCorrect4 == "1") {
                    if ($("#txtPoint4").val().trim() == "" || $("#txtPoint4").val().trim() == "0") {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Warning',
                            text: 'Please Enter Point4 to proceed.'
                        });
                        return false;
                    }
                    if ($("#txtOption4").val().trim() == "" || $("#txtOption4").val().trim() == "0") {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Warning',
                            text: 'Please Enter Option4 to proceed.'
                        });
                        return false;
                    }
                }



            $.ajax({
                type: "POST",
                url: '@Url.Action("SaveQuestion", "LMSQuestions")',
                data: {
                    name: $("#txtQuestionName").val().trim(),
                    id: id,
                    description: $("#txtQuestionDescription").val().trim(),

                    Option1: Option1,
                    Option2: Option2,
                    Option3: Option3,
                    Option4: Option4,

                    Point1: Point1,
                    Point2: Point2,
                    Point3: Point3,
                    Point4: Point4,

                    chkCorrect1: chkCorrect1,
                    chkCorrect2: chkCorrect2,
                    chkCorrect3: chkCorrect3,
                    chkCorrect4: chkCorrect4,

                    TOPIC_ID: TOPIC_ID,
                    Category_ID: Category_ID,

                    /*Rev Sanchita*/
                    MODE: urlKeys.key,
                    CONTENTID: urlKeys.CONTENTID
                    /*End of Rev Sanchita*/

                },
                success: function (response) {
                    if (parseInt(response) > 0) {
                        // SweetAlert success message
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: 'Question saved successfully.'
                        }).then(() => {
                            // $("#QuestionModal").modal('hide');
                            // Rev Sanchita
                            //var url = "/LMS/LMSQuestions/Index";
                            //window.location.href = url;
                            if (urlKeys.key == 'AddOnFly' || urlKeys.key == 'AddOnFlySave' || urlKeys.TOPICID > 0) {


                                if (mode == "New") {
                                            $.ajax({
                                                    type: "POST",
                                                    url: "@Url.Action("SetMapDataByTopicID", "LMSQuestions")",
                                                    data: { TopicID: urlKeys.TOPICID },
                                                    success: function (response) {
                                                        if (response != null && response == true) {
                                                            window.location.href = '/LMS/LMSQuestions/QuestionAdd?key=' + urlKeys.key +'&&TOPICID=' + urlKeys.TOPICID + '&&CONTENTID=' + urlKeys.CONTENTID;

                                                        }
                                                        else {
                                                            jAlert('Please try again later.');
                                                            return false;
                                                        }
                                                    }
                                            });

                                }
                                else {
                                    //window.location.href = '/LMS/LMSContentUpload/Index';

                                    var FromSave = 0
                                    if (urlKeys.key == 'AddOnFlySave') {
                                        FromSave = 1
                                    }

                                    $.ajax({
                                            type: "POST",
                                            url: "@Url.Action("ReturnTopicIdFromQuestion", "LMSContentUpload")",
                                            data: { TopicID: urlKeys.TOPICID, ContentID: urlKeys.CONTENTID, FromSave: FromSave },
                                            success: function (response) {
                                                if (response != null && response == true) {
                                                    window.location.href = '/LMS/LMSContentUpload/Index';
                                                }
                                                else {
                                                    jAlert('Please try again later.');
                                                    return false;
                                                }
                                            }
                                    });
                                    
                                }
                                //Swal.fire({
                                //    title: 'Question Add',
                                //    text: "Do you want to add another question?",
                                //    icon: 'question',
                                //    showCancelButton: true,
                                //    confirmButtonColor: '#3085d6',
                                //    cancelButtonColor: '#d33',
                                //    confirmButtonText: 'Yes',
                                //    cancelButtonText: 'No'
                                //}).then((result) => {
                                //    if (result.isConfirmed) {
                                //        window.location.href = '/LMS/LMSQuestions/QuestionAdd?key=AddOnFly&&TOPICID=' + urlKeys.TOPICID + '&&CONTENTID=' + urlKeys.CONTENTID;
                                //    }
                                //    else {
                                //        window.location.href = '/LMS/LMSContentUpload/Index';
                                //    }
                                //});

                            }
                            else {
                                if (mode == "New") {
                                    var url = "/LMS/LMSQuestions/QuestionAdd?key=Add";
                                    window.location.href = url;
                                }
                                else {
                                    window.location.href = '/LMS/LMSQuestions/Index';
                                }
                            }
                            // End of Rev Sanchita

                            //location.reload();
                        });
                    } else if (parseInt(response) == -1) {
                        // SweetAlert duplicate Question name warning
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Duplicate Question name cannot be entered. Please enter a unique Question name.'
                        });
                    }
                }
            });
            }
}
    function DeleteClick1()
    {
        $("#txtOption1").val("");
        $("#txtPoint1").val("");
        $("#chkCorrect1").prop("checked", false);
    }
    function checkboxClick1() {
        $("#txtPoint1").val("");
    }
    function DeleteClick2() {
        $("#txtOption2").val("");
        $("#txtPoint2").val("");
        $("#chkCorrect2").prop("checked", false);
    }
    function checkboxClick2() {
        $("#txtPoint2").val("");
    }
    function DeleteClick3() {
        $("#txtOption3").val("");
        $("#txtPoint3").val("");
        $("#chkCorrect3").prop("checked", false);
    }
    function checkboxClick3() {
        $("#txtPoint3").val("");
    }
    function DeleteClick4() {
        $("#txtOption4").val("");
        $("#txtPoint4").val("");
        $("#chkCorrect4").prop("checked", false);
    }
    function checkboxClick4() {
        $("#txtPoint4").val("");
    }

    // Rev Sanchita
    function CancelQuestionAdd() {
        if (urlKeys.key == 'AddOnFly' || urlKeys.key == 'AddOnFlySave' || urlKeys.TOPICID > 0) {
            //window.location.href = '/LMS/LMSContentUpload/Index?TOPICID=' + urlKeys.TOPICID;
            var FromSave = 0
            if (urlKeys.key == 'AddOnFlySave') {
                FromSave=1
            }


            $.ajax({
                    type: "POST",
                    url: "@Url.Action("ReturnTopicIdFromQuestion", "LMSContentUpload")",
                    data: { TopicID: urlKeys.TOPICID, ContentID: urlKeys.CONTENTID , FromSave: FromSave },
                    success: function (response) {
                        if (response != null && response == true) {
                            window.location.href = '/LMS/LMSContentUpload/Index';
                        }
                        else {
                            jAlert('Please try again later.');
                            return false;
                        }
                    }
            });
        }
        else {
            window.location.href = '/LMS/LMSQuestions/Index';
        }
    }
    // End of Rev Sanchita

 
</script>


<div class="breadCumb">
    <span id="titleheader">@ViewBag.PageTitle</span>
    @*<div id="ApprovalCross" class="crossBtnN"><a href="@Url.Action("Index", "LMSQuestions")"><i class="fa fa-times"></i></a></div>*@
    <div id="ApprovalCross" onclick="CancelQuestionAdd()" class="crossBtnN"><i class="fa fa-times"></i></div>
</div>
<div class="container">
    <div class="form_main backBox p-3"> 

        <div class="row">
            <div class="col-md-12">
                <div><label>Question Name <span class="red">*</span></label></div>
                <div>
                    <input type="text" id="txtQuestionName" maxlength="250" class="form-control" />
                </div>
            </div>
            <div class="col-md-12 mb-4 mt-3">
                <div><label>Question Description </label></div>
                <div>
                    @*<textarea type="text" id="txtQuestionDescription" maxlength="500" class="form-control" />*@
                    <textarea rows="5" class="form-control" style="height:50px" cols="20" id="txtQuestionDescription" maxlength="500"></textarea>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <label>Options</label>
            </div>

        </div>

        <div class="option-part">
            <div class="ans-option">
                <div class="delete-col">
                    <div>
                        <a style='cursor:pointer' class='pad tooltip-container' onclick="DeleteClick1()"><img src='/assests/images/clear-qst-ans.png' /><div class="tooltip">Clear</div> </a>
                    </div>
                </div>
                <div class="option-col">
                    <div>
                        <input type="text" id="txtOption1" class="form-control" placeholder="Option 1" />
                    </div>
                </div>
                <div class="number-col">
                    <div>
                        <input type="number" id="txtPoint1" class="form-control  numbersOnly" placeholder="Point 1" min="1" max="999" maxlength="3" disabled />
                    </div>
                </div>
                <div class="correct-col">
                    <div><input type="checkbox" id="chkCorrect1" class="styled-checkbox" onclick="checkboxClick1()" /><label>Correct</label></div>
                </div>
            </div>
            <div class="ans-option">


                <div class="delete-col">
                    <div>
                        <a style='cursor:pointer' class='pad tooltip-container' onclick="DeleteClick2()"><img src='/assests/images/clear-qst-ans.png' /> <div class="tooltip">Clear</div></a>
                    </div>
                </div>
                <div class="option-col">
                    <div>
                        <input type="text" id="txtOption2" class="form-control" placeholder="Option 2" />
                    </div>
                </div>
                <div class="number-col">
                    <div>
                        <input type="number" id="txtPoint2" class="form-control  numbersOnly" placeholder="Point 2" min="1" max="999" maxlength="3" disabled />
                    </div>
                </div>
                <div class="correct-col">
                    <div><input type="checkbox" id="chkCorrect2" class="styled-checkbox" onclick="checkboxClick2()" /><label>Correct</label></div>
                </div>

            </div>
            <div class="ans-option">


                <div class="delete-col">
                    <div>
                        <a style='cursor:pointer' class='pad tooltip-container' onclick="DeleteClick3()"><img src='/assests/images/clear-qst-ans.png' /> <div class="tooltip">Clear</div></a>
                    </div>
                </div>
                <div class="option-col">
                    <div>
                        <input type="text" id="txtOption3" class="form-control" placeholder="Option 3" />
                    </div>
                </div>
                <div class="number-col">
                    <div>
                        <input type="number" id="txtPoint3" class="form-control  numbersOnly" placeholder="Point 3" min="1" max="999" maxlength="3" disabled />
                    </div>
                </div>
                <div class="correct-col">
                    <div><input type="checkbox" id="chkCorrect3" class="styled-checkbox" onclick="checkboxClick3()" /><label>Correct</label></div>
                </div>

            </div>
            <div class="ans-option">

                <div class="delete-col">
                    <div>
                        <a style='cursor:pointer' class='pad tooltip-container' onclick="DeleteClick4()"><img src='/assests/images/clear-qst-ans.png' /> <div class="tooltip">Clear</div></a>
                    </div>
                </div>
                <div class="option-col">
                    <div>
                        <input type="text" id="txtOption4" class="form-control" placeholder="Option 4" />
                    </div>
                </div>
                <div class="number-col">
                    <div>
                        <input type="number" id="txtPoint4" class="form-control  numbersOnly" placeholder="Point 4" min="1" max="999" maxlength="3" disabled />
                    </div>
                </div>
                <div class="correct-col">
                    <div><input type="checkbox" id="chkCorrect4" class="styled-checkbox" onclick="checkboxClick4()" /><label>Correct</label></div>
                </div>

            </div>
        </div>
        <div class="row mb-5 mt-4">
            <div class="col-md-6">
                <label>Map Topic(s)<span class="red">*</span></label>
                @Html.Action("GetTopicList", "LMSQuestions", new { QUESTIONS_ID = @Model.QUESTIONS_ID })
            </div>
            <div class="col-md-6">
                <label>Map Categories</label>
                @Html.Action("GetCategoryList", "LMSQuestions", new { QUESTIONS_ID = @Model.QUESTIONS_ID })
            </div>

        </div>

        <div class="save-exit-btn">
            @*Rev Sanchita*@
            @*<button type="button" class="btn btn-cancel" onclick="location.href='@Url.Action("Index", "LMSQuestions")'">Cancel & Exit</button>*@
            <button type="button" class="btn btn-cancel cancel-catg" onclick="CancelQuestionAdd()"><span class="btn-icon"><img src="../../../assests/images/cancel.svg"></span> Cancel & Exit</button>
            @*End of Rev Sanchita*@

            @if (ViewBag.CanAdd && Convert.ToInt16(ViewBag.IsView) == 0 || Convert.ToInt16(ViewBag.IsView) == 2)
            {
                <button type="button" id="btnSave" class="btn btn-warning" onclick="SaveQuestion('Exit')"><span class="btn-icon"><img src="../../../assests/images/save-instagram-orange.svg"></span> Save & Exit</button>
            }
            @if (ViewBag.CanAdd && Convert.ToInt16(ViewBag.IsView) == 0 || Convert.ToInt16(ViewBag.IsView) == 2)
            {
                <button type="button" id="btnSave" class="btn btn-success" onclick="SaveQuestion('New')"><span class="btn-icon"><img src="../../../assests/images/save-instagram.svg"></span> Save & New</button>
            }

        </div>
        <input type="hidden" value="@Model.QUESTIONS_ID" id="hdnIDADd" />

    </div>
</div>
