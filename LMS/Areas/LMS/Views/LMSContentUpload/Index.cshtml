@*******************************************************************************************************************
     * Rev 1.0      15-10-2024      Priti    V2.0.49     0027751:Content [Play] option shall be available against each content. From Contact Master Module in Portal.
    ********************************************************************************************************************@

@using LMS.Models;
@model LMS.Models.LMSContentModel
@{
    ViewBag.Title = "Content";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/AlertifyJS/1.13.1/css/alertify.css">
<link href="~/assests/pluggins/LightBox/lightbox.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/AlertifyJS/1.13.1/css/alertify.rtl.css" integrity="sha512-ESMNMKMBWQP7MhGIc/vk75n2qBzCfLhP8q4Ww43m+hhQeUn+aiPCYWV1eyP1uZ7tWda8VtZypCZavihltM+xhw==" crossorigin="anonymous" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/AlertifyJS/1.13.1/css/themes/default.rtl.css" integrity="sha512-gi53xi6INSr6sseLKtDMLqAnFouz6jZhAYCLohIRyui0wV53yPWk9mP4oAEA26x12BV0Pvf59La9jS5nXwChiw==" crossorigin="anonymous" />
@*<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>*@
@*<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>*@
<script src="https://cdnjs.cloudflare.com/ajax/libs/AlertifyJS/1.13.1/alertify.min.js"></script>
<script src="~/assests/pluggins/LightBox/lightbox.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.2/jquery-confirm.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.2/jquery-confirm.min.js"></script>
<script src="~/assests/pluggins/multiSearchable/mock.js"></script>
<link rel="stylesheet" href="/assests/css/ftsNewScreen.css" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-fileinput/5.1.5/css/fileinput.min.css" media="all" rel="stylesheet" type="text/css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-fileinput/5.1.5/js/plugins/sortable.min.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-fileinput/5.1.5/js/fileinput.min.js"></script>
@*<script src="http://malsup.github.com/jquery.form.js"></script>*@
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.form/4.3.0/jquery.form.js"></script>
<link href="/assests/pluggins/Transfer/icon_font/css/icon_font.css" rel="stylesheet" />
<link href="/assests/pluggins/Transfer/css/jquery.transfer.css" rel="stylesheet" />
<script src="/assests/pluggins/Transfer/jquery.transfer.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.11.2/moment.min.js"></script>
<link rel="stylesheet" href="/assests/css/jquery-duration-picker.css">
<script src="/assests/js/jquery-duration-picker.js"></script>
<link href="https://fonts.googleapis.com/css2?family=Kalam:wght@300;400;700&display=swap" rel="stylesheet">
<style>
    @@font-face {
        font-family: Billy-Ohio;
        /*font-weight: 300;*/
        src: url("../../../../assests/fonts/Billy-Ohio.woff") format("woff");
    }

    .progress {
        height: 10px;
        position: relative;
        overflow: auto;
        margin: 0;
    }

    .percent {
        position: absolute;
        top: -19px;
        right: 0;
    }

    .bar {
        height: 10px;
        background: green;
        width: 0%;
    }

    .file-drop-zone {
        margin: auto !important;
        min-height: 200px;
        border-radius: 12px;
    }

    .krajee-default.file-preview-frame .kv-file-content {
        height: 175px !important;
    }

    .krajee-default .file-footer-caption {
        margin-bottom: 0;
    }

    .modal-dialog.modal-lg {
        left: 0;
    }

    video.kv-preview-data.file-preview-video.file-zoom-detail, .kv-preview-data.file-preview-video {
        height: 170px !important;
    }

    .close.fileinput-remove {
        background: #ec4848;
        opacity: 1;
        color: #fff !important;
        font-size: 25px !important;
        width: 25px;
        height: 25px;
        /* margin: 2px 1px 0 0; */
        border-radius: 15px;
        margin: 9px 9px 0 5px;
    }

    .modal.w90 .modal-dialog {
        width: 90%;
    }

    .form-group {
        margin-bottom: 5px;
    }

    .doc-description {
        height: 59px !important;
        padding-bottom: 6px !important;
        overflow: hidden;
    }

    .mHeader {
        font-size: 31px;
        color: #4c4c4c;
        font-family: 'Poppins';
        background: #efefef;
        margin: 6px 0;
        border-radius: 5px;
        padding: 6px;
    }

    .modal-header {
        background: #094e8c !important;
        background-image: none !important;
        padding: 11px 20px;
        border: none;
        color: black;
    }

    button.close {
        color: #111 !important;
        font-weight: 400 !important;
        opacity: .8 !important;
        font-size: 32px !important;
    }

    .d-none {
        display: none;
    }
</style>
<style>
    .pmsModal .modal-header {
        background: #094e8c !important;
        background-image: none !important;
        padding: 11px 20px;
        border: none;
        border-radius: 15px 15px 0 0 !important;
        color: black;
        /*background: linear-gradient(to right, #1f5fbf, #11998e) !important;*/
    }

    .pmsModal .modal-content {
        border: none;
        border-radius: 20px;
    }

    .pmsModal .modal-header .modal-title {
        font-size: 14px;
    }

    .pmsModal.w70 .modal-dialog {
        width: 90% !important;
    }

    @@media screen and (min-width: 768px) {
        .modal-dialog {
            padding-top: 56px !important;
        }

        #UserSearchModel .modal-dialog, #ReferenceUserSearchModel .modal-dialog {
            padding-top: 100px !important;
        }
    }



    #myModal label {
        font-weight: 500;
        margin-top: 3px;
        margin-bottom: 2px;
        font-size: 13px;
    }

    .red {
        color: red;
    }

    .sample {
        font-size: 12px;
        color: #d48a28;
    }

    .buttonphoto {
        padding: 11px 12px;
        display: inline-block;
        background: #dee3f7;
        margin-top: 11px;
        border-radius: 3px;
        cursor: pointer;
    }

        .buttonphoto:hover {
            background: #415ed2;
            color: #fff;
        }

    .infoQ {
        color: #4b98b8;
        margin-left: 5px;
        cursor: pointer;
    }

    #PanModel {
        z-index: 9999;
    }

    .inputShrink select:not(.btn), .inputShrink .form-control:not(textarea) {
        /*height: 30px;
        padding: 3px 12px;*/
    }

    .modalScroll .modal-body {
        /*max-height: 88vh !important;*/
        overflow-y: auto;
        border-radius: 0 0 15px 15px !important;
    }

    .bulAssignTbl > tbody > tr > td {
        padding-right: 15px;
        padding-bottom: 15px;
    }

    .mHead {
        margin: 0;
        padding: 5px 0;
        border-bottom: 1px solid #ddd;
        color: #415ed2;
        margin-bottom: 13px;
    }

    /*Rev 1.0*/

    body, .dxtcLite_PlasticBlue {
        font-family: 'Poppins', sans-serif !important;
    }

    #BranchGridLookup {
        min-height: 34px;
        border-radius: 5px;
    }

    .dxeButtonEditButton_PlasticBlue {
        background: #094e8c !important;
        border-radius: 7px !important;
        padding: 0 6px !important;
    }

    .dxeButtonDisabled_PlasticBlue {
        background: #ababab !important;
    }

    .chosen-container-single .chosen-single div {
        background: #094e8c;
        color: #fff;
        border-radius: 4px;
        height: 30px;
        top: 1px;
        right: 1px;
        /*position:relative;*/
    }

        .chosen-container-single .chosen-single div b {
            display: none;
        }

        .chosen-container-single .chosen-single div::after {
            /*content: '<';*/
            content: url(../../../assests/images/left-arw.png);
            position: absolute;
            top: 2px;
            right: 3px;
            font-size: 13px;
            transform: rotate(269deg);
            font-weight: 500;
        }

    .chosen-container-active.chosen-with-drop .chosen-single div {
        background: #094e8c;
        color: #fff;
    }

        .chosen-container-active.chosen-with-drop .chosen-single div::after {
            transform: rotate(90deg);
            right: 7px;
        }

    .calendar-icon {
        position: absolute;
        bottom: 7px;
        right: 20px;
        z-index: 0;
        cursor: pointer;
    }

    .date-select .form-control {
        position: relative;
        z-index: 1;
        background: transparent;
    }

    #ddlState, #ddlPartyType, #divoutletStatus, #slmonth, #slyear {
        -webkit-appearance: none;
        position: relative;
        z-index: 1;
        background-color: transparent;
    }

    .h-branch-select, .h-branch-select-new {
        position: relative;
    }

        .h-branch-select::after {
            content: '<';
            /*content: url(../../../assests/images/left-arw.png);*/
            position: absolute;
            top: 38px;
            right: 13px;
            font-size: 18px;
            transform: rotate(269deg);
            font-weight: 500;
            background: #094e8c;
            color: #fff;
            height: 18px;
            display: block;
            width: 28px;
            /* padding: 10px 0; */
            border-radius: 4px;
            text-align: center;
            line-height: 19px;
            z-index: 0;
        }

        .h-branch-select-new::after {
            content: '<';
            /*content: url(../../../assests/images/left-arw.png);*/
            position: absolute;
            top: 9px;
            right: 13px;
            font-size: 18px;
            transform: rotate(269deg);
            font-weight: 500;
            background: #094e8c;
            color: #fff;
            height: 18px;
            display: block;
            width: 28px;
            /* padding: 10px 0; */
            border-radius: 4px;
            text-align: center;
            line-height: 19px;
            z-index: 0;
        }

    select:not(.btn):focus {
        border-color: #094e8c;
    }

    select:not(.btn):focus-visible {
        box-shadow: none;
        outline: none;
    }

    .multiselect.dropdown-toggle {
        text-align: left;
    }

    .multiselect.dropdown-toggle, #ddlMonth, #ddlYear {
        -webkit-appearance: none;
        position: relative;
        z-index: 1;
        background-color: transparent;
    }

    select:not(.btn) {
        padding-right: 30px;
        /*-webkit-appearance: none;*/
        position: relative;
        z-index: 1;
        background-color: transparent;
        /*height: 30px !important;*/
    }

    #ddlShowReport:focus-visible {
        box-shadow: none;
        outline: none;
        border: 1px solid #164f93;
    }

    #ddlShowReport:focus {
        border: 1px solid #164f93;
    }

    .whclass.selectH:focus-visible {
        outline: none;
    }

    .whclass.selectH:focus {
        border: 1px solid #164f93;
    }

    .dxeButtonEdit_PlasticBlue {
        border: 1px Solid #ccc;
    }

    .chosen-container-single .chosen-single {
        border: 1px solid #ccc;
        background: #fff;
        box-shadow: none;
    }

    .daterangepicker td.active, .daterangepicker td.active:hover {
        background-color: #175396;
    }

    label {
        font-weight: 500;
    }

    .dxgvHeader_PlasticBlue {
        background: #164f94;
    }

    .dxgvSelectedRow_PlasticBlue td.dxgv {
        color: #fff;
    }

    .dxeCalendarHeader_PlasticBlue {
        background: #185598;
    }

    .dxgvControl_PlasticBlue, .dxgvDisabled_PlasticBlue,
    .dxbButton_PlasticBlue,
    .dxeCalendar_PlasticBlue,
    .dxeEditArea_PlasticBlue,
    .dxgvControl_PlasticBlue, .dxgvDisabled_PlasticBlue {
        font-family: 'Poppins', sans-serif !important;
    }

    /*.dxgvEditFormDisplayRow_PlasticBlue td.dxgv, .dxgvDataRow_PlasticBlue td.dxgv, .dxgvDataRowAlt_PlasticBlue td.dxgv, .dxgvSelectedRow_PlasticBlue td.dxgv, .dxgvFocusedRow_PlasticBlue td.dxgv {
        font-weight: 500;
        overflow: visible;
    }

    .dxgvTable_PlasticBlue, .dxgvCSD {
        overflow: visible !important;
    }*/

    .dxgvEditFormDisplayRow_PlasticBlue td.dxgv, .dxgvDataRow_PlasticBlue td.dxgv, .dxgvDataRowAlt_PlasticBlue td.dxgv, .dxgvSelectedRow_PlasticBlue td.dxgv, .dxgvFocusedRow_PlasticBlue td.dxgv {
        overflow: visible;
    }

    .btnPadding .btn {
        padding: 7px 14px !important;
        border-radius: 4px;
    }

    .btnPadding {
        padding-top: 24px !important;
    }

    .dxeButtonEdit_PlasticBlue {
        border-radius: 8px;
        height: 38px;
    }

    #dtFrom, #dtTo, #FormDate, #toDate, #appcbl_frm_dt {
        position: relative;
        z-index: 1;
        background: transparent;
    }

    #tblshoplist_wrapper .dataTables_scrollHeadInner table tr th {
        background: #165092;
        vertical-align: middle;
        font-weight: 500;
    }

    /*#refreshgrid {
        background: #e5e5e5;
        padding: 0 10px;
        margin-top: 15px;
        border-radius: 8px;
    }*/

    .styled-checkbox {
        position: absolute;
        opacity: 0;
        z-index: 1;
    }

        .styled-checkbox + label {
            position: relative;
            /*cursor: pointer;*/
            padding: 0;
            margin-bottom: 0 !important;
        }

            .styled-checkbox + label:before {
                content: "";
                margin-right: 6px;
                display: inline-block;
                vertical-align: text-top;
                width: 16px;
                height: 16px;
                /*background: #d7d7d7;*/
                margin-top: 2px;
                border-radius: 2px;
                border: 1px solid #c5c5c5;
            }

        .styled-checkbox:hover + label:before {
            background: #094e8c;
        }


        .styled-checkbox:checked + label:before {
            background: #094e8c;
        }

        .styled-checkbox:disabled + label {
            color: #b8b8b8;
            cursor: auto;
        }

            .styled-checkbox:disabled + label:before {
                box-shadow: none;
                background: #ddd;
            }

        .styled-checkbox:checked + label:after {
            content: "";
            position: absolute;
            left: 3px;
            top: 9px;
            background: white;
            width: 2px;
            height: 2px;
            box-shadow: 2px 0 0 white, 4px 0 0 white, 4px -2px 0 white, 4px -4px 0 white, 4px -6px 0 white, 4px -8px 0 white;
            transform: rotate(45deg);
        }

    #dtstate {
        padding-right: 8px;
    }

    .modal-header {
        background: #094e8c !important;
        background-image: none !important;
        padding: 11px 20px;
        border: none;
        border-radius: 5px 5px 0 0;
        color: #fff;
        border-radius: 10px 10px 0 0;
    }

    .modal-content {
        border: none;
        border-radius: 16px;
    }

    .modal-header .modal-title {
        font-size: 14px;
    }

    .close {
        font-weight: 400;
        font-size: 25px;
        color: #fff;
        text-shadow: none;
        opacity: .5;
    }

    #EmployeeTable {
        margin-top: 10px;
    }

        #EmployeeTable table tr th {
            padding: 5px 10px;
        }

    .dynamicPopupTbl {
        font-family: 'Poppins', sans-serif !important;
    }

        .dynamicPopupTbl > tbody > tr > td,
        #EmployeeTable table tr th {
            font-family: 'Poppins', sans-serif !important;
            font-size: 12px;
        }

    .w150 {
        width: 160px;
    }

    .eqpadtbl > tbody > tr > td:not(:last-child) {
        padding-right: 20px;
    }

    #dtFrom_B-1, #dtTo_B-1, #cmbDOJ_B-1, #cmbLeaveEff_B-1, #FormDate_B-1, #toDate_B-1, #appcbl_frm_dt_B-1 {
        background: transparent !important;
        border: none;
        width: 30px;
        padding: 10px !important;
    }

        #dtFrom_B-1 #dtFrom_B-1Img,
        #dtTo_B-1 #dtTo_B-1Img,
        #cmbDOJ_B-1 #cmbDOJ_B-1Img,
        #cmbLeaveEff_B-1 #cmbLeaveEff_B-1Img,
        #FormDate_B-1 #FormDate_B-1Img, #toDate_B-1 #toDate_B-1Img, #appcbl_frm_dt_B-1 #appcbl_frm_dt_B-1Img {
            display: none;
        }

    #FormDate_I, #toDate_I {
        background: transparent;
    }

    .for-cust-icon {
        position: relative;
        /*z-index: 1;*/
        width: 150px;
    }

    .pad-md-18 {
        padding-top: 10px;
    }

    .open .dropdown-toggle.btn-default {
        background: transparent !important;
    }

    .input-group-btn .multiselect-clear-filter {
        height: 32px;
        border-radius: 0 4px 4px 0;
    }

    .btn .caret {
        display: none;
    }

    .iminentSpan button.multiselect.dropdown-toggle {
        height: 34px;
    }

    .col-lg-2 {
        padding-left: 8px;
        padding-right: 8px;
    }

    .dxeCalendarSelected_PlasticBlue {
        color: White;
        background-color: #185598;
    }

    .dxeTextBox_PlasticBlue {
        height: 34px;
        border-radius: 4px;
    }

    #cmbDOJ_DDD_PW-1 {
        z-index: 9999 !important;
    }

    #cmbDOJ, #cmbLeaveEff {
        position: relative;
        z-index: 1;
        background: transparent;
    }

    .btn-sm, .btn-xs {
        padding: 7px 10px !important;
    }

    #productAttributePopUp_PWH-1 span, #ASPxPopupControl2_PWH-1 span {
        color: #fff !important;
    }

    #marketsGrid_DXPEForm_tcefnew, .dxgvPopupEditForm_PlasticBlue {
        height: 220px !important;
    }

    .btn {
        height: 34px;
        border-radius: 50px;
    }
    /*Rev end 1.0*/
    /*Rev start 3.0*/
    .mrtop-6 {
        margin-top: 6px;
    }

    @@media screen and (min-width: 768px) {
        #AddTopicModal .modal-dialog {
            width: 48% !important;
        }
    }


    .btn-default {
        background-color: #dbdbdb;
    }

        .btn-default:hover, .btn-default:focus, .btn-default:active, .btn-default.active, .open .dropdown-toggle.btn-default {
            background-color: #c1c1c1;
        }

    #ddlSalesmanRe, #ddlSalesman1 {
        -webkit-appearance: auto;
    }

    #divDate #appcbl_frm_dt_DDD_PW-1 {
        left: 15px !important;
    }

    #divDate #appcbl_frm_dt_DDD_C_FNP_PW-1 {
        left: 60px !important;
    }
    /*Rev end 3.0*/
    /*Rev 4.0*/
    #myImportContactModal .modal-body {
        border-radius: 0 0 20px 20px;
    }
    /*End of Rev 4.0*/

    .mt-15 {
        margin-top: 20px;
    }

    .mb-10 {
        margin-bottom: 5px;
    }

    .mr-5 {
        margin-right: 5px;
    }

    .pmsModal .modal-body {
        padding: 0;
        padding-bottom: 60px;
        z-index: 0;
    }

        .pmsModal .modal-body .col-md-3, .pmsModal .modal-body .col-md-6, .pmsModal .modal-body .col-md-12 {
            padding-right: 10px;
            padding-left: 10px;
        }

    .personal-info {
        background: #f9f9f9;
        padding: 10px 0;
        border-radius: 10px;
        border: 1px dashed #8f8f8f;
        margin-bottom: 30px;
    }

    .pmsModal .modal-body select:not(.btn), .pmsModal .modal-body .form-control {
        border-radius: 6px !important;
        background: #fff !important;
    }

        .pmsModal .modal-body .form-control:focus {
            box-shadow: none !important;
        }

    .company-info {
        background: #f9f9f9 !important;
        padding: 10px 0;
        border-radius: 10px;
        border: 1px dashed #8f8f8f;
        margin-bottom: 30px;
    }

    .others-info {
        background: #f9f9f9 !important;
        padding: 10px 0;
        border-radius: 10px;
        border: 1px dashed #8f8f8f;
        margin-bottom: 30px;
    }

    .section-heading {
        width: 100%;
        margin-top: -24px;
        padding: 0 0 0 10px;
        margin-bottom: 10px;
    }

    .personal-info .section-heading h4 {
        font-size: 14px !important;
        padding: 6px 15px 6px 10px;
        background: #10977e;
        color: #fff;
        /*border-radius: 20px 20px;*/
        display: inline-block;
        margin: 0;
        font-weight: 400;
        position: relative;
    }

    .company-info .section-heading h4 {
        /*font-size: 16px !important;
        padding: 6px 15px;
        background: #971073;
        color: #fff;
        border-radius: 20px 20px;
        display: inline-block;
        margin: 0;
        font-weight: 400;*/

        font-size: 14px !important;
        padding: 6px 15px 6px 10px;
        background: #971073;
        color: #fff;
        /*border-radius: 20px 20px;*/
        display: inline-block;
        margin: 0;
        font-weight: 400;
        position: relative;
    }

    .others-info .section-heading h4 {
        /*font-size: 16px !important;
        padding: 6px 15px;
        background: #974310;
        color: #fff;
        border-radius: 20px 20px;
        display: inline-block;
        margin: 0;
        font-weight: 400;*/

        font-size: 14px !important;
        padding: 6px 15px 6px 10px;
        background: #974310;
        color: #fff;
        /*border-radius: 20px 20px;*/
        display: inline-block;
        margin: 0;
        font-weight: 400;
        position: relative;
    }

    .ml-n15 {
        margin-right: -18px;
        text-align: end;
    }

    /* width */
    .pmsModal .modal-body::-webkit-scrollbar {
        width: 10px;
    }

    /* Track */
    .pmsModal .modal-body::-webkit-scrollbar-track {
        box-shadow: none;
        border-radius: 10px;
        overflow: hidden;
    }

    /* Handle */
    .pmsModal .modal-body::-webkit-scrollbar-thumb {
        background: #b1b1b1;
        border-radius: 10px;
    }

        /* Handle on hover */
        .pmsModal .modal-body::-webkit-scrollbar-thumb:hover {
            background: #8b8b8b;
        }

    #dtDOB_DDD_PW-1, #dtAnniversarydate_DDD_PW-1, #dtNextFollowDate_DDD_PW-1 {
        left: -25px !important;
    }

    #dtDOB_DDD_C_FNP_PW-1, #dtNextFollowDate_DDD_C_FNP_PW-1 {
        left: 45px !important;
    }

    #dtAnniversarydate_DDD_C_FNP_PW-1 {
        left: 30px !important;
        /*top: 0;*/
    }

    body.modal-open {
        overflow: hidden;
    }

    .btn-clr-1 {
        background-color: #313ec7 !important;
    }

    .btn-clr-2 {
        background-color: #ff6a00 !important;
    }

    .btn-clr-3 {
        background-color: #0ead7f !important;
    }

    .btn-clr-4 {
        background-color: #86a113 !important;
    }

    .bg-color-6 {
        background-color: #bd1c68 !important;
    }

        .bg-color-6 .badge {
            background-color: #fff !important;
            padding: 4px 7px;
            color: #111;
        }

    .btn {
        margin-right: 5px;
        padding: 4px 10px;
    }



    #popup_message {
        text-align: center !important;
        padding: 0 !important;
    }

    #popup_container {
        font-size: 14px !important;
    }

    #popup_panel {
        margin-left: 0 !important;
    }

    #myImportModal .modal-body {
        border-radius: 0 0 20px 20px;
    }

    #dtNextFollowDateOutOfRWarn, #dtDOBOutOfRWarn, #dtAnniversarydateOutOfRWarn {
        left: 0 !important;
        top: 60px !important;
    }

    .dxeOutOfRWarn_PlasticBlue {
        font-size: 13px !important;
    }

    .validationDiv {
        margin-bottom: 10px;
    }

    .btn-radius {
        border-radius: 50px;
        /*float:left;*/
    }

    /*.add-btn .btn-icon {
        border-radius: 50px;
        width: 22px;
        height: 22px;
        display: inline-block;
        background: #0d4d91;
        line-height: 22px;
    }

    .add-btn {
        padding: 6px 10px 6px 6px !important;
        background-color: #f8666f !important;
        border-color: #f8666f !important;
    }*/

    .col-md-1, .col-md-2, .col-md-4 {
        padding-right: 8px !important;
        padding-left: 8px !important;
    }

    .calendar-icon {
        right: 14px !important;
    }

    .personal-info .section-heading h4:before {
        content: "";
        position: absolute;
        right: -11px;
        bottom: 0;
        width: 0;
        height: 0;
        border-left: 11px solid #10977e;
        border-top: 12px solid transparent;
        border-bottom: 14px solid transparent;
    }

    .company-info .section-heading h4:before {
        content: "";
        position: absolute;
        right: -11px;
        bottom: 0;
        width: 0;
        height: 0;
        border-left: 11px solid #971073;
        border-top: 12px solid transparent;
        border-bottom: 14px solid transparent;
    }

    .others-info .section-heading h4:before {
        content: "";
        position: absolute;
        right: -11px;
        bottom: 0;
        width: 0;
        height: 0;
        border-left: 11px solid #974310;
        border-top: 12px solid transparent;
        border-bottom: 14px solid transparent;
    }

    /*.personal-info .section-heading h4:after {
        content: "";
        position: absolute;
        left: -1px;
        bottom: 0;
        width: 0;
        height: 0;
        border-left: 1px solid white;
        border-top: 14px solid transparent;
        border-bottom: 14px solid transparent;
    }*/

    .personal-info .section-heading h4 .bulet, .company-info .section-heading h4 .bulet, .others-info .section-heading h4 .bulet {
        position: absolute;
        right: 0px;
        top: 11px;
        background: #fff;
        width: 5px;
        height: 5px;
        border-radius: 50%;
        box-shadow: 0px 0px 1px 2px rgb(26, 128, 44);
    }

    .company-info .section-heading h4 .bulet {
        box-shadow: 0px 0px 1px 2px rgb(81 5 61) !important;
    }

    .others-info .section-heading h4 .bulet {
        box-shadow: 0px 0px 1px 2px rgb(99 39 3) !important;
    }

    /*#btnshow, #ddlAppIds {
        height: 30px;
    }*/

    #ddlAppIds {
        padding: 2px 10px !important;
    }

    #UserSearchModel .modal-dialog, #ReferenceUserSearchModel .modal-dialog {
        width: 42% !important;
    }

    .container {
        width: 88%;
    }

    .only-view {
        cursor: default !important;
    }

    @@media (min-width: 1200px) {
        .container {
            width: 88%;
        }
    }

    /*.transfer-demo {
        width: 640px;
        height: 351px;
    }*/

    .transfer-demo .transfer-double-header {
        display: none;
    }

    .transfer-double-selected-list-main .transfer-double-selected-list-ul .transfer-double-selected-list-li .checkbox-group {
        width: 85%;
    }

    .red {
        color: red;
    }

    input:focus, textarea:focus, select:focus {
        outline: none;
    }

    .transfer-double-content-param {
        border-bottom: 1px solid #4236f5;
        background: #4236f5;
        color: #e8e8e8;
    }

    .top-count-filter {
        display: flex;
        align-items: center;
        justify-content: center;
        padding-bottom: 15px;
        /*background: #f3f3f3;
        border-radius: 15px 15px 0 0;*/
    }

        .top-count-filter .btn {
            height: auto;
            border-radius: 15px;
            padding: 10px 15px 5px 15px;
            margin: 10px 10px 0 10px;
            transition: all .5s;
        }

            .top-count-filter .btn h5 {
                font-size: 16px;
                font-weight: 400;
                margin: 0;
                margin-bottom: 5px !important;
            }

    .filter-count {
        font-size: 30px;
        font-weight: 500;
        letter-spacing: 1px;
    }

    .btn-total {
        background-color: rgb(10 63 166 / 9%) !important;
        display: flex;
        align-items: center;
        padding-right: 0 !important;
        color: #fff;
        padding-top: 0 !important;
        padding-bottom: 0 !important;
        overflow: hidden !important;
    }

    .btn-topic-list {
        /*background-color: #0cd4901a !important;*/
        display: flex;
        /* align-items: center; */
        padding-right: 0px !important;
        padding-left: 0px !important;
        color: #fff;
        /*padding-top: 8px !important;*/
        padding-bottom: 0px !important;
        overflow: hidden !important;
        transition: all .2s ease-in-out;
        height: 34px;
        border: 1px solid #3aa0586e;
        flex-direction: column;
        margin-bottom: 30px;
        height: auto !important;
        width: 100%;
        /*opacity: .6;*/
    }

    .topic-name-list {
        /*padding: 0px 10px 40px;*/
        padding: 5px 10px 5px 65px;
        min-height: 100px;
        /*white-space: break-spaces;*/
        text-align: left;
        display: flex;
        align-items: center;
        width: 100%;
    }

    .btn-topic-list h5 {
        font-size: 16px;
        line-height: 22px;
        color: #fff !important;
        white-space: break-spaces;
        font-weight: 500;
        min-height: 46px;
    }

    .list-topic-name span {
        font-size: 28px;
        font-weight: 600;
    }

    .topic-name-list-icon {
        /*width: 52px;
        height: 48px;
        margin-right: 8px;
        background: #ffffff;
        padding: 5px;
        border-radius: 10px;
        text-align: center;
        line-height: 37px;
        box-shadow: 1px 1px 12px #1111114d;*/
        width: 55px;
        height: 100%;
        margin-right: 8px;
        background: rgb(255 255 255 / 64%);
        padding: 5px 10px;
        border-radius: 0;
        text-align: center;
        line-height: 37px;
        box-shadow: 1px 1px 12px #1111114d;
        position: absolute;
        top: 0;
        left: 0;
        display: flex;
        align-items: center;
    }

    .list-topic-name {
        width: 100%;
    }

    .topic-name-list img {
        width: 35px;
        height: 35px;
        /*margin-right: 8px;
        background: #ffffff30;
        padding: 5px;
        border-radius: 50px;*/
    }

    .btn-topic-list h5 span {
        display: block;
        font-size: 14px;
        font-weight: 500;
    }

    .list-topic-content-count {
        /*background: #069363;*/
        /* width: 100%; */
        padding: 8px 12px;
        white-space: break-spaces;
        text-align: left;
        font-size: 14px;
        /* line-height: 3px; */
        display: flex;
        position: absolute;
        bottom: 0px;
        right: 0;
        background: #f5d834;
        border-radius: 12px 0 0px 0;
        color: #111;
        box-shadow: 1px 1px 20px #11111159;
    }

        .list-topic-content-count span {
            font-size: 32px !important;
            line-height: 24px !important;
            color: #222222 !important;
            font-family: Billy-Ohio;
            font-weight: 600;
            height: 20px;
            letter-spacing: 1px;
            margin-left: 4px;
        }

    .btn-total.active {
        background-color: rgb(10 63 166 / 100%) !important;
    }



        .btn-total.active h5 {
            color: #fff;
        }

    .btn-total:hover {
        background-color: rgb(10 63 166) !important;
        color: #fff !important;
    }

        /* .btn-topic-list:hover {
        background-color: rgb(5 115 70) !important;
        color: #fff !important;
    }*/

        .btn-total:hover h5, .btn-total:hover .filter-count,
        .btn-total-used:hover h5, .btn-total-used:hover .filter-count,
        .btn-total-unused:hover h5, .btn-total-unused:hover .filter-count,
        .btn-topic-list:hover h5, .btn-topic-list:hover .filter-count {
            color: #fff !important;
        }

    .btn-total h5, .btn-total-used h5, .btn-total-unused h5, .btn-topic-list h5 {
        color: #111;
        margin: 0;
    }

    .count-filter-btns .btn {
        margin-left: 6px;
    }

    /*.btn-total .filter-count {
        color: #0D3B8C;
    }*/

    .btn-total .filter-count {
        color: #ffffff;
        background: #054682;
        height: 38PX;
        line-height: 38px;
        min-width: 30px;
        margin-left: 10px;
        padding-left: 5px;
        padding-right: 5px;
        font-family: Billy-Ohio;
        font-weight: 500;
    }

    .btn-topic-list .filter-count {
        color: #ffffff;
        background: #048328c2;
        height: 38PX;
        line-height: 38px;
        min-width: 30px;
        margin-left: 10px;
        padding-left: 5px;
        padding-right: 5px;
        font-family: Billy-Ohio;
        font-weight: 500;
    }

    .btn-total-used {
        background-color: #cbffe4 !important;
        display: flex;
        align-items: center;
        padding-right: 0 !important;
        color: #fff;
        padding-top: 0 !important;
        padding-bottom: 0 !important;
        overflow: hidden !important;
    }

        .btn-total-used.active {
            background-color: #0b8b48 !important;
        }

            .btn-total-used.active h5 {
                color: #fff;
            }

        .btn-total-used:hover {
            background-color: #0b8b48 !important;
            color: #fff !important;
        }

        .btn-total-used .filter-count {
            color: #fff;
            background: #0c8f38;
            height: 38px;
            line-height: 38px;
            min-width: 30px;
            margin-left: 10px;
            padding-left: 5px;
            padding-right: 5px;
            font-family: Billy-Ohio;
            font-weight: 500;
        }

    .btn-total-unused {
        background-color: #ffe1e1 !important;
        display: flex;
        align-items: center;
        padding-right: 0 !important;
        color: #fff;
        padding-top: 0 !important;
        padding-bottom: 0 !important;
        overflow: hidden !important;
    }

        .btn-total-unused.active {
            background-color: #d01616 !important;
        }

            .btn-total-unused.active h5 {
                color: #fff;
            }

        .btn-total-unused:hover {
            background-color: #d01616 !important;
            color: #fff !important;
        }

        .btn-total-unused .filter-count {
            color: #fff;
            background: #d80606;
            height: 38px;
            line-height: 38px;
            min-width: 30px;
            margin-left: 10px;
            padding-left: 5px;
            padding-right: 5px;
            font-family: Billy-Ohio;
            font-weight: 500;
        }

    .add-btn .btn-icon {
        border-radius: 50px;
        width: 21px;
        height: 21px;
        display: inline-block;
        background: #fff;
        line-height: 21px;
        margin-right: 5px;
    }

    .count-filter-btns {
        display: flex;
        align-items: center;
    }

    .add-btn {
        transition: all .4s;
    }

        .add-btn:hover {
            color: #fff;
            background-color: #0e4f23;
            border-color: #0e4f23;
        }

        .add-btn .btn-icon i {
            color: #238945;
        }

    .add-btn {
        background-color: #238945;
        margin-right: 5px;
    }

    .btn {
        border-radius: 8px;
        height: 38px;
        padding-left: 12px;
        padding-right: 12px;
        color: #fff;
    }

        .btn:active, .btn:hover, .btn:focus {
            color: #fff !important;
        }

    .buttons-alignment {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0;
    }

    .show-btn .btn-icon {
        border-radius: 50px;
        width: 26px;
        height: 26px;
        display: inline-block;
        background: #fff;
        line-height: 23px;
        margin-right: 5px;
        color: #054682;
    }

    .quiz-time-btn .btn-icon {
        /* border-radius: 50px; */
        width: 22px;
        height: 18px;
        display: inline-block;
        background: #ffffffd9;
        line-height: 23px;
        margin-right: 2px;
        color: #054682;
        position: absolute;
        left: 0;
        top: 0;
        height: 100%;
        padding: 2px;
    }

    .show-btn {
        background: #054682;
        transition: all .4s;
    }

        .show-btn:hover {
            background: #072743;
        }

    .btn-cancel {
        background-color: #DC0505;
        color: #fff;
    }

    .btn-export {
        background: #e17134;
        color: #fff;
    }

        .btn-export:hover {
            background: #a24716 !important;
            color: #fff;
        }

    .transfer-double, .transfer-double-list-search-input, .transfer-double-selected-list-search-input {
        width: 100%;
    }

    .transfer-double {
        border: none;
    }

    .transfer-double-content {
        padding: 0;
    }

    .transfer-double-content-left, .transfer-double-content-right {
        width: 45%;
        border-radius: 15px;
        overflow: hidden;
    }

    .transfer-double-content-middle {
        width: 10%;
        margin: 0 !important;
        margin-top: 20% !important;
    }

    .transfer-double-list-main .transfer-double-list-ul, .transfer-double-selected-list-main .transfer-double-selected-list-ul {
        padding-left: 5px;
    }

    .transfer-double-list-footer {
        padding-left: 0;
        height: auto;
        background: #FADBFF;
    }



    .btn-select-arrow {
        width: 34px;
        height: 34px;
        line-height: 34px;
        border-radius: 50px;
        color: #fff;
        background: #b4b4b4;
    }

    .btn-arrow-active {
        color: #fff;
        background: #27ac15 !important;
        cursor: pointer;
    }

    .transfer-double-content-param {
        color: #fff;
    }

    .swal2-confirm.swal2-styled {
        border-radius: 12px !important;
    }

    .swal2-styled {
        border-radius: 12px !important;
        padding: 8px 20px !important;
        color: #fff !important;
        font-size: 14px !important;
    }

    .swal2-html-container {
        margin-top: 5px !important;
    }

    div:where(.swal2-container).swal2-backdrop-show, div:where(.swal2-container).swal2-noanimation {
        background: rgb(0 0 0 / 20%) !important;
    }

    @@media screen and (min-width: 768px) {
        #AddContentModal .modal-dialog {
            width: 68% !important;
        }
    }

    @@media screen and (min-width: 768px) {
        #MapQuestionListModal .modal-dialog {
            width: 65% !important;
        }
    }

    @@media screen and (min-width: 768px) {
        #AddQuestionMapModal .modal-dialog {
            width: 68% !important;
        }
    }

    @@media screen and (min-width: 768px) {
        #MappedQuestionsForViewModal .modal-dialog {
            width: 65% !important;
        }
    }


    .mainWraper select[multiple], select[size] {
        height: auto !important;
    }
</style>

<style type="text/css">
    .video-frame {
        width: 100%;
        height: 195px;
        border: 4px solid #f7f7f7;
        box-shadow: 1px 2px 3px rgb(64 64 64 / 40%);
        border-radius: 3px;
        position: relative;
        border-radius: 5px;
        overflow: hidden;
        margin-bottom: 15px;
    }

    .title {
        font-weight: 500;
        font-size: 14px;
        text-align: center;
        margin-bottom: 10px;
        margin-top: 10px;
        background-color: #57aadc;
        color: white;
        /* box-shadow: 1px 2px 4px rgb(72 72 72 / 40%); */
        border-radius: 3px;
        padding: 1px 5px;
    }

    .center {
        display: block;
        margin-left: auto;
        margin-right: auto;
        width: 50%;
    }

    .butHolder {
        position: absolute;
        right: 20px;
        top: 15px;
        display: inline-block;
        background: rgb(230 230 230);
        padding: 4px 10px;
        border-radius: 19px;
        box-shadow: 0px 2px 5px rgb(58 57 57 / 23%);
        transition: all 0.25s ease-in;
        -webkit-transition: all 0.25s ease-in;
        opacity: 0;
        -webkit-transform: translateY(-100px);
        transform: translateY(-100px);
        z-index: 999;
    }

    .video-frame:hover .butHolder {
        transform: translateY(0);
        opacity: 1;
    }

    .butHolder > i, .butHolder > span {
        margin-right: 8px;
        cursor: pointer !important;
    }

        .butHolder > i:hover {
            color: #57aadc;
        }

        .butHolder > span > img {
            max-width: 18px;
        }

    .fileinput-upload {
        display: none !important;
    }


    .video-card {
        border: none;
        border-radius: 15px;
        /*box-shadow: 1px 1px 20px #062e6f21;*/
        margin-bottom: 30px;
        background: #2f90ca;
        cursor: grab;
    }

        .video-card .card-img-top {
            height: 170px;
            object-fit: cover;
            width: 100%;
            object-position: center;
            border-radius: 10px 10px 0 0;
        }

        .video-card .card-body {
            /*text-align: center;*/
            padding: 0 10px 10px;
            /*background: linear-gradient(1deg, #beefff, #ffffff);*/
            /*display: flex;
            align-items: flex-start;*/
            /*justify-content: space-between;*/
        }

        .video-card .card-title {
            font-size: 15px;
            font-weight: bold;
            margin-bottom: 5px;
            line-height: 22px;
            min-height: 45px;
            margin-top: 5px;
            color: #fff;
            /*width: 80%;*/
            padding-right: 10px;
            display: -webkit-box; /* Required for webkit-based browsers */
            -webkit-box-orient: vertical; /* Set box orientation to vertical */
            -webkit-line-clamp: 2; /* Limit the content to 2 lines */
            overflow: hidden; /* Hide the overflow content */
            text-overflow: ellipsis; /* Add ellipses at the end of the text */
            max-width: 300px; /* Set max width to control text width */
            line-height: 1.5em; /* Adjust line height */
            max-height: 3em; /* Control the max height based on 2 lines of text */

            cursor: pointer;
        }

    .content-title-div .tooltip {
        min-width: 150px;
    }


    .card-body-content {
        width: 100%;
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

    .video-card .action-dropdown {
        width: 20%;
    }

    .video-card .card-text {
        margin-bottom: 15px;
    }

    .video-card .card-buttons button {
        margin: 5px;
    }

    .video-card .badge-success {
        background-color: #28a745;
    }

    .card-buttons .btn {
        background: transparent;
        box-shadow: none;
        border: none;
        padding: 0;
        width: 35px;
    }

        .card-buttons .btn img {
            width: 100%;
        }

    .content-listing-part {
        margin-top: 10px;
        margin-bottom: 20px;
    }

    /*#btnSearch, #btnShowAll {
        display: inline-block;
        margin-top: 10px;
    }*/

    .content-search-box {
        display: flex;
        align-items: center;
        justify-content: flex-start;
    }

        .content-search-box #searchInput-content {
            width: 60%;
            height: 38px;
            border-radius: 8px;
        }

        .content-search-box #btnSearch {
            border-radius: 0 6px 6px 0;
        }


    .pagination {
        display: flex;
        justify-content: flex-end;
        padding: 0;
        margin: 5px 0;
        list-style: none;
        border-radius: 4px;
    }

    .topic-list-pagination {
        display: flex;
        justify-content: center;
        padding: 0;
        margin: 5px 0;
        list-style: none;
        border-radius: 4px;
    }

    .pagination li {
        display: inline;
        margin: 0 2px;
    }

        .pagination li a {
            color: #000;
            background-color: #f5f5f5;
            border: 1px solid #ddd;
            padding: 6px 12px;
            text-decoration: none;
            border-radius: 4px;
        }

    .topic-list-pagination button {
        color: #000;
        background-color: #f5f5f5;
        border: 1px solid #ddd;
        padding: 6px 12px;
        text-decoration: none;
        border-radius: 4px;
        margin: 0 2px;
    }

    .pagination li.active a {
        color: #fff;
        background-color: #051f7b;
        border-color: #051f7b;
    }

    .topic-list-pagination button.active {
        color: #fff;
        background-color: #051f7b;
        border-color: #051f7b;
    }

    .pagination li.disabled a {
        color: #777;
        background-color: #fff;
        border-color: #ddd;
        cursor: not-allowed;
    }

    .topic-list-pagination button[disabled] {
        color: #777;
        background-color: #fff;
        border-color: #ddd;
        cursor: not-allowed;
    }

    .active-checkbox {
        margin-top: 12px;
    }

    .btn.fileinput-remove {
        margin-left: 0 !important;
    }

    .btn-file, .fileinput-remove {
        height: 45px;
    }

    .file-caption-main .kv-fileinput-caption {
        border-radius: 6px 0 0 6px !important;
    }


    .tooltip-container {
        position: relative;
        display: inline-block;
    }

    .tooltip {
        visibility: hidden;
        /*width: 140px;*/
        background-color: #0d8f24;
        color: #fff;
        text-align: center;
        border-radius: 10px;
        padding: 8px 10px;
        position: absolute;
        z-index: 1;
        bottom: 115%;
        left: 50%;
        transform: translateX(-50%);
        opacity: 0;
        transition: opacity 0.3s;
    }

    .card-status .tooltip {
        width: 130px !important;
        background-color: #4f0d8f;
    }

    .tooltip::after {
        content: '';
        position: absolute;
        top: 100%;
        left: 50%;
        margin-left: -10px;
        border-width: 10px;
        border-style: solid;
        border-color: #0d8f24 transparent transparent transparent;
    }

    .card-status .tooltip::after {
        border-color: #4f0d8f transparent transparent transparent !important;
    }

    .tooltip-container:hover .tooltip {
        visibility: visible;
        opacity: 1;
    }

    .icon {
        width: 50px;
        height: 50px;
    }

    .file-preview {
        border: none;
        padding: 0;
        margin-bottom: 15px;
    }

    .file-drop-zone {
        border: 2px dashed #aaa;
        background: #f4f4f4;
    }

        .file-drop-zone.file-highlighted {
            border: 2px dashed #588dcd !important;
            background: #eeedff !important;
        }

    .krajee-default.file-preview-frame {
        background: #fff !important;
    }

    .flex-label a {
        /*text-decoration: underline;*/
        color: #098941;
    }

        .flex-label a i {
            background: #098941;
            color: #fff;
            width: 16px;
            height: 16px;
            text-align: center;
            line-height: 17px;
            font-size: 12px;
            border-radius: 50%;
            margin-right: 3px;
        }

    .flex-label {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .modal-footer, .pmsModal .modal-header {
        /*background: linear-gradient(92deg, #1eccd9, #062a75) !important;*/
        background: transparent !important;
    }

    .pmsModal .modal-content {
        overflow: hidden;
    }

    .modal-backdrop.in {
        opacity: .8;
    }

    /*fieldset {
        display: none;
    }

    .step {
        display: block;
    }*/

    /*form styles*/
    #msform {
        text-align: center;
        position: relative;
        margin-top: 30px;
    }

        #msform fieldset {
            /*background: white;*/
            border: 0 none;
            border-radius: 8px;
            /*box-shadow: 0 0 15px 1px rgba(0, 0, 0, 0.4);
            padding: 20px 30px;
            box-sizing: border-box;*/
            width: 80%;
            margin: 0 10%;
            /*stacking fieldsets above each other*/
            position: relative;
        }

            /*Hide all except first fieldset*/
            #msform fieldset:not(:first-of-type) {
                display: none;
            }

        /*inputs*/


        /*buttons*/
        #msform .action-button {
            width: 135px;
            background: #2098ce;
            font-weight: 500;
            color: white;
            border: 0 none;
            border-radius: 25px;
            cursor: pointer;
            padding: 10px 5px;
            margin: 10px 5px;
            transition: all .3s ease-in-out;
        }

            #msform .action-button img, .upload-previous img {
                width: 20px;
                margin-right: 5px;
            }

            #msform .action-button:hover, #msform .action-button:focus {
                /*box-shadow: 0 0 0 2px white, 0 0 0 3px #2098ce;*/
                background: #0a5678;
            }

        #msform .action-button-previous {
            width: 130px;
            background: #e78d20;
            font-weight: 500;
            color: white;
            border: 0 none;
            border-radius: 25px;
            cursor: pointer;
            padding: 10px 5px;
            margin: 10px 5px;
        }

            #msform .action-button-previous:hover, #msform .action-button-previous:focus {
                box-shadow: 0 0 0 2px white, 0 0 0 3px #aCbEd0;
            }

    /*headings*/
    .fs-title {
        font-size: 18px;
        text-transform: uppercase;
        color: #2C3E50;
        margin-bottom: 10px;
        letter-spacing: 2px;
        font-weight: bold;
    }

    .fs-subtitle {
        font-weight: normal;
        font-size: 13px;
        color: #666;
        margin-bottom: 20px;
    }

    /*progressbar*/
    #progressbar {
        margin-bottom: 5px;
        overflow: hidden;
        /*CSS counters to number the steps*/
        counter-reset: step;
    }

        #progressbar li {
            list-style-type: none;
            color: #666;
            font-size: 9px;
            width: 50%;
            float: left;
            position: relative;
            letter-spacing: 1px;
            text-align: center;
        }

            #progressbar li h5 {
                font-size: 16px;
                color: #111;
                margin-top: 2px;
            }

            #progressbar li span {
                font-size: 12px;
            }

            #progressbar li.active h5, #progressbar li.active span {
                color: #2056ce;
            }

            #progressbar li:before {
                content: counter(step);
                counter-increment: step;
                width: 30px;
                height: 30px;
                line-height: 30px;
                display: block;
                font-size: 15px;
                color: #333;
                background: #dbdbdb;
                border-radius: 40px;
                margin: 0 auto 10px auto;
            }

            /*progressbar connectors*/
            #progressbar li:after {
                content: '';
                width: 100%;
                height: 3px;
                background: #dbdbdb;
                position: absolute;
                left: 0%;
                top: 14px;
                z-index: -1; /*put it behind the numbers*/
            }

            #progressbar li:first-child:after {
                /*connector not needed before the first step*/
                /*content: none;*/
            }

            /*marking active/completed steps blue*/
            /*The number of the step and the connector before it = blue*/
            #progressbar li.active:before, #progressbar li.active:after {
                background: #2056ce;
                color: white;
            }

    /*.ftr-btns
    {
        display: flex;
        align-items:center;
        justify-content: center;
    }*/


    .example {
        top: 50%;
        transform: translateY(-50%);
    }

    .btn-toggle {
        margin: 0 5px;
        padding: 0;
        position: relative;
        border: none;
        height: 28px;
        width: 57px;
        border-radius: 1.5rem;
        color: #6b7381;
        background: #bdc1c8;
    }

        .btn-toggle:focus,
        .btn-toggle.focus,
        .btn-toggle:focus.active,
        .btn-toggle.focus.active {
            outline: none;
        }

        .btn-toggle:before,
        .btn-toggle:after {
            line-height: 1.5rem;
            width: 4rem;
            text-align: center;
            font-weight: 600;
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 2px;
            position: absolute;
            bottom: 0;
            transition: opacity 0.25s;
        }

        .btn-toggle:before {
            content: 'Off';
            left: -4rem;
        }

        .btn-toggle:after {
            content: 'On';
            right: -4rem;
            opacity: 0.5;
        }

        .btn-toggle > .handle {
            position: absolute;
            top: 4px;
            left: 4px;
            width: 20px;
            height: 20px;
            border-radius: 1.125rem;
            background: #fff;
            transition: left 0.25s;
        }

        .btn-toggle.active {
            transition: background-color 0.25s;
        }

            .btn-toggle.active > .handle {
                left: 33px;
                transition: left 0.25s;
            }

            .btn-toggle.active:before {
                opacity: 0.5;
            }

            .btn-toggle.active:after {
                opacity: 1;
            }

        .btn-toggle.btn-sm:before,
        .btn-toggle.btn-sm:after {
            line-height: 28px;
            color: #fff;
            letter-spacing: 0.75px;
            left: 8px;
            width: 44px;
            font-size: 12px;
        }

        .btn-toggle.btn-sm:before {
            text-align: right;
        }

        .btn-toggle.btn-sm:after {
            text-align: left;
            opacity: 0;
        }

        .btn-toggle.btn-sm.active:before {
            opacity: 0;
        }

        .btn-toggle.btn-sm.active:after {
            opacity: 1;
        }




        .btn-toggle:before,
        .btn-toggle:after {
            color: #6b7381;
        }

        .btn-toggle.active {
            background-color: #29b5a8;
        }

    .thumbnail-box {
        width: 100%;
        height: 216px;
        border: 1px solid #aaa;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
    }

        .thumbnail-box .btn img {
            width: 24px;
            margin-right: 2px;
        }

        .thumbnail-box .btn {
            margin: 5px 0;
        }

    .text-muted {
        color: #494949 !important;
        font-size: 12px;
        font-weight: 600;
    }

    .action-dropdown .dropdown-toggle {
        background: #c82bbe;
        width: 36px;
        height: 36px;
        line-height: 36px;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        margin-left: auto;
        transition: all .3s;
    }

        .action-dropdown .dropdown-toggle:hover, .action-dropdown .dropdown-toggle:focus {
            background: #a7119e;
        }

        .action-dropdown .dropdown-toggle img {
            width: 24px;
        }

    .action-dropdown .dropdown-menu {
        right: 0;
        left: auto;
        border-radius: 10px;
        border: none;
        box-shadow: 1px 1px 10px #11111136;
    }

        .action-dropdown .dropdown-menu li {
            border-bottom: 1px solid #efefef;
        }

            .action-dropdown .dropdown-menu li:last-child {
                border: none;
            }

        .action-dropdown .dropdown-menu > li > a {
            font-size: 16px;
            padding: 6px 20px;
            cursor: pointer;
        }

    #btnShowAll img {
        width: 20px;
        margin-right: 5px;
    }

    .card-status {
        background: #dcdcdc;
        color: #000;
        padding: 5px 10px;
        border-radius: 6px;
        display: inline-block;
        font-size: 12px;
        padding-left: 18px;
        background: rgb(198, 198, 198);
        background: linear-gradient(0deg, rgba(198, 198, 198, 1) 0%, rgba(220, 220, 220, 1) 100%);
    }

        .card-status.published {
            /*background: #63ff74 !important;*/
            /*color: #fff;*/
            background: rgb(31, 207, 50);
            background: linear-gradient(0deg, rgba(31, 207, 50, 1) 0%, rgba(110, 255, 125, 1) 100%);
        }

    .file-caption-main {
        display: none;
    }

    #msform .action-button {
        position: absolute;
        right: 40%;
    }

    .upload-next {
        right: 0;
        bottom: -51px;
    }

    #msform .action-button-previous {
        position: absolute;
        /*right: 40%;*/
        left: 32%;
        bottom: -51px;
        height: 40px;
    }

    .upload-exit-btn {
        position: absolute;
        /*right: 34%;
        bottom: 20px;*/
        right: 26%;
        bottom: 20px;
        border-radius: 50px;
        font-weight: 500;
        color: white;
        border: 0 none;
        border-radius: 25px;
        cursor: pointer;
        padding: 10px 20px;
        min-height: 40px;
    }

    .newposition-btn {
        right: 34% !important;
    }

    .upload-btn {
        padding: 8px 15px;
        border: 2px solid #111;
        color: #111;
        border-radius: 10px;
        cursor: pointer;
    }

        .upload-btn img {
            width: 20px;
        }

    .custom-file {
        text-align: center;
        position: relative;
    }

    .delete-option:hover {
        background-color: red !important;
        color: #fff !important;
    }

    .unpublished, .published {
        position: relative;
        height: 35px;
        border-radius: 40px;
        line-height: 24px;
        box-shadow: 1px 1px 15px #11111152;
    }

        .published:before {
            content: '\f00c';
            position: absolute;
            left: 3px;
            top: 4px;
            font-family: 'FontAwesome';
            font-size: 13px;
            font-weight: 500;
        }

        .unpublished:before {
            content: '\f00d';
            position: absolute;
            left: 4px;
            top: 4px;
            font-family: 'FontAwesome';
            font-size: 13px;
            font-weight: 500;
        }

    .add-new-btn {
        -webkit-animation: pulse 1s;
        animation: pulse-afct 1s;
        box-shadow: 0 0 0 20px transparent;
        -webkit-animation-iteration-count: infinite;
        animation-iteration-count: infinite;
    }

    @@-webkit-keyframes pulse-afct {
        0% {
            box-shadow: 0 0 0 0 #164f929e;
        }
    }

    @@keyframes pulse-afct {
        0% {
            box-shadow: 0 0 0 0 #164f929e;
        }
    }

    #AddQuestionMapModal .modal-title {
        color: #111;
        font-size: 24px;
    }

    #AddQuestionMapModal .modal-header {
        margin-bottom: 10px;
        border-bottom: 1px solid #d5d5d5;
    }

    .map-content-title {
        font-size: 20px;
        margin-bottom: 10px;
    }

    #AddQuestionMapModal .modal-content,
    #AddTopicModal .modal-content,
    #AddContentModal .modal-content,
    #quizTimeModal .modal-content,
    #AddQuestionModal .modal-content,
    #ContentPlayModal .modal-content {
        background: linear-gradient(1deg, #cff3ff, #ffffff);
        overflow: visible !important;
    }

    #AddQuestionMapModal .modal-body, #AddTopicModal .modal-body {
        padding-bottom: 0px;
    }

    .modal-footer {
        padding: 15px 10px 15px;
        border-top: 1px solid #c0c0c0;
    }

    .transfer-double {
        background: transparent;
    }

    .transfer-double-content-left, .transfer-double-content-right {
        background: #fff;
        box-shadow: 1px 1px 10px #1111112e;
    }

    .transfer-double-content-middle {
        display: flex;
        align-items: center;
        flex-direction: column;
        margin-top: 13% !important;
    }

    #MapQuestionListModal .modal-title,
    #AddTopicModal .modal-title,
    #MappedQuestionsForViewModal .modal-title,
    #quizTimeModal .modal-title,
    #AddQuestionModal .modal-title {
        color: #111;
        font-size: 20px;
    }

    #MapQuestionListModal .modal-header,
    #AddTopicModal .modal-header,
    #MappedQuestionsForViewModal .modal-header,
    #quizTimeModal .modal-header,
    #AddQuestionModal .modal-header {
        margin-bottom: 10px;
        border-bottom: 1px solid #d5d5d5;
    }

    #MapQuestionListModal .modal-body {
        padding-bottom: 20px;
        padding-left: 10px;
        padding-right: 10px;
    }
</style>

<style>
    /* The switch - the box around the slider */
    .switch {
        position: relative;
        display: inline-block;
        width: 54px;
        height: 28px;
        margin-bottom: 0;
    }

        /* Hide default HTML checkbox */
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    /* The slider */
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 20px;
            width: 20px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

    input:checked + .slider {
        background-color: #6535f6;
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
        border-radius: 34px;
    }

        .slider.round:before {
            border-radius: 50%;
        }
</style>

<style>
    #filePreview {
        /*margin-top: 10px;*/
    }

    .preview-img {
        max-width: 100%;
        max-height: 300px; /* Adjust as needed */
    }

    .preview-video {
        max-width: 100%;
    }

    #filePreview video {
        width: 100%;
        height: 300px;
    }

    .file-preview .fileinput-remove {
        top: -40px;
        right: -5px;
        line-height: 10px;
    }

    #filePreview video {
        position: absolute;
        width: 100%;
        height: 215px;
        top: 0;
        left: 0;
        overflow: hidden;
        border-radius: 12px;
        box-shadow: 1px 1px 10px #11111136;
        background: #fff;
    }

    #filePreviewicon img {
        position: absolute;
        width: 100%;
        height: 215px;
        top: 0;
        left: 0;
        overflow: hidden;
        border-radius: 12px;
        box-shadow: 1px 1px 10px #11111136;
        background: #fff;
    }

    .flex-toggle {
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .flex-toggle label {
            margin-bottom: 0;
            margin-right: 5px;
        }

    .topic-list {
        display: flex;
        flex-wrap: wrap;
        padding: 0;
    }

        .topic-list .btn {
            margin-bottom: 0px;
            margin-right: 0px;
            position: relative;
            border: none;
            padding-top: 0 !important;
        }

    .mLoader {
        position: fixed;
        top: 0;
        bottom: 0;
        width: 100%;
        height: 100vh;
        background: rgb(255 255 255 / 95%);
        z-index: 99999;
        left: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        opacity: .8;
        flex-direction: column;
    }

        .mLoader h4 {
            font-size: 30px;
            color: #111;
            margin-top: 20px;
        }

    .hide {
        display: none;
    }

    .video-card-img {
        height: 160px;
        width: 100%;
        background-position: center !important;
        background-size: cover !important;
        background-repeat: no-repeat !important;
        margin-bottom: 10px;
        border-radius: 10px 10px 0 0;
    }

    /*.video-card-img img {
            width: 100%;
        }*/

    #btnBackToTopicList {
        background: #b67508 !important;
    }

    .highlight .video-card {
        background-color: #b9d9ff;
    }

    .input-group {
        width: 100%;
    }

    .search-icon {
        position: absolute;
        left: 0;
        top: 10px;
        width: 24px;
        text-align: center;
        color: #9a9a9a;
    }

    .topic-search-input {
        padding-left: 27px;
        border-radius: 5px !important;
        box-shadow: 1px 1px 10px #11111126;
        height: 38px;
    }

    .sequence-number {
        position: absolute;
        top: 15px;
        right: 15px;
        background: #54ffd8;
        padding: 5px 15px;
        border-radius: 25px 0 0 25px;
        color: #06485e;
        font-size: 20px;
        font-weight: 500;
        box-shadow: -1px 1px 10px #11111152;
    }

        .sequence-number i {
            margin-right: 2px;
        }

    .topic-sequence-number {
        position: absolute;
        top: 5px;
        right: 0;
        background: #54ffd8;
        padding: 5px 10px;
        border-radius: 25px 0 0 25px;
        color: #06485e;
        font-size: 16px;
        font-weight: 500;
        box-shadow: -1px 1px 10px #11111152;
    }

        .topic-sequence-number i {
            margin-right: 2px;
        }


    #videoContainer .col-md-3 {
        width: 20% !important;
    }

    .card-status input {
        position: absolute;
        z-index: 2;
        width: 100%;
        top: 0;
        left: 0;
        height: 27px;
        cursor: pointer;
        margin-top: 0;
    }

    .topic-not-found, #noDataMessage {
        text-align: center;
        width: 100%;
        font-size: 20px;
        font-weight: 500;
        color: #7e7e7e;
    }

    .add-question-btn {
        font-weight: 500;
        color: white;
        border: 0 none;
        border-radius: 25px;
        cursor: pointer;
        padding: 10px 20px;
        background: #6d1e97;
        position: absolute;
        left: 21%;
        transition: all .3s ease-in-out;
    }

        .add-question-btn img, .upload-exit-btn img {
            width: 20px;
            /* height: 26px; */
            margin-right: 5px;
        }

        .add-question-btn:hover {
            background: #8a4e04;
        }

    .file-name-icon {
        word-wrap: break-word;
    }

    .krajee-default.file-preview-frame {
        width: 95%;
    }

        .krajee-default.file-preview-frame .kv-file-content {
            width: 100%;
        }

    #gridQuestionMapGridList {
        width: 99% !important;
    }

    #gridMappedQuesForView {
        width: 100% !important;
    }

    #MappedQuestionsForViewModal .modal-body {
        padding-bottom: 0 !important;
        padding-left: 10px !important;
        padding-right: 10px !important;
    }

    .dxgvHSDC {
        padding-right: 0 !important;
    }

        .dxgvHSDC > div {
            width: 100% !important;
        }

    .dashboardHighlightWrap {
        overflow: visible;
    }

    #topic-list-search {
        width: 300px;
        margin-left: 30px;
    }

    .list-topic-content-count img {
        width: 19px;
        margin-right: 5px;
    }

    .select2-container {
        width: 100% !important;
    }

    .select2-container--default .select2-selection--single {
        height: 34px;
        /*padding: 6px 12px;*/
        font-size: 14px;
        border: 1px solid #ccc;
        border-radius: 6px;
    }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 34px;
        }

        .select2-container--default .select2-selection--single .select2-selection__arrow {
            height: 32px;
            width: 23px;
        }

            .select2-container--default .select2-selection--single .select2-selection__arrow b {
                border-width: 7px 5px 0 5px;
            }

        .select2-container--default .select2-selection--single .select2-selection__rendered:focus-visible,
        .select2-container--default .select2-selection--single {
            box-shadow: none;
            outline: none;
        }

    /*.time-picker {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
        border-radius: 10px;
        background-color: #ffffff;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    #timeDurationPicker {
        padding: 10px;
        border: 2px solid #333;
        border-radius: 5px;
        background-color: #e0e0e0;
        font-size: 16px;
        text-align: center;
    }*/

    .quiz-time {
        margin-top: 10px;
    }

        .quiz-time label {
            color: #fff;
            margin-bottom: 0;
        }

    .bdp-input {
        background: #e0ffe6;
        border-radius: 10px;
        display: inline-block;
        box-shadow: 1px 1px 10px #0737716e;
    }

    .bdp-block span#bdp-hours,
    .bdp-block span#bdp-minutes,
    .bdp-block span#bdp-seconds {
        font-weight: 600;
        color: #c82bbe;
    }

    .w-100 {
        width: 100%;
    }

    .quiz-time-btn {
        background: #865d0c;
        padding: 4px 12px;
        height: 35px;
        font-size: 13px;
        position: relative;
        overflow: hidden;
        /*padding-left: 26px;*/
        margin-right: 0;
        border-radius: 30px;
        background: rgb(124, 63, 6);
        background: linear-gradient(0deg, rgb(138 71 5) 0%, rgb(204 130 8) 100%);
        box-shadow: 1px 1px 15px #1111112e;
        line-height: 15px;
        font-weight: 600;
    }

    .publish-quiztime-part {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .qz-time-view {
        font-size: 12px;
        display: block;
        font-weight: 400;
    }

    #quizTimeModal .modal-body {
        padding-bottom: 0 !important;
    }

    .mb-20 {
        margin-bottom: 20px;
    }

    .quiz-time-btn:active {
        background: linear-gradient(0deg, rgb(138 71 5) 0%, rgb(204 130 8) 100%);
    }

    .content-title-div {
        width: 80%;
    }

    .save-button .btn-icon, .cancel-catg .btn-icon {
        border-radius: 50px;
        width: 21px;
        height: 21px;
        display: inline-block;
        background: #fff;
        line-height: 20px;
        margin-right: 5px;
    }

        .save-button .btn-icon img {
            color: #238945;
            width: 14px;
        }

        .cancel-catg .btn-icon img {
            color: #DC0505;
            width: 16px;
        }

    small {
        font-size: 12px !important;
        font-weight: 400 !important;
    }

    #AddQuestionModal .modal-dialog {
        width: 70%;
    }

    #AddQuestionModal .modal-body {
        padding: 0 30px;
    }

    .delete-col {
        width: 4%;
        padding: 10px 10px;
    }

    .option-col {
        width: 74%;
        padding: 10px 10px;
    }

    .number-col {
        width: 12%;
        padding: 10px 10px;
    }

    .correct-col {
        width: 10%;
        padding: 10px 10px;
    }

    .ans-option {
        display: flex;
        align-items: center;
    }

    .save-exit-btn {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /*.save-exit-btn button {
            margin: 0 10px 15px;
        }*/

    /*.backBox {
        padding: 15px !important;
    }*/

    .option-part {
        background: #ffffffb8;
        padding: 10px;
        border-radius: 10px;
        border: 1px solid #ccc;
    }

    /*.backBox {
        background: linear-gradient(1deg, #cff3ff, #ffffff);
    }*/

    .form-control:focus {
        box-shadow: none;
    }

    .delete-col a img {
        width: 25px;
        transition: all .3s ease-in-out;
    }

    .delete-col a:hover img {
        transform: scale(1.2);
    }

    #btnSave .btn-icon, .cancel-catg .btn-icon {
        border-radius: 50px;
        width: 21px;
        height: 21px;
        display: inline-block;
        background: #fff;
        line-height: 20px;
        margin-right: 5px;
    }

        #btnSave .btn-icon img {
            color: #238945;
            width: 14px;
        }

    #btnSave.btn-warning .btn-icon img {
        color: #e08d19;
        width: 14px;
    }

    .cancel-catg .btn-icon img {
        color: #DC0505;
        width: 16px;
    }

    #btnSaveNew .btn-icon, .cancel-catg .btn-icon {
        border-radius: 50px;
        width: 21px;
        height: 21px;
        display: inline-block;
        background: #fff;
        line-height: 20px;
        margin-right: 5px;
    }

        #btnSaveNew .btn-icon img {
            color: #238945;
            width: 14px;
        }

    #btnSaveNew.btn-warning .btn-icon img {
        color: #e08d19;
        width: 14px;
    }
</style>



<script>


    var Is_PageLoad = "Ispageload";

    //var urlKeys = getUrlVars();

    function getUrlVars() {
        var vars = [], hash;
        var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        for (var i = 0; i < hashes.length; i++) {
            hash = hashes[i].split('=');
            vars.push(hash[0]);
            vars[hash[0]] = hash[1];
        }
        return vars;
    }



    var Is_ContentId = "0";
    var Is_ContentTitle = "";

    var Is_TopicId = "0";
    var Is_TopicTitle = "";


    //$(document).ready(function () {

    //    $("#fileupload").fileinput();

    //    // with plugin options
    //    $("#fileupload").fileinput({ 'showUpload': false, 'previewFileType': 'any' });
    //});

    function showLoader() {
        $('#gmap-loader').removeClass('hide');
    }

    function hideLoader() {
        $('#gmap-loader').addClass('hide');
    }

    var allVideosData = [];
    var filteredData = [];
    var currentPage = 1;
    var itemsPerPage = 12;
    var activeFilter = 'all';

    $(function () {



        //$('body').on('click', '#btnshow', function () {

        //    var flag = true;

        //    Is_PageLoad = "1";


        //    setTimeout(function () {
        //        $.ajax({
        //            type: "POST",
        //            url: "/LMSContentUpload/GetContentGridListData",

        //            async: false,
        //            contentType: "application/json; charset=utf-8",
        //            dataType: "json",
        //            success: function (data) {
        //                if (data.length > 0) {
        //                    $("#btnShowTotalContents").text(data[0].cnt_TotalContents);
        //                    $("#btnShowActiveContents").text(data[0].cnt_ActiveContents);
        //                    $("#btnShowInactiveContents").text(data[0].cnt_InactiveContents);
        //                }



        //            },
        //            error: function (response) {
        //                jAlert("Please try again later");
        //            }
        //        });
        //    }, 1000)

        //});

        /*document.addEventListener('DOMContentLoaded', function () {*/
            //var allVideosData = [];
            //var filteredData = [];
            //var currentPage = 1;
            //var itemsPerPage = 8;
            //var activeFilter = 'all';

            $(document).ready(function() {
                $("#btnShowTotalContents").hide();
                $("#btnShowActiveContents").hide();
                $("#btnShowInactiveContents").hide();
                $("#btnBackToTopicList").hide();
                $("#btnshow").show();
                $("#divTopicName").hide();
                $("#spTopicName").html('');

                $('body').on('click', '#btnshow', function () {

                    $.ajax({
                        url: '/LMSContentUpload/GetTopicListForBoxData',
                        method: 'GET',
                        success: function (data) {
                            const topicsPerPage = 12;
                            let currentPage = 1;
                            /*let filteredData = data;*/
                            filteredData = data;

                            $('#searchPanel').hide();
                            $('#contentListing').hide();
                            $("#divTopicList").show();
                            $("#divTopicName").show();
                            $("#pagination").show();
                            $("#topic-list-search").show();
                            $("#spTopicName").html('Topics');


                            $("#btnShowTotalContents").hide();
                            $("#btnShowActiveContents").hide();
                            $("#btnShowInactiveContents").hide();
                            $("#btnBackToTopicList").hide();


                            /*Rev Sanchita*/

                            var divTopicList = $('#divTopicList');

                            // Initialize SortableJS
                            new Sortable(divTopicList[0], {
                                swap: true, // Enable swap plugin
                                swapClass: 'highlight',
                                animation: 150,

                                onEnd: function (evt) {

                                    var newIndex = evt.newIndex;
                                    var oldIndex = evt.oldIndex;

                                    var TopicId = filteredData[oldIndex].TOPIC_ID;

                                    var TopicIdOld = filteredData[oldIndex].TOPIC_ID;
                                    var TopicSeqOld = filteredData[oldIndex].TOPIC_SEQ;

                                    var TopicIdNew = filteredData[newIndex].TOPIC_ID;
                                    var TopicSeqNew = filteredData[newIndex].TOPIC_SEQ;

                                    if (TopicIdOld != TopicIdNew) {
                                        $.ajax({
                                            type: "POST",
                                            url: "/LMSContentUpload/UpdateTopicSequence",
                                            data: JSON.stringify({ 'TopicIdOld': TopicIdOld, 'TopicSeqOld': TopicSeqOld, 'TopicIdNew': TopicIdNew, 'TopicSeqNew': TopicSeqNew }),
                                            async: false,
                                            contentType: "application/json; charset=utf-8",
                                            dataType: "json",
                                            success: function (response) {
                                                console.log(response);
                                                if (response == "1") {
                                                    Swal.fire({
                                                        icon: 'success',
                                                        title: 'Success',
                                                        text: 'Topic Sequence updated successfully.'
                                                    }).then(() => {

                                                        $("#ddlTopic").val(0).trigger('change');
                                                        $("#hdnTopicID").val(0);
                                                        $("#btnshow").show();

                                                        $('#searchInput').val('');

                                                        btnshow.click();

                                                    });
                                                    //GridShow();


                                                }
                                                else {

                                                    Swal.fire({
                                                        icon: 'error',
                                                        title: 'Error',
                                                        text: 'Error in Play Sequence Update.'
                                                    });
                                                    //GridShow();

                                                }

                                            },
                                            error: function (response) {
                                                console.log(response);
                                                Swal.fire({
                                                    icon: 'error',
                                                    title: 'Error',
                                                    text: 'An error occurred in Play Sequence update.'
                                                });
                                            }
                                        });
                                    }


                                }


                            });
                            /*End of Rev Sanchita*/

                            function renderTopics(topics) {
                                var videoContainer = $('#videoContainer');
                                videoContainer.empty();

                                $('.topic-list').empty();

                                var colors = ['#07AF82', '#3c6e87', '#a3804b', '#8b3c73', '#4f7c0d', '#914a5a', '#6F0CD9', '#43469c'];
                                var icons = [
                                    '../../../assests/images/topic-icon-1.svg',
                                    '../../../assests/images/topic-icon-2.svg',
                                    '../../../assests/images/topic-icon-3.svg',
                                    '../../../assests/images/topic-icon-4.svg',
                                    '../../../assests/images/topic-icon-5.svg',
                                    '../../../assests/images/topic-icon-6.svg',
                                    '../../../assests/images/topic-icon-7.svg',
                                    '../../../assests/images/topic-icon-8.svg',
                                ];

                                var colorIndex = 0;
                                var iconIndex = 0;

                                //function hexToRgba(hex, opacity) {
                                //    var bigint = parseInt(hex.slice(1), 16);
                                //    var r = (bigint >> 16) & 255;
                                //    var g = (bigint >> 8) & 255;
                                //    var b = bigint & 255;

                                //    return 'rgba(' + r + ',' + g + ',' + b + ',' + opacity + ')';
                                //}

                                topics.forEach(function (topic) {
                                    var color = colors[colorIndex];
                                    var icon = icons[iconIndex];
                                    colorIndex = (colorIndex + 1) % colors.length;
                                    iconIndex = (iconIndex + 1) % icons.length;
                                    /*var rgbaColor = hexToRgba(color, 0.8);*/

                                    var box = `
                                        <div class="col-md-3 mb-4">
                                            <button type="button" class="btn btn-topic-list btn-radius topic-btn" id="${topic.TOPIC_ID}" onclick="ShowContentListiing(id,'${topic.TOPIC_NAME}')" style="background-color: ${color};" data-color="${color}">
                                                <p class="topic-sequence-number">#${topic.TOPIC_SEQ}</p>
                                                <div class="topic-name-list">
                                                    <div class="topic-name-list-icon"><img src="${icon}" alt=""></div>
                                                    <div class="list-topic-name">

                                                        <span>${topic.TOPIC_CONTENT_COUNT} <small>Content(s)</small></span>
                                                        <h5>${topic.TOPIC_NAME}</h5>
                                                    </div>
                                                </div>

                                            </button>
                                        </div>
                                    `;
                                    $('.topic-list').append(box);
                                });

                                $('.topic-list').on('mouseenter', '.topic-btn', function () {
                                    var color = $(this).data('color');
                                    $(this).css('background-color', color);
                                }).on('mouseleave', '.topic-btn', function () {
                                    var color = $(this).data('color');
                                    /*var rgbaColor = hexToRgba(color, 0.8);
                                    $(this).css('background-color', rgbaColor);*/
                                });
                            }

                            function showPage(page) {
                                const startIndex = (page - 1) * topicsPerPage;
                                const endIndex = startIndex + topicsPerPage;
                                const topicsToShow = filteredData.slice(startIndex, endIndex);
                                renderTopics(topicsToShow);
                                renderPagination();
                            }

                            function renderPagination() {
                                const totalPages = Math.ceil(filteredData.length / topicsPerPage);
                                $('#pagination').empty();

                                const prevButton = $('<button class="page-btn prev-btn" data-page="prev">Previous</button>');
                                const nextButton = $('<button class="page-btn next-btn" data-page="next">Next</button>');

                                if (currentPage === 1) {
                                    prevButton.prop('disabled', true);
                                }

                                if (currentPage === totalPages) {
                                    nextButton.prop('disabled', true);
                                }

                                $('#pagination').append(prevButton);

                                for (let i = 1; i <= totalPages; i++) {
                                    const pageButton = $(`<button class="page-btn" data-page="${i}">${i}</button>`);
                                    $('#pagination').append(pageButton);
                                }

                                $('#pagination').append(nextButton);

                                $('.page-btn').removeClass('active');
                                $(`.page-btn[data-page="${currentPage}"]`).addClass('active');

                                $('.page-btn').off('click').on('click', function () {
                                    const page = $(this).data('page');
                                    if (page === 'prev' && currentPage > 1) {
                                        currentPage--;
                                    } else if (page === 'next' && currentPage < totalPages) {
                                        currentPage++;
                                    } else if (typeof page === 'number') {
                                        currentPage = page;
                                    }
                                    showPage(currentPage);
                                });
                            }

                            function searchTopics(query) {
                                filteredData = data.filter(topic => topic.TOPIC_NAME.toLowerCase().includes(query.toLowerCase()));

                                if (filteredData.length === 0) {
                                    $('.topic-list').html('<p class="topic-not-found">Sorry! Topic not found</p>');
                                    $('#pagination').empty();
                                } else {
                                    currentPage = 1;
                                    showPage(currentPage);
                                }
                            }

                            $('#searchInput').on('input', function () {
                                const query = $(this).val();
                                searchTopics(query);
                            });

                            showPage(currentPage);
                        },
                        error: function (error) {
                            console.error('Error fetching topics:', error);
                        }
                    });






                    var flag = true;
                    Is_PageLoad = "1";

                    //$("#btnShowTotalContents").addClass("active");
                    //$("#btnShowActiveContents").removeClass("active");
                    //$("#btnShowInactiveContents").removeClass("active");

                    //setTimeout(function () {
                    //    $.ajax({
                    //        type: "POST",
                    //        url: "/LMSContentUpload/GetContentGridListData",
                    //        async: false,
                    //        contentType: "application/json; charset=utf-8",
                    //        dataType: "json",
                    //        success: function (data) {
                    //            if (data.length > 0) {
                    //                $("#btnShowTotalContents .filter-count").text(data[0].cnt_TotalContents);
                    //                $("#btnShowActiveContents .filter-count").text(data[0].cnt_ActiveContents);
                    //                $("#btnShowInactiveContents .filter-count").text(data[0].cnt_InactiveContents);

                    //                allVideosData = data;
                    //                filteredData = data;
                    //                displayVideos(filteredData, currentPage);

                    //                $('#searchPanel').show();
                    //                $('#contentListing').show();
                    //            }
                    //        },
                    //        error: function (response) {
                    //            alert("Please try again later");
                    //        }
                    //    });
                    //}, 1000);
                });

                $('body').on('click', '#btnBackToTopicList', function () {
                    //$('#searchPanel').hide();
                    //$('#contentListing').hide();

                    //$("#btnShowTotalContents").hide();
                    //$("#btnShowActiveContents").hide();
                    //$("#btnShowInactiveContents").hide();
                    //$("#btnBackToTopicList").hide();

                    //var videoContainer = $('#videoContainer');
                    //videoContainer.empty();

                    //$("#divTopicList").show();
                    //$("#divTopicName").show();
                    //$("#spTopicName").html('Topics');

                    //$("#pagination").show();
                    //$("#topic-list-search").show();

                    // Rev Sanchita
                    $("#ddlTopic").val(0).trigger('change');
                    $("#hdnTopicID").val(0);
                    // End of Rev Sanchita
                    $("#btnshow").show();

                    $('#searchInput').val('');

                    btnshow.click();
                });

                //$('body').on('click', '#btnSearch', function () {
                //    performSearch();
                //});

                $('#searchInput-content').on('input', function () {
                    performSearch();
                });

                $('body').on('keypress', '#searchInput', function (e) {
                    if (e.which === 13) { // Enter key pressed
                        performSearch();
                    }
                });

                $('body').on('click', '#btnShowAll', function () {
                    $('#searchInput').val('');
                    currentPage = 1;
                    filteredData = allVideosData;
                    displayVideos(filteredData, currentPage);

                    $("#btnShowTotalContents").addClass("active");
                    $("#btnShowActiveContents").removeClass("active");
                    $("#btnShowInactiveContents").removeClass("active");
                });

                $('body').on('click', '#btnShowTotalContents', function () {
                    activeFilter = 'all';
                    $('#searchInput').val('');
                    currentPage = 1;
                    filteredData = allVideosData;
                    displayVideos(filteredData, currentPage);

                    $("#btnShowTotalContents").addClass("active");
                    $("#btnShowActiveContents").removeClass("active");
                    $("#btnShowInactiveContents").removeClass("active");
                });

                $('body').on('click', '#btnShowActiveContents', function () {
                    activeFilter = 'active';
                    $('#searchInput').val('');
                    currentPage = 1;
                    filteredData = allVideosData.filter(item => item.CONTENTSTATUS === "Yes");
                    displayVideos(filteredData, currentPage);

                    $("#btnShowTotalContents").removeClass("active");
                    $("#btnShowActiveContents").addClass("active");
                    $("#btnShowInactiveContents").removeClass("active");
                });

                $('body').on('click', '#btnShowInactiveContents', function () {
                    activeFilter = 'inactive';
                    $('#searchInput').val('');
                    currentPage = 1;
                    filteredData = allVideosData.filter(item => item.CONTENTSTATUS === "No");
                    displayVideos(filteredData, currentPage);

                    $("#btnShowTotalContents").removeClass("active");
                    $("#btnShowActiveContents").removeClass("active");
                    $("#btnShowInactiveContents").addClass("active");
                });

                $('body').on('click', '.pagination-btn', function (e) {
                    e.preventDefault();
                    currentPage = parseInt($(this).data('page'));
                    displayVideos(filteredData, currentPage);
                });

                $('body').on('click', '.pagination-prev', function (e) {
                    e.preventDefault();
                    if (currentPage > 1) {
                        currentPage -= 1;
                        displayVideos(filteredData, currentPage);
                    }
                });

                $('body').on('click', '.pagination-next', function (e) {
                    e.preventDefault();
                    var totalPages = Math.ceil(filteredData.length / itemsPerPage);
                    if (currentPage < totalPages) {
                        currentPage += 1;
                        displayVideos(filteredData, currentPage);
                    }
                });


                //function performSearch() {
                //    var searchQuery = $('#searchInput-content').val().toLowerCase();
                //    filteredData = allVideosData.filter(function (item) {
                //        var matchesStatus = (activeFilter === 'all') ||
                //                            (activeFilter === 'active' && item.CONTENTSTATUS === "Yes") ||
                //                            (activeFilter === 'inactive' && item.CONTENTSTATUS === "No");

                //        return matchesStatus && item.CONTENTTITLE.toLowerCase().includes(searchQuery);
                //    });
                //    currentPage = 1;
                //    displayVideos(filteredData, currentPage);
                //}

                function performSearch() {
                    var searchQuery = $('#searchInput-content').val().toLowerCase();
                    var filteredData = allVideosData.filter(function (item) {
                        var matchesStatus = (activeFilter === 'all') ||
                            (activeFilter === 'active' && item.CONTENTSTATUS === "Yes") ||
                            (activeFilter === 'inactive' && item.CONTENTSTATUS === "No");

                        return matchesStatus && item.CONTENTTITLE.toLowerCase().includes(searchQuery);
                    });

                    // Show "No data found" message if no results match
                    if (filteredData.length === 0) {
                        $('#noDataMessage').show();
                    } else {
                        $('#noDataMessage').hide();
                    }

                    currentPage = 1;
                    displayVideos(filteredData, currentPage);
                }

                //function displayVideos(data, page) {
                //    var videoContainer = $('#videoContainer');
                //    videoContainer.empty();

                //    var startIndex = (page - 1) * itemsPerPage;
                //    var endIndex = Math.min(startIndex + itemsPerPage, data.length);
                //    var pageData = data.slice(startIndex, endIndex);

                //    pageData.forEach(function (item) {
                //        var videoPath = item.CONTENT_FILEPATH.replace('~', '');
                //        var status = item.CONTENTSTATUS === "Yes" ? "Published" : "Unpublished";
                //        var statusClass = item.CONTENTSTATUS === "Yes" ? "published" : "unpublished";
                //        var videoCardHtml = `
                //            <div class="col-md-3">
                //                <div class="card video-card" data-video-src="${videoPath}">
                //                    <canvas class="card-img-top videoThumbnail"></canvas>
                //                    <video class="video" style="display:none;">
                //                        <source src="${videoPath}" type="video/mp4">
                //                        Your browser does not support the video tag.
                //                    </video>
                //                    <div class="card-body">
                //                        <div class="card-body-content">
                //                            <h5 class="card-title">${item.CONTENTTITLE}</h5>
                //                            <p class="card-status ${statusClass}">${status}</p>
                //                        </div>

                //                        <div class="dropdown action-dropdown">
                //                          <button class="btn dropdown-toggle tooltip-container" type="button" data-toggle="dropdown">
                //                            <img src="../../../assests/images/more.svg">
                //                            <div class="tooltip">Options</div>
                //                          </button>
                //                          <ul class="dropdown-menu">
                //                            <li><a onclick="MapQuestionWithContent('${item.CONTENTID}','${item.CONTENTTITLE}')">Map Questions</a></li>
                //                            <li><a onclick="OpenLMSContentforEdit('${item.CONTENTID}')">Edit Content</a></li>
                //                            <li><a style="color: red" class="delete-option" onclick="OnClickDeleteLMSContent('${item.CONTENTID}')">Delete</a></li>
                //                          </ul>
                //                        </div>
                //                    </div>
                //                </div>
                //            </div>
                //        `;
                //        videoContainer.append(videoCardHtml);
                //    });

                //    generateThumbnails();
                //    displayPagination(data.length, page);
                //}



                //function generateThumbnails() {
                //    var videoCards = document.querySelectorAll('.video-card');

                //    videoCards.forEach(function (card) {
                //        var video = card.querySelector('.video');
                //        var canvas = card.querySelector('.videoThumbnail');
                //        var context = canvas.getContext('2d');

                //        video.addEventListener('loadeddata', function () {
                //            canvas.width = video.videoWidth;
                //            canvas.height = video.videoHeight;
                //            video.currentTime = 2;
                //        });

                //        video.addEventListener('seeked', function () {
                //            context.drawImage(video, 0, 0, canvas.width, canvas.height);
                //        });

                //        video.load();
                //    });
                //}

                //function displayPagination(totalItems, currentPage) {
                //    var paginationContainer = $('#paginationContainer');
                //    paginationContainer.empty();

                //    var totalPages = Math.ceil(totalItems / itemsPerPage);

                //    var paginationHtml = '<li><a href="#" class="pagination-prev" data-page="' + (currentPage - 1) + '">Prev</a></li>';

                //    for (var i = 1; i <= totalPages; i++) {
                //        paginationHtml += `
                //            <li class="${i === currentPage ? 'active' : ''}">
                //                <a href="#" class="pagination-btn" data-page="${i}">${i}</a>
                //            </li>
                //        `;
                //    }

                //    paginationHtml += '<li><a href="#" class="pagination-next" data-page="' + (currentPage + 1) + '">Next</a></li>';

                //    paginationContainer.append(paginationHtml);

                //    if (currentPage === 1) {
                //        $('.pagination-prev').parent().addClass('disabled');
                //    }
                //    if (currentPage === totalPages) {
                //        $('.pagination-next').parent().addClass('disabled');
                //    }
                //}


                $('#txtPoint4').on('input', function() {
                    this.value = this.value.replace(/[^0-9]/g, '');
                    if (this.value.length > 2) {
                        this.value = this.value.slice(0, 2); // Limit to 2 digits
                    }
                });

                $('#txtPoint3').on('input', function() {
                    this.value = this.value.replace(/[^0-9]/g, '');
                    if (this.value.length > 2) {
                        this.value = this.value.slice(0, 2); // Limit to 2 digits
                    }
                });

                $('#txtPoint2').on('input', function() {
                    this.value = this.value.replace(/[^0-9]/g, '');
                    if (this.value.length > 2) {
                        this.value = this.value.slice(0, 2); // Limit to 2 digits
                    }
                });

                $('#txtPoint1').on('input', function() {
                    this.value = this.value.replace(/[^0-9]/g, '');
                    if (this.value.length > 2) {
                        this.value = this.value.slice(0, 2); // Limit to 2 digits
                    }
                });


                $(".allow_decimal").on("input", function (evt) {
                    var self = $(this);
                    self.val(self.val().replace(/[^0-9\.]/g, ''));
                    if ((evt.which != 46 || self.val().indexOf('.') != -1) && (evt.which < 48 || evt.which > 57)) {
                        evt.preventDefault();
                    }
                });
                $('.numbersOnly').keyup(function () {
                    if (this.value != this.value.replace(/[^0-9\.]/g, '')) {
                        this.value = this.value.replace(/[^0-9\.]/g, '');
                    }
                });

                $('#txtQuestionName').focus();
                $('#chkCorrect1').change(function () {
                    var chkCorrect1 = document.getElementById("chkCorrect1").checked ? "1" : "0";
                    if (chkCorrect1 == "1") {
                        $("#txtPoint1").prop("disabled", false);
                        $("#txtPoint1").focus();

                    }
                    else {
                        $("#txtPoint1").prop("disabled", true);

                    }
                });

                $('#chkCorrect2').change(function () {
                    var chkCorrect2 = document.getElementById("chkCorrect2").checked ? "1" : "0";
                    if (chkCorrect2 == "1") {
                        $("#txtPoint2").prop("disabled", false);
                        $("#txtPoint2").focus();

                    }
                    else {
                        $("#txtPoint2").prop("disabled", true);

                    }
                });

                $('#chkCorrect3').change(function () {
                    var chkCorrect3 = document.getElementById("chkCorrect3").checked ? "1" : "0";
                    if (chkCorrect3 == "1") {
                        $("#txtPoint3").prop("disabled", false);
                        $("#txtPoint3").focus();

                    }
                    else {
                        $("#txtPoint3").prop("disabled", true);

                    }
                });

                $('#chkCorrect4').change(function () {
                    var chkCorrect4 = document.getElementById("chkCorrect4").checked ? "1" : "0";
                    if (chkCorrect4 == "1") {
                        $("#txtPoint4").prop("disabled", false);
                        $("#txtPoint4").focus();

                    }
                    else {
                        $("#txtPoint4").prop("disabled", true);

                    }
                });

            });


        /*});*/



        var bar = $('.bar');
        var percent = $('.percent');
        var status = $('#status');

        $('form').ajaxForm({
            beforeSend: function () {
                //status.empty();
                var percentVal = '0%';
                bar.width(percentVal);
                percent.html(percentVal);

                showLoader();
            },
            uploadProgress: function (event, position, total, percentComplete) {
                var percentVal = percentComplete + '%';
                bar.width(percentVal);
                percent.html(percentVal);
            },
            complete: function (xhr) {
                // status.html(xhr.responseText);

                hideLoader();

                if (xhr.responseText != '') {
                    var temp = JSON.parse(xhr.responseText);
                    var responseText = temp.split('~');


                    if (responseText[0] == 'Content added succesfully.' || responseText[0] == 'Content updated succesfully.') {
                        Swal.fire({
                            title: 'Success',
                            text: responseText[0],
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                //window.location.href = '/LMS/LMSContentUpload/Index';


                                Swal.fire({
                                    title: 'Question Add',
                                    text: "Do you want to add new questions?",
                                    icon: 'question',
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: 'Yes',
                                    cancelButtonText: 'No'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                       //window.location.href = '/LMS/LMSQuestions/QuestionAdd?key=AddOnFly&&TOPICID=' + $("#ddlTopic").val() + '&&CONTENTID='+responseText[1];

                                        //$("#AddContentModal").modal('hide');
                                        //AddQuestionWithContentFromSave(responseText[1], $("#txtContentDesc").val(), $("#ddlTopic").val(), $("#spTopicName").val());
                                       // window.location.href = '/LMS/LMSQuestions/QuestionAdd?key=AddOnFlySave&&TOPICID=' + responseText[2] + '&&CONTENTID=' + responseText[1];

                                        ClearQuesData();

                                        //TOPIC_ID = "";

                                        //TOPIC_ID = $("#ddlTopic").val();
                                        //$("#ddlTopic").SetEnabled(false);
                                        //TOPICID.push($("#ddlTopic").val());

                                        $("#AddContentModal").modal('hide');

                                        $("#ddlTopicQ").val($("#ddlTopic").val()).trigger('change');

                                        Category_ID = "";

                                        $("#hdnAddQFrom").val("save");
                                        Is_ContentId = responseText[1] ;


                                        $("#AddQuestionModal").modal('show');

                                       //$.ajax({
                                       //         type: "POST",
                                       //         url: "@Url.Action("SetMapDataByTopicID", "LMSQuestions")",
                                       //         data: { TopicID: responseText[2], fromSave : 1 },
                                       //         success: function (response) {
                                       //             if (response != null && response == true) {
                                       //                 $("#AddContentModal").modal('hide');
                                       //                 //window.location.href = '/LMS/LMSQuestions/QuestionAdd?key=AddOnFly&&TOPICID=' + $("#ddlTopic").val() + '&&CONTENTID=' + responseText[1];
                                       //                 //AddQuestionWithContent(responseText[1], $("#txtContentDesc").val(), $("#ddlTopic").val(), $("#spTopicName").val());
                                       //                 window.location.href = '/LMS/LMSQuestions/QuestionAdd?key=AddOnFlySave&&TOPICID=' + responseText[2] + '&&CONTENTID=' + responseText[1];
                                       //             }
                                       //             else {
                                       //                 jAlert('Please try again later.');
                                       //                 return false;
                                       //             }
                                       //         }
                                       // });

                                    }
                                    else {
                                        $("#AddContentModal").modal('hide');
                                        ShowContentListiing($("#ddlTopic").val(), '');

                                        // window.location.href = '/LMS/LMSContentUpload/Index';
                                        //$.ajax({
                                        //    type: "POST",
                                        //    url: "/LMSContentUpload/GetContentGridListData",
                                        //    async: false,
                                        //    data: JSON.stringify({ 'TopicId': $("#ddlTopic").val() }),
                                        //    contentType: "application/json; charset=utf-8",
                                        //    dataType: "json",
                                        //    success: function (data) {
                                        //        if (data.length > 0) {
                                        //            $("#btnShowTotalContents .filter-count").text(data[0].cnt_TotalContents);
                                        //            $("#btnShowActiveContents .filter-count").text(data[0].cnt_ActiveContents);
                                        //            $("#btnShowInactiveContents .filter-count").text(data[0].cnt_InactiveContents);

                                        //            allVideosData = data;
                                        //            filteredData = data;
                                        //            displayVideos(filteredData, currentPage);

                                        //            //$('#searchPanel').show();
                                        //            //$('#contentListing').show();

                                        //            $("#AddContentModal").modal('hide');
                                        //        }
                                        //        //hideLoader();
                                        //    },
                                        //    error: function (response) {
                                        //        alert("Please try again later");
                                        //        //hideLoader();
                                        //    }
                                        //});
                                    }
                                });
                            }
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: responseText[0],
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                }
            }
        });


        $(document).ready(function () {
            //if (urlKeys.TOPICID != undefined && urlKeys.TOPICID != 0) {
            //    ShowContentListiing(urlKeys.TOPICID, '');
            //}
            if (@ViewBag.CONTENT_TOPICIDS != undefined && @ViewBag.CONTENT_TOPICIDS != null && @ViewBag.CONTENT_TOPICIDS !=0)
            {
                ShowContentListiing(@ViewBag.CONTENT_TOPICIDS, '@ViewBag.TOPIC_NAME');

                if(@ViewBag.CONTENT_FROMSAVE != undefined && @ViewBag.CONTENT_FROMSAVE != null && @ViewBag.CONTENT_FROMSAVE==0){
                    AddQuestionWithContent(@ViewBag.CONTENT_ID, '@ViewBag.CONTENT_NAME', @ViewBag.CONTENT_TOPICIDS, '@ViewBag.TOPIC_NAME')
                }

            }


            // THUMBNAIL
            $("#fileuploadicon").fileinput({
                'showUpload': false,
                'previewFileType': 'any',
                'theme': 'fas',
                'browseOnZoneClick': true,
                'allowedFileExtensions': ['jpg'],
                'showRemove': true,
                'removeClass': 'btn btn-danger',
                'removeIcon': '<i class="fas fa-trash-alt"></i>',
                'dropZoneTitle': 'Drag & drop files here',
                'dropZoneClickTitle': '',
                'layoutTemplates': {
                    footer: '',
                    actions: ''
                }
            });

            $('#fileuploadicon').bind('change', function (event) {
                $("#hdnFileDuration").val("");
                if (this.files[0].size > 1048576) {
                    alertify.set('notifier', 'position', 'bottom-left');

                    $('#fileuploadicon').fileinput('clear');
                    setTimeout(function () { $('#fileuploadicon').fileinput('refresh'); }, 1000);

                    var notification = alertify.notify('Maximum file size 1 Mb Supported', 'Alert', 3, function () {

                        $('#fileuploadicon').fileinput('enable');
                    });
                }

                //var allowedExtensions = new[] { ".pdf", ".ppt", ".pptx", ".mp4", ".doc", ".docx" };

                //var allowedExtensionsicon = new[] { ".jpg", ".jpeg", ".tif", ".png" };

                if (!event || !event.target || !event.target.files || event.target.files.length === 0) {
                    return;
                }

                const name = event.target.files[0].name;
                const lastDot = name.lastIndexOf('.');

                const fileName = name.substring(0, lastDot);
                const ext = name.substring(lastDot + 1);


                //if (ext.toLowerCase() == "png" || ext.toLowerCase() == "gif" || ext.toLowerCase() == "jpg" || ext.toLowerCase() == "tif") {
                if (ext.toLowerCase() == "jpg" ) {

                }
                else {
                    alertify.set('notifier', 'position', 'bottom-left');
                    $('#fileuploadicon').fileinput('clear');
                    setTimeout(function () { $('#fileuploadicon').fileinput('refresh'); }, 1000);
                    var notification = alertify.notify('File type not Supported', 'Alert', 3, function () {
                        // $('#fileuploadicon').fileinput('refresh');
                        $('#fileuploadicon').fileinput('enable');
                    });
                }

                $('#file-name-icon').text(name);

            });

            $('#fileuploadicon').on('fileclear', function () {
                $('#file-name-icon').text('');
                filePreviewicon.innerHTML = '';
            });

            // THUMBNAIL

            $("#fileupload").fileinput({
                'showUpload': false,
                'previewFileType': 'any',
                'theme': 'fas',
                'browseOnZoneClick': true,
                'allowedFileExtensions': ['mp4'],
                'showRemove': true,
                'removeClass': 'btn btn-danger',
                'removeIcon': '<i class="fas fa-trash-alt"></i>',
                'dropZoneTitle': 'Drag & drop files here',
                'dropZoneClickTitle': '',
                'layoutTemplates': {
                    footer: '',
                    actions: ''
                }
            });

            $('#fileupload').on('change', function (event) {
                handleFileChange(event);
            });

            $('#fileupload').on('fileclear', function () {
                $('#file-name').text('');
                filePreview.innerHTML = '';

                $('#file-name-icon').text('');
                filePreviewicon.innerHTML = '';
                $('#fileuploadicon').fileinput('clear');

            });

            function handleFileChange(event) {
                if (!event || !event.target || !event.target.files || event.target.files.length === 0) {
                    return;
                }

                const file = event.target.files[0];
                if (file.size > @ViewBag.LMSVideoUploadSize * 1024 * 1024) {
                    alertify.set('notifier', 'position', 'bottom-left');
                    $('#fileupload').fileinput('clear');
                    setTimeout(function () { $('#fileupload').fileinput('refresh'); }, 1000);
                    alertify.notify('Maximum file size @ViewBag.LMSVideoUploadSize MB Supported', 'error', 3);
                    return;
                }

                const name = file.name;
                const ext = name.split('.').pop().toLowerCase();

                if (ext !== 'mp4') {
                    alertify.set('notifier', 'position', 'bottom-left');
                    $('#fileupload').fileinput('clear');
                    setTimeout(function () { $('#fileupload').fileinput('refresh'); }, 1000);
                    alertify.notify('File type not Supported', 'error', 3);
                    return;
                }

                $('#file-name').text(name);
            }

            $("#openlinkForTopicAdd").on("click", function () {

                $("#hdnTopicID").val(0);
                $("#transfer1M").html('');
                $("#txtTopicName").val('');
                $("#chkStatus").prop("checked", true);
                $("#ddlTopicBasedOn").val(0);
                lblBasedOn.innerText = "";
                $("#transfer1T").html("");
                document.getElementById("txtTopicName").focus();
                $("#numTopicCompDay").val('0');
                $("#chkDefault").prop("checked", false);
                $("#numTopicSequence").val('0');

                $.ajax({
                    type: "POST",
                    url: "/LMSContentUpload/GetLastTopicSeq",
                    //data: JSON.stringify(obj),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    async: false,
                    success: function (data) {
                        console.log(data)
                        $("#numTopicSequence").val(data.TopicSequence);
                    }
                });

                $("#AddTopicModal").modal('show');
            });
        });

         $('body').on('click', '#btnExportTo', function () {
             var url = '@Url.Action("ExporRegisterList", "LMSContentUpload")'
             window.location.href = url.replace("_type_");
         });


        $('#AddContentModal').on('hidden.bs.modal', function () {
            $("#btnSubmit").removeClass("newposition-btn");
        });

    });

    function ShowContentListiing(TopicId, TopicName) {

        showLoader();

        $("#btnShowTotalContents").show();
        $("#btnShowActiveContents").show();
        $("#btnShowInactiveContents").show();

        $("#btnShowTotalContents").addClass("active");
        $("#btnShowActiveContents").removeClass("active");
        $("#btnShowInactiveContents").removeClass("active");

        $("#divTopicList").hide();
        $("#pagination").hide();
        $("#topic-list-search").hide();


        $("#divTopicName").show();
        $("#spTopicName").html( "Topic : " + TopicName);

        $("#btnBackToTopicList").show();
        $("#btnshow").hide();

        // Rev Sanchita
        $("#hdnTopicID").val(TopicId);
        // End of Rev Sanchita

        allVideosData = [];
        filteredData = [];
        currentPage = 1;
        itemsPerPage = 10;
        activeFilter = 'all';

        $.ajax({
            type: "POST",
            url: "/LMSContentUpload/GetContentGridListData",
            async: false,
            data: JSON.stringify({ 'TopicId': TopicId }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                if (data.length > 0) {
                    $("#btnShowTotalContents .filter-count").text(data[0].cnt_TotalContents);
                    $("#btnShowActiveContents .filter-count").text(data[0].cnt_ActiveContents);
                    $("#btnShowInactiveContents .filter-count").text(data[0].cnt_InactiveContents);
                    $("#spTopicName").html( "Topic : " + data[0].CONTENT_TOPIC);

                    allVideosData = data;
                    filteredData = data;
                    displayVideos(filteredData, currentPage);


                   $('#searchPanel').show();
                   $('#contentListing').show();
                }
                hideLoader();
            },
            error: function (response) {
                alert("Please try again later");
                hideLoader();
            }
        });
    }

    //function displayVideos(data, page) {
    //    var videoContainer = $('#videoContainer');
    //    videoContainer.empty();

    //    var startIndex = (page - 1) * itemsPerPage;
    //    var endIndex = Math.min(startIndex + itemsPerPage, data.length);
    //    var pageData = data.slice(startIndex, endIndex);

    //    pageData.forEach(function (item) {
    //        var videoPath = item.CONTENT_FILEPATHICON.replace('~', '');
    //        var status = item.CONTENTSTATUS === "Yes" ? "Published" : "Unpublished";
    //        var statusClass = item.CONTENTSTATUS === "Yes" ? "published" : "unpublished";

    //        var videoCardHtml = `
    //        <div class="col-md-3">
    //            <div class="card video-card">

    //                <div id="videoCardImg" class="video-card-img" style="background: url(${videoPath})"></div>

    //                <div class="card-body">
    //                    <div class="card-body-content">
    //                        <h5 class="card-title">${item.CONTENTTITLE}</h5>
    //                        <p class="card-status ${statusClass}">${status}</p>
    //                    </div>

    //                    <div class="dropdown action-dropdown">
    //                      <button class="btn dropdown-toggle tooltip-container" type="button" data-toggle="dropdown">
    //                        <img src="../../../assests/images/more.svg">
    //                        <div class="tooltip">Options</div>
    //                      </button>
    //                      <ul class="dropdown-menu">
    //                        <li><a onclick="MapQuestionWithContent('${item.CONTENTID}','${item.CONTENTTITLE}')">Map Questions</a></li>
    //                        <li><a onclick="OpenLMSContentforEdit('${item.CONTENTID}')">Edit Content</a></li>
    //                        <li><a style="color: red" class="delete-option" onclick="OnClickDeleteLMSContent('${item.CONTENTID}')">Delete</a></li>
    //                      </ul>
    //                    </div>
    //                </div>
    //            </div>
    //        </div>
    //        `;


    //        videoContainer.append(videoCardHtml);
    //    });

    //    //generateThumbnails();
    //    displayPagination(data.length, page);
    //}




    function displayVideos(data, page) {
        var videoContainer = $('#videoContainer');
        videoContainer.empty();

        var startIndex = (page - 1) * itemsPerPage;
        var endIndex = Math.min(startIndex + itemsPerPage, data.length);
        var pageData = data.slice(startIndex, endIndex);

        pageData.forEach(function (item, index) {

            var CONTENTFILETYPE = item.CONTENT_FILETYPE;
            var videoPath = item.CONTENT_FILEPATHICON.replace('~', '');
            var status = item.CONTENTSTATUS === "Yes" ? "Published" : "Unpublished";
            var statusrev = item.CONTENTSTATUS === "Yes" ? "Unpublish" : "Publish";
            var statusClass = item.CONTENTSTATUS === "Yes" ? "published" : "unpublished";
            var Chkstatus = item.CONTENTSTATUS === "Yes" ? "checked" : "0";

            var ContentTitle = item.CONTENTTITLE.replaceAll("'", "&quot;");
            ContentTitle = ContentTitle.replaceAll('"', '&quot;');

            var durationPickerId = `duration-${index}`; // Unique ID for each duration picker
            var quizTime = item.CONTENT_QUIZTIME || "00:00:00";

            var videoCardHtml = `
                <div class="col-md-3" id="videoCard-${index}">
                    <div class="card video-card">
                        <div id="videoCardImg" class="video-card-img" style="background: url(${videoPath})"></div>
                        <div class="card-body">
                            <div class="card-body-content">
                                <div class="tooltip-container content-title-div">
                                    <h5 class="card-title">${ContentTitle}</h5>
                                    <div class="tooltip">${ContentTitle}</div>
                                </div>
                                `

                                if (@ViewBag.AddRightsQues== 1 || @ViewBag.EditRights== 1 || @ViewBag.DeleteRights== 1) {
                                    videoCardHtml += `
                                        <div class="dropdown action-dropdown">
                                            <button class="btn dropdown-toggle tooltip-container" type="button" data-toggle="dropdown">
                                                <img src="../../../assests/images/more.svg">
                                                <div class="tooltip">Options</div>
                                            </button>
                                            <ul class="dropdown-menu">`
                                                if (@ViewBag.AddRightsQues== 1)
                                                {
                                                    videoCardHtml += ` <li><a onclick="AddQuestionWithContent('${item.CONTENTID}','${ContentTitle}','${item.CONTENT_TOPICID}','${item.CONTENT_TOPIC}')">Add Questions</a></li> `
                                                }

                                                if (@ViewBag.EditRights== 1)
                                                {
                                                    videoCardHtml += ` <li><a onclick="MapQuestionWithContent('${item.CONTENTID}','${ContentTitle}')">Map Questions</a></li> `
                                                }

                                                if (@ViewBag.EditRights== 1)
                                                {
                                                    videoCardHtml += ` <li><a onclick="OpenLMSContentforEdit('${item.CONTENTID}','${ContentTitle}','${item.CONTENT_TOPICID}','${item.CONTENT_TOPIC}')">Edit Content</a></li> `
                                                }

                                                if (@ViewBag.DeleteRights== 1)
                                                {
                                                    videoCardHtml += ` <li><a style="color: red" class="delete-option" onclick="OnClickDeleteLMSContent('${item.CONTENTID}','${item.CONTENT_TOPICID}')">Delete</a></li> `
                                                }
                                               videoCardHtml += `
                                            </ul>
                                        </div>
                                    `
                                }


                            videoCardHtml += `
                            </div>
                            <div class="publish-quiztime-part">
                                <div class="card-status ${statusClass} tooltip-container">
                                    <input type="checkbox" id="chkPublishStatusUpdate" name="chkPublishStatusUpdate" class="styled-checkbox" ${Chkstatus} onchange="UpdateStatusPublish('${item.CONTENTID}', '${item.CONTENT_TOPICID}', '${ContentTitle}', '${item.CONTENTSTATUS}','${statusrev}');" />
                                    ${status} <div class="tooltip">click to ${statusrev}</div>
                                </div>
                             
                                `;
            //<button type="button" class="btn quiz-time-btn" data-toggle="modal" data-backdrop="static" data-keyboard="false" onclick="AddQuizTime('${item.CONTENTID}','${ContentTitle}','${item.CONTENT_TOPICID}','${item.CONTENT_QUIZTIME}')">
            //    Quiz Time<span class="qz-time-view">${item.CONTENT_QUIZTIME}</span>
            //</button>
                            //Rev 1.0
                            if (CONTENTFILETYPE == '.mp4') {
                                videoCardHtml += `
                             
                                 <button type="button" class="btn btn-VideoShow" onclick="ShowContentVideoInListing('${item.CONTENTID}','${ContentTitle}','${item.CONTENT_TOPICID}','${item.CONTENT_TOPIC}')"><span class="btn-icon"><img src="../../../assests/images/play-button.svg"></span></button>

                             
                              `;
                            }
                            //Rev 1.0 End
                            videoCardHtml += `
                                            </div>
                                            <p class="sequence-number">#${item.CONTENT_PLAYSEQ}</p>
                                        </div>
                                    </div>
                                </div>
                            `;



                            videoContainer.append(videoCardHtml);

            // Initialize the duration picker for the current input
            $(`#${durationPickerId}`).durationPicker({
                hours: {
                    label: 'Hours',
                    min: 0,
                    max: 23
                },
                minutes: {
                    label: 'Minutes',
                    min: 0,
                    max: 59
                },
                seconds: {
                    label: 'Seconds',
                    min: 0,
                    max: 59
                },
                showSeconds: true,
                showPlus: false,
                showDays: false
            });

            // Track changes to the duration picker input
            let originalValue = $(`#${durationPickerId}`).val();

            $(`#${durationPickerId}`).on('focus', function () {
                originalValue = $(this).val();
            });

            $(`#${durationPickerId}`).on('focusout', function () {
                var contentId = $(this).data('content-id');
                var topicId = $(this).data('topic-id');
                var timeValue = $(this).val();

                if (originalValue !== timeValue) {
                    Swal.fire({
                        title: 'Quiz Time',
                        text: "Are you sure you want to update Quiz Time?",
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $.ajax({
                                type: "POST",
                                url: "/LMSContentUpload/UpdateQuizTime",
                                data: JSON.stringify({ 'ContentId': contentId, QuizTime: timeValue }),
                                async: false,
                                contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                success: function (response) {
                                    if (response == "1") {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Success',
                                            text: 'Quiz Time updated successfully.'
                                        }).then(() => {
                                            $.ajax({
                                                type: "POST",
                                                url: "/LMSContentUpload/GetContentGridListData",
                                                async: false,
                                                data: JSON.stringify({ 'TopicId': topicId }),
                                                contentType: "application/json; charset=utf-8",
                                                dataType: "json",
                                                success: function (data) {
                                                    if (data.length > 0) {
                                                        $("#btnShowTotalContents .filter-count").text(data[0].cnt_TotalContents);
                                                        $("#btnShowActiveContents .filter-count").text(data[0].cnt_ActiveContents);
                                                        $("#btnShowInactiveContents .filter-count").text(data[0].cnt_InactiveContents);

                                                        allVideosData = data;
                                                        filteredData = data;
                                                        displayVideos(filteredData, currentPage);

                                                        //$('#searchPanel').show();
                                                        //$('#contentListing').show();
                                                    }
                                                },
                                                error: function (response) {
                                                    alert("Please try again later");
                                                }
                                            });
                                        });
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Error',
                                            text: 'Error in Status Update.'
                                        });
                                    }
                                },
                                error: function (response) {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'An error occurred in Status update.'
                                    });
                                }
                            });
                        } else {
                            // Revert the value back if user cancels
                            $(this).val(originalValue);
                        }
                    });
                }
            });

            // Close the duration picker on outside click
            $(document).on('mousedown', function (event) {
                if (!$(event.target).closest('.duration-picker-input, .popover').length) {
                    var $openPicker = $('.duration-picker-input').filter(function () {
                        return $(this).siblings('.popover').is(':visible');
                    });
                    if ($openPicker.length) {
                        $openPicker.trigger('focusout');
                    }
                    $('.popover').hide();
                    $('.popover').removeClass("in");
                }
            });
        });


        // Initialize SortableJS
        new Sortable(videoContainer[0], {
            swap: true, // Enable swap plugin
            swapClass: 'highlight',
            animation: 150,
            //onEnd: function (evt) {
            //    var itemEl = evt.item;
            //    var newIndex = evt.newIndex;
            //    var oldIndex = evt.oldIndex;

            //    // Swap the items in the data array
            //    var temp = filteredData[oldIndex];
            //    filteredData[oldIndex] = filteredData[newIndex];
            //    filteredData[newIndex] = temp;

            //    // Update the display
            //    displayVideos(filteredData, currentPage);
            //}

            onEnd: function (evt) {

                var newIndex = evt.newIndex;
                var oldIndex = evt.oldIndex;

                var TopicId = filteredData[oldIndex].CONTENT_TOPICID;

                var ContentIdOld = filteredData[oldIndex].CONTENTID;
                var PlaySeqOld = filteredData[oldIndex].CONTENT_PLAYSEQ;

                var ContentIdNew = filteredData[newIndex].CONTENTID;
                var PlaySeqNew = filteredData[newIndex].CONTENT_PLAYSEQ;

                if (ContentIdOld != ContentIdNew)
                {
                    $.ajax({
                        type: "POST",
                        url: "/LMSContentUpload/UpdatePlaySequence",
                        data: JSON.stringify({ 'ContentIdOld': ContentIdOld, 'PlaySeqOld': PlaySeqOld, 'ContentIdNew': ContentIdNew, 'PlaySeqNew': PlaySeqNew }),
                        async: false,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response) {
                            console.log(response);
                            if (response == "1") {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Success',
                                    text: 'Play Sequence updated successfully.'
                                }).then(() => {
                                    /*gridLMSContent.Refresh();*/

                                    $.ajax({
                                        type: "POST",
                                        url: "/LMSContentUpload/GetContentGridListData",
                                        async: false,
                                        data: JSON.stringify({ 'TopicId': TopicId }),
                                        contentType: "application/json; charset=utf-8",
                                        dataType: "json",
                                        success: function (data) {
                                            if (data.length > 0) {
                                                $("#btnShowTotalContents .filter-count").text(data[0].cnt_TotalContents);
                                                $("#btnShowActiveContents .filter-count").text(data[0].cnt_ActiveContents);
                                                $("#btnShowInactiveContents .filter-count").text(data[0].cnt_InactiveContents);

                                                allVideosData = data;
                                                filteredData = data;
                                                displayVideos(filteredData, currentPage);

                                                //$('#searchPanel').show();
                                                //$('#contentListing').show();
                                            }
                                            //hideLoader();
                                        },
                                        error: function (response) {
                                            alert("Please try again later");
                                            //hideLoader();
                                        }
                                    });


                                });
                                //GridShow();


                            }
                            else {

                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'Error in Play Sequence Update.'
                                });
                                //GridShow();

                            }

                        },
                        error: function (response) {
                            console.log(response);
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'An error occurred in Play Sequence update.'
                            });
                        }
                    });
                }


            }


        });

        displayPagination(data.length, page);
    }





    function generateThumbnails() {
        var videoCards = document.querySelectorAll('.video-card');

        videoCards.forEach(function (card) {
            var video = card.querySelector('.video');
            var canvas = card.querySelector('.videoThumbnail');
            var context = canvas.getContext('2d');

            video.addEventListener('loadeddata', function () {
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                video.currentTime = 2;
            });

            video.addEventListener('seeked', function () {
                context.drawImage(video, 0, 0, canvas.width, canvas.height);
            });

            video.load();
        });
    }

    function displayPagination(totalItems, currentPage) {
        var paginationContainer = $('#paginationContainer');
        paginationContainer.empty();

        var totalPages = Math.ceil(totalItems / itemsPerPage);

        var paginationHtml = '<li><a href="#" class="pagination-prev" data-page="' + (currentPage - 1) + '">Prev</a></li>';

        for (var i = 1; i <= totalPages; i++) {
            paginationHtml += `
            <li class="${i === currentPage ? 'active' : ''}">
                <a href="#" class="pagination-btn" data-page="${i}">${i}</a>
            </li>
        `;
        }

        paginationHtml += '<li><a href="#" class="pagination-next" data-page="' + (currentPage + 1) + '">Next</a></li>';

        paginationContainer.append(paginationHtml);

        if (currentPage === 1) {
            $('.pagination-prev').parent().addClass('disabled');
        }
        if (currentPage === totalPages) {
            $('.pagination-next').parent().addClass('disabled');
        }
    }

    function OnStartCallback(s, e) {
        e.customArgs["Is_PageLoad"] = Is_PageLoad;
    }

    function AddContent() {
        $("#hdnAddEditMode").val('ADDCONTENT');
        $("#hdnContentID").val(0);
        $("#txtContentTitle").val('');
        $("#txtContentDesc").val('');
        //$("#ddlTopic").val(0);
        //LMSTopicGridLookup.SetValue();
        $("#numPlaySequence").val(1);
        $("#chkStatus").prop("checked", false);
        $("#hdnContentStatusOld").val(0);
        $("#chkAllowLike").prop("checked", false);
        $("#chkAllowComments").prop("checked", false);
        $("#chkAllowShare").prop("checked", false);
        document.getElementById('divFooter').style.visibility = 'hidden';
        $("#submit-btnText").text("Upload & Exit");
        $("#btnSubmit img").attr("src", "../../../assests/images/upload-new.svg");
        $("#AddQuestion").hide();

        $('#file-name').text('');
        filePreview.innerHTML = '';
        $('#fileupload').fileinput('clear');

        $('#file-name-icon').text('');
        filePreviewicon.innerHTML = '';
        $('#fileuploadicon').fileinput('clear');

        if ($("#hdnTopicID").val() != undefined && $("#hdnTopicID").val() > 0) {
            $("#ddlTopic").val($("#hdnTopicID").val()).trigger('change');
        }
        else {
            $("#ddlTopic").val(0).trigger('change');
        }

        $("#AddContentModal").modal('show');




    }

    var TopicId = [];
    function ContentTopicSelectionChanged (s, e) {
        LMSTopicGridLookup.gridView.GetSelectedFieldValues("TOPIC_ID", GetTopicSelectedFieldValuesCallback);
    }
    function GetTopicSelectedFieldValuesCallback(values) {
        try {
            TopicId = [];
            for (var i = 0; i < values.length; i++) {
                TopicId.push(values[i]);
            }
            $("#hdnTopicIDForSearch").val(TopicId);
        } finally {
            console.log(TopicId);
        }
    }

    var CategoryId = [];
    function ContCategorySelectionChanged(s, e) {
        LMSCategoryGridLookup.gridView.GetSelectedFieldValues("CATEGORYID", GetCategorySelectedFieldValuesCallback);
    }
    function GetCategorySelectedFieldValuesCallback(values) {
        try {
            CategoryId = [];
            for (var i = 0; i < values.length; i++) {
                CategoryId.push(values[i]);
            }
            $("#hdnCategoryID").val(CategoryId);
        } finally {
            console.log(CategoryId);
        }
    }

    function OpenLMSContentforEdit(ContentId, ContentTitle, TopicId, TopicTitle) {
        $("#hdnAddEditMode").val('EDITCONTENT');
        $("#hdnContentID").val(ContentId);
        //LMSTopicGridLookup.gridView.UnselectAllRowsOnPage();

        Is_ContentId = ContentId;
        Is_ContentTitle = ContentTitle;
        Is_TopicId = TopicId;
        Is_TopicTitle = TopicTitle;


        $('#file-name').text('');
        filePreview.innerHTML = '';
        $('#fileupload').fileinput('clear');


        $('#file-name-iocn').text('');
        filePreviewicon.innerHTML = '';
        $('#fileuploadicon').fileinput('clear');


        $.ajax({
            url: "@Url.Action("ShowContentDetails", "LMSContentUpload")",
            async: false,
            data: { ContentId: ContentId },
            type: 'POST',
            success: function (data) {

                $("#txtContentTitle").val(data[0].ContentTitle);
                $("#txtContentDesc").val(data[0].ContentDesc);
                $("#ddlTopic").val(data[0].TopicIds).trigger('change');
                $("#numPlaySequence").val(data[0].PlaySequence);
                $("#chkStatus").prop("checked", data[0].Status);
                $("#hdnContentStatusOld").val(data[0].Status);
                $("#chkAllowLike").prop("checked", data[0].AllowLike);
                $("#chkAllowComments").prop("checked", data[0].AllowComments);
                $("#chkAllowShare").prop("checked", data[0].AllowShare);
                document.getElementById('divFooter').style.visibility = 'visible';
                $("#submit-btnText").text("Save & Exit");
                $("#btnSubmit img").attr("src", "../../../assests/images/save-circle.svg");
                $("#AddQuestion").show();

                $('#file-name').text(data[0].CONTENT_FILENAME);
                $('#file-name-icon').text(data[0].CONTENT_FILENAMEICON);

                //$("#hdnTopicID").val(data[0].TopicIds);

                //var topicids = data[0].TopicIds.split(', ');
                //LMSTopicGridLookup.SetValue(topicids);

                var initialPreview = [];
                var initialPreviewConfig = [];

                var videoName = data[0].CONTENT_FILEPATH.replace('~', ''); // Assuming this is the physical path of the video

                var baseUrl = '@Url.Action("Play", "ContentUpload", new { fileName = "" })';


               // Build the full URL
                var videoUrl = '/' + encodeURIComponent(videoName);
                const video = document.createElement('video');
                video.src = videoUrl;

                // Set the video attributes
                video.controls = true; // Show the video controls (play, pause, etc.)

                // Append the video element to the DOM
                const videoContainer = document.getElementById('filePreview');
                videoContainer.appendChild(video);

                // Load and play the video (optional)
                video.load();
                //


                //

                var iconimgName = data[0].CONTENT_FILEPATHICON.replace('~', ''); // Assuming this is the physical path of the video

                var ImgUrlicon = '/' + encodeURIComponent(iconimgName);
                const image = document.createElement('img');

                image.src = ImgUrlicon;

                // Set the image attributes (optional)
                image.alt = 'Preview Image'; // Alternative text for the image

                // Append the image element to the DOM
                const imageContainer = document.getElementById('filePreviewicon');
                imageContainer.appendChild(image);
                //



                $('#AddContentModal').modal('show');
                },
            error: function () {
            },
        });
    }

    function OnClickDeleteLMSContent(ContentId, TopicId) {
        var url = '/LMSContentUpload/DeleteContent/';

        Swal.fire({
            title: 'Confirm Delete?',
            text: "Are you sure you want to delete this content?",
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes',
            cancelButtonText: 'No'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    type: "POST",
                    url: url,
                    data: JSON.stringify({ 'ContentId': ContentId }),
                    async: false,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        console.log(response);
                        if (response == "-10") {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Error in Delete.'
                            });
                            //GridShow();
                        }
                        else if (response == "1") {
                            Swal.fire({
                                icon: 'success',
                                title: 'Deleted',
                                text: 'Successfully Deleted.'
                            }).then(() => {
                                /*gridLMSContent.Refresh();*/

                                $.ajax({
                                    type: "POST",
                                    url: "/LMSContentUpload/GetContentGridListData",
                                    async: false,
                                    data: JSON.stringify({ 'TopicId': TopicId }),
                                    contentType: "application/json; charset=utf-8",
                                    dataType: "json",
                                    success: function (data) {
                                        if (data.length > 0) {
                                            $("#btnShowTotalContents .filter-count").text(data[0].cnt_TotalContents);
                                            $("#btnShowActiveContents .filter-count").text(data[0].cnt_ActiveContents);
                                            $("#btnShowInactiveContents .filter-count").text(data[0].cnt_InactiveContents);

                                            allVideosData = data;
                                            filteredData = data;
                                            displayVideos(filteredData, currentPage);

                                            // $('#searchPanel').show();
                                            // $('#contentListing').show();
                                        }
                                        else {
                                            $("#ddlTopic").val(0).trigger('change');
                                            $("#hdnTopicID").val(0);
                                            // End of Rev Sanchita
                                            $("#btnshow").show();

                                            $('#searchInput').val('');

                                            btnshow.click();
                                        }
                                        //hideLoader();
                                    },
                                    error: function (response) {
                                        alert("Please try again later");
                                        //hideLoader();
                                    }
                                });


                            });
                            //GridShow();

                        }
                        else {
                            Swal.fire({
                                icon: 'info',
                                title: 'Info',
                                text: response
                            });
                        }
                    },
                    error: function (response) {
                        console.log(response);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while deleting the content.'
                        });
                    }
                });

            }
        });
    }

    function ShowTotalContents(e) {

        Is_PageLoad = 'TotalContents';
        /*gridLMSContent.Refresh();*/

    }

    function ShowActiveContents(e) {
        Is_PageLoad = 'ActiveContents';
        /*gridLMSContent.Refresh();*/

    }

    function ShowInactiveContents(e) {
        Is_PageLoad = 'InactiveContents';
        /*gridLMSContent.Refresh();*/
    }

    function OnStartCallbackQuestion(s, e) {
        e.customArgs["Is_ContentId"] = Is_ContentId;
        e.customArgs["Is_ContentTitle"] = Is_ContentTitle;
        e.customArgs["Is_TopicId"] = Is_TopicId;
        e.customArgs["Is_TopicTitle"] = Is_TopicTitle;
    }

    function MapQuestionWithContent(ContentId, ContentTitle) {
        Is_ContentId = ContentId;
        Is_ContentTitle = ContentTitle;
        gridQuestionMapGridList.Refresh();
        gridQuestionMapGridList.Refresh();

        $("#hdnAddEditMode").val('MAPQUESTION');
        $("#btnMapQuestion").show();
        $("#btnAddQuestion").hide();
        $("#lblAddMapQues").text("Map Question List");
        $("#hdnContentID").val(ContentId);
        $("#MapQuestionListModal").modal('show');
    }

    function AddContentQuestionMap(ContentId, ContentTitle) {
        $("#hdnAddEditMode").val('ADDCONTENTQUESTIONMAP');
        $("#hdnContentID").val(ContentId);
        lblContent.textContent = ContentTitle;
        $("#transfer1").html('');
        LMSTopicGridLookup.SetValue();
        LMSCategoryGridLookup.SetValue();

        //$("#txtContentTitle").val('');
        //$("#txtContentDesc").val('');
        //$("#ddlTopic").val(0);
        //LMSTopicGridLookup.SetValue();
        //$("#numPlaySequence").val(1);
        //$("#chkStatus").prop("checked", true);
        //$("#chkAllowLike").prop("checked", false);
        //$("#chkAllowComments").prop("checked", false);
        //$("#chkAllowShare").prop("checked", false);

        $("#AddQuestionMapModal").modal('show');
    }

    function ClearQuesData() {
        $("#txtQuestionName").val("");
        $("#txtQuestionDescription").val("");
        $("#txtOption1").val("");
        $("#txtPoint1").val("");
        $("#chkCorrect1").prop("checked", false);
        $("#txtPoint1").val("");
        $("#txtOption2").val("");
        $("#txtPoint2").val("");
        $("#chkCorrect2").prop("checked", false);
        $("#txtPoint2").val("");
        $("#txtOption3").val("");
        $("#txtPoint3").val("");
        $("#chkCorrect3").prop("checked", false);
        $("#txtPoint3").val("");
        $("#txtOption4").val("");
        $("#txtPoint4").val("");
        $("#chkCorrect4").prop("checked", false);
        $("#txtPoint4").val("");

        //$("#ddlTopicQ").val(0).trigger('change');
        ddlTopicQ.disabled = true;
        $("#btnSaveNew").show();
    }

    function AddQuestion(ContentId, ContentTitle, TopicId) {
        ClearQuesData();

       // TOPIC_ID = TopicId;
       // $("#ddlTopic").SetEnabled(false);
        //TOPICID.push(TopicId);
        Category_ID = "";

        $("#ddlTopicQ").val(TopicId).trigger('change');
        Is_ContentId = ContentId;
        $("#hdnIDADd").val(0);

        $("#AddQuestionModal").modal('show');

        $("#hdnAddQFrom").val("");

        //$.ajax({
        //     type: "POST",
        //     url: "@Url.Action("SetMapDataByTopicID", "LMSQuestions")",
        //     data: { TopicID: TopicId, fromSave : 0 },
        //     success: function (response) {
        //         if (response != null && response == true) {
        //             window.location.href = '/LMS/LMSQuestions/QuestionAdd?key=AddOnFly&&TOPICID=' + TopicId + '&&CONTENTID=' + ContentId;
        //         }
        //         else {
        //             jAlert('Please try again later.');
        //             return false;
        //         }
        //     }
      //});
    }

    function EditQuestion(QusetionId, ContentId, TopicId)
    {
        if (parseInt(QusetionId) > 0)
        {
            //$.ajax({
            //    type: "POST",
            //    url: "@Url.Action("SetMapDataByID", "LMSQuestions")",
            //    data: { ID: QusetionId, IsView: 0 },
            //    success: function (response) {
            //        if (response != null && response == true) {
            //            var url = '/LMS/LMSQuestions/QuestionAdd?key=' + QusetionId + '&&TOPICID=' + TopicId + '&&CONTENTID=' + ContentId;
            //            window.location.href = url;
            //        }
            //        else {
            //            jAlert('Please try again later.');
            //            return false;
            //        }
            //    }
            //});

            ClearQuesData();
            $("#ddlTopicQ").val(TopicId).trigger('change');
            $("#btnSaveNew").hide();
            $("#hdnIDADd").val(QusetionId);

            $.ajax({
                type: "POST",
                url: "@Url.Action("EditQuestion", "LMSContentUpload")",
                data: { id: QusetionId },
                success: function (response) {
                    if (response.code == "") {
                        jAlert('No data found');
                    }
                    else {
                        $("#txtQuestionName").val(response.NAME);
                        $("#txtQuestionDescription").val(response.DESCRIPTION);


                        $("#txtOption1").val(response.OPTIONS_NUMBER1);
                        $("#txtOption2").val(response.OPTIONS_NUMBER2);
                        $("#txtOption3").val(response.OPTIONS_NUMBER3);
                        $("#txtOption4").val(response.OPTIONS_NUMBER4);


                        $("#txtPoint1").val(response.OPTIONS_POINT1);
                        $("#txtPoint2").val(response.OPTIONS_POINT2);
                        $("#txtPoint3").val(response.OPTIONS_POINT3);
                        $("#txtPoint4").val(response.OPTIONS_POINT4);

                        if (response.OPTIONS_CORRECT1 == "True") {
                            $("#chkCorrect1").prop("checked", true);
                            $("#txtPoint1").prop("disabled", false);

                        }
                        else {
                            $("#chkCorrect1").prop("checked", false);
                            $("#txtPoint1").prop("disabled", true);
                        }

                        if (response.OPTIONS_CORRECT2 == "True") {
                            $("#chkCorrect2").prop("checked", true);
                            $("#txtPoint2").prop("disabled", false);
                        }
                        else {
                            $("#chkCorrect2").prop("checked", false);
                            $("#txtPoint2").prop("disabled", true);
                        }

                        if (response.OPTIONS_CORRECT3 == "True") {
                            $("#chkCorrect3").prop("checked", true);
                            $("#txtPoint3").prop("disabled", false);
                        }
                        else {
                            $("#chkCorrect3").prop("checked", false);
                            $("#txtPoint3").prop("disabled", true);
                        }

                        if (response.OPTIONS_CORRECT4 == "True") {
                            $("#chkCorrect4").prop("checked", true);
                            $("#txtPoint3").prop("disabled", false);
                        }
                        else {
                            $("#chkCorrect4").prop("checked", false);
                            $("#txtPoint4").prop("disabled", true);
                        }


                        TOPIC_ID = response.TOPICIDS;
                        Category_ID = response.CATEGORYIDS;

                        $("#AddQuestionModal").modal('show');

                    }
                }
            });




        }
    }

    var SelectedQuestionMapList;
    function ShowQuestionsClick() {
        SelectedQuestionMapList = '';
        var obj = {};
        obj.TopicIds = $("#hdnTopicIDForSearch").val();
        obj.CategoryIds = $("#hdnCategoryID").val();
        obj.ContentId = $("#hdnContentID").val();

        $.ajax({
            type: "POST",
            url: "/LMSContentUpload/GetQuestionListForMap",
            data: JSON.stringify(obj),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            success: function (data) {
                console.log(data)
                var temArr2 = [];
                //var data = response.d;
                for (var a = 0; a < data.length; a++) {
                    if (data[a].selected) {
                        temArr2.push(data[a].ID);
                    }
                }
                SelectedQuestionMapList = temArr2.join(",");
                $("#transfer1").html('');

                var tabNameText = 'Questions';
                var rightTabNameText = 'Select Questions';
                var searchPlaceholderText = 'search in Questions';

                var settings1 = {
                    "dataArray": data,
                    "itemName": "NAME",
                    "valueName": "ID",
                    "tabNameText": tabNameText,
                    "rightTabNameText": rightTabNameText,
                    "searchPlaceholderText": searchPlaceholderText,
                    "callable": function (items) {
                        //console.dir(items)
                        var temArr = [];
                        for (var i = 0; i < items.length; i++) {
                            temArr.push(items[i].ID);
                        }
                        SelectedQuestionMapList = temArr.join(",");
                    }
                };
                $("#transfer1").transfer(settings1);
            }
        });
    }

    function SaveContentQuestionMap() {
        Swal.fire({
            title: 'Are you sure you want to assign?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes',
            cancelButtonText: 'No'
        }).then((result) => {
            if (result.isConfirmed) {

                if (SelectedQuestionMapList == "" || SelectedQuestionMapList == null) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Alert',
                        text: 'Please select Questions.'
                    }).then(() => {
                        setTimeout(() => {
                            $("#btnShowQuestions").focus();
                        }, 200);
                    });
                    return;
                }

                var data = {
                    ContentID: $("#hdnContentID").val(),
                    SelectedQuestionMapList: SelectedQuestionMapList,
                    Action: $("#hdnAddEditMode").val()
                }

                $.ajax({
                    url: '@Url.Action("SaveContentQuestionMap", "LMSContentUpload")',
                    type: 'POST',
                    data: { data: data },
                    success: function (returnValue) {
                        if (returnValue.RETURN_VALUE == "-10") {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Error in Add.'
                            });
                        } else if (returnValue.RETURN_VALUE == "-20") {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Error in Update.'
                            });
                        } else if (returnValue.RETURN_VALUE == "0" && returnValue.RETURN_DUPLICATEMAPNAME != "") {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: 'Question(s) assigned successfully. Content already mapped with the follwoing questions:\n' + returnValue.RETURN_DUPLICATEMAPNAME
                            }).then(() => {
                                $('#AddQuestionMapModal').modal('hide');

                            });
                            gridQuestionMapGridList.Refresh();
                        } else if (returnValue.RETURN_VALUE == "0" && returnValue.RETURN_DUPLICATEMAPNAME == "") {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: 'Question(s) assigned successfully.'
                            }).then(() => {
                                $('#AddQuestionMapModal').modal('hide');

                            });
                            gridQuestionMapGridList.Refresh();
                        } else if (returnValue.RETURN_VALUE == "1") {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Content already mapped with the follwoing questions:\n' + returnValue.RETURN_DUPLICATEMAPNAME
                            });
                        }
                    },
                    error: function () {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while saving the topic.'
                        });
                    }
                });
            }
        });
    }

    function OpenMapQuesforEdit(ContentId, ContentTitle) {

        $("#hdnAddEditMode").val('EDITCONTENTQUESTIONMAP');
        $("#hdnContentID").val(ContentId);
        lblContent.textContent = ContentTitle;
        $("#transfer1").html('');
        LMSTopicGridLookup.SetValue();
        LMSCategoryGridLookup.SetValue();

        $.ajax({
            url: "@Url.Action("ShowContentDetailsForEdit", "LMSContentUpload")",
            async: false,
            data: { ContentId: ContentId },
            type: 'POST',
            success: function (data) {
                console.log(data)
                var temArr2 = [];
                //var data = response.d;
                for (var a = 0; a < data.length; a++) {
                    if (data[a].selected) {
                        temArr2.push(data[a].ID);
                    }
                }
                SelectedQuestionMapList = temArr2.join(",");
                $("#transfer1").html('');

                var tabNameText = 'Questions';
                var rightTabNameText = 'Select Questions';
                var searchPlaceholderText = 'search in Questions';

                var settings1 = {
                    "dataArray": data,
                    "itemName": "NAME",
                    "valueName": "ID",
                    "tabNameText": tabNameText,
                    "rightTabNameText": rightTabNameText,
                    "searchPlaceholderText": searchPlaceholderText,
                    "callable": function (items) {
                        //console.dir(items)
                        var temArr = [];
                        for (var i = 0; i < items.length; i++) {
                            temArr.push(items[i].ID);
                        }
                        SelectedQuestionMapList = temArr.join(",");
                    }
                };
                $("#transfer1").transfer(settings1);

                $('#AddQuestionMapModal').modal('show');
            },
            error: function () {
            },
        });
    }

    function OnClickDeleteMapQues(ContentID) {
        var url = '/LMSContentUpload/QuestionMapDelete/';

        Swal.fire({
            title: 'Confirm Delete?',
            text: "Are you sure you want to delete this content?",
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes',
            cancelButtonText: 'No'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    type: "POST",
                    url: url,
                    data: JSON.stringify({ 'ContentID': ContentID }),
                    async: false,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        console.log(response);
                        if (response == "-10") {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Error in Delete.'
                            });
                            //GridShow();

                        }
                        else if (response == "1") {
                            Swal.fire({
                                icon: 'success',
                                title: 'Deleted',
                                text: 'Successfully Deleted.'
                            }).then(() => {
                                gridLMSTopic.Refresh();
                            });
                            //GridShow();
                            gridQuestionMapGridList.Refresh();
                        }
                        else {
                            Swal.fire({
                                icon: 'info',
                                title: 'Info',
                                text: response
                            });
                        }
                    },
                    error: function (response) {
                        console.log(response);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while deleting the content.'
                        });
                    }
                });
            }
        });
    }

    function OnStartCallbackMappedQuestion(s, e) {
        e.customArgs["Is_ContentId"] = Is_ContentId;
        e.customArgs["Is_ContentTitle"] = Is_ContentTitle;
    }

    function OpenMappedQuestionsForView(ContentId, ContentTitle) {
        Is_ContentId = ContentId;
        Is_ContentTitle = ContentTitle;
        lblContentQ.textContent = ContentTitle;

        gridMappedQuesForView.Refresh();
        gridMappedQuesForView.Refresh();

        $("#hdnContentID").val(Is_ContentId);
        $("#MappedQuestionsForViewModal").modal('show');
    }

    $(document).ready(function () {
        $('#AddContentModal').on('shown.bs.modal', function () {
            $('#txtContentTitle').focus();
        });
        $('#quizTimeModal').on('shown.bs.modal', function () {
            $('#quiztime_hour').focus();
        });
    });

    function NextButtonClick() {
        //    document.getElementById('divFooter').style.visibility = 'visible';

    }

    function PreviousButtonOnClick() {
        //document.getElementById('divFooter').style.visibility = 'hidden';

    }
    function ddlTopicBasedOnChange() {
        selectedTopicBasedOnMapList = '';
        var obj = {};
        obj.topic_basedon = $("#ddlTopicBasedOn").val();

        $.ajax({
            type: "POST",
            url: "/LMSTopics/GetBasedOnList",
            data: JSON.stringify(obj),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            success: function (data) {
                console.log(data)
                var temArr2 = [];
                //var data = response.d;
                for (var a = 0; a < data.length; a++) {
                    if (data[a].selected) {
                        temArr2.push(data[a].ID);
                    }
                }
                selectedTopicBasedOnMapList = temArr2.join(",");
                $("#transfer1T").html('');

                var tabNameText = data[0].tabNameText;
                var rightTabNameText = data[0].rightTabNameText;
                var searchPlaceholderText = data[0].searchPlaceholderText;
                lblBasedOn.innerText = "Select " + tabNameText;

                var settings1 = {
                    "dataArray": data,
                    "itemName": "NAME",
                    "valueName": "ID",
                    "tabNameText": tabNameText,
                    "rightTabNameText": rightTabNameText,
                    "searchPlaceholderText": searchPlaceholderText,
                    "callable": function (items) {
                        //console.dir(items)
                        var temArr = [];
                        for (var i = 0; i < items.length; i++) {
                            temArr.push(items[i].ID);
                        }
                        selectedTopicBasedOnMapList = temArr.join(",");
                    }
                };
                $("#transfer1T").transfer(settings1);
            }
        });
    }
    function SaveTopics() {
        Swal.fire({
            title: 'Are you sure you want to save?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes',
            cancelButtonText: 'No'
        }).then((result) => {
            if (result.isConfirmed) {
                if ($("#txtTopicName").val().trim() == "") {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Alert',
                        text: 'Please enter Topic Name.'
                    }).then(() => {
                        setTimeout(() => {
                            $("#txtTopicName").focus();
                        }, 200);
                    });
                    return;
                }

                if ($("#ddlTopicBasedOn").val() == 0 || $("#ddlTopicBasedOn").val().trim() == "") {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Alert',
                        text: 'Please select Based On.'
                    }).then(() => {
                        setTimeout(() => {
                            $("#ddlTopicBasedOn").focus();
                        }, 200);
                    });
                    return;
                }

                if (selectedTopicBasedOnMapList == "" || selectedTopicBasedOnMapList == null) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Alert',
                        text: 'Please select Based On Items.'
                    }).then(() => {
                        setTimeout(() => {
                            $("#ddlTopicBasedOn").focus();
                        }, 200);
                    });
                    return;
                }

                var data = {
                    Action: 'ADDTOPIC',
                    TopicID: $("#hdnTopicID").val(),
                    TopicBasedOnId: $("#ddlTopicBasedOn").val(),
                    TopicStatus: $("#chkStatus").prop("checked"),
                    TopicName: $("#txtTopicName").val().trim(),
                    selectedTopicBasedOnMapList: selectedTopicBasedOnMapList,
                    TopicStatusOld: $("#hdnTopicStatusOld").val(),
                    TopicCompDay: $("#numTopicCompDay").val(),
                    DefaultTopic: $("#chkDefault").prop("checked"),
                    TopicSequence: $("#numTopicSequence").val()
                }

                $.ajax({
                    url: '@Url.Action("SaveTopic", "LMSTopics")',
                    type: 'POST',
                    data: { data: data },
                    success: function (returnValue) {
                        if (returnValue.RETURN_VALUE == "-10") {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Error in Add.'
                            });
                        } else if (returnValue.RETURN_VALUE == "-20") {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Error in Update.'
                            });
                        }
                        else if (returnValue.RETURN_VALUE == "1") {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: 'Topic added successfully.'
                            }).then(() => {
                                $('#AddTopicModal').modal('hide');
                            });

                            $.ajax({
                                url: '/LMSContentUpload/GetTopicList',
                                async: false,
                                type: 'POST',
                                dataType: 'json',
                                success: function (data) {

                                    $('.ddlTopic').html('');

                                    //$('.ddlTopic').html(data);
                                    var status = "<select id='ddlTopic' class = 'form-control'>";
                                    status = status + '<option value=' + "0" + '>' + "-- Select --" + '</option>';
                                    for (var i = 0; i < data.length; i++) {
                                        status = status + '<option value=' + data[i].TOPIC_ID + '>' + data[i].TOPIC_NAME + '</option>';
                                    }
                                    status = status + '</select>';
                                    $('#ddlTopic').html(status);

                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    alert(xhr.responseText);
                                }
                            });
                        }
                        else if (returnValue.RETURN_VALUE == "0") {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Duplicate Topic name cannot be entered. Please enter a unique Topic name.'
                            });
                        }
                        else if (returnValue.RETURN_VALUE == "-30") {
                            Swal.fire({
                                icon: 'error',
                                title: 'Sorry!',
                                text: 'Duplicate Topic Sequence cannot be entered. Please enter a unique Topic Sequence. [Last Topic Sequence : ' + returnValue.RETURN_DUPLICATEMAPNAME + ']'
                            });
                        }

                        //else if (returnValue.RETURN_VALUE == "0" && returnValue.RETURN_DUPLICATEMAPNAME != "") {
                        //    Swal.fire({
                        //        icon: 'success',
                        //        title: 'Success',
                        //        text: 'Topic added successfully. Duplicate data exists for the following Based On with this Topic:\n' + returnValue.RETURN_DUPLICATEMAPNAME
                        //    }).then(() => {
                        //        $('#AddTopicModal').modal('hide');
                        //    });
                        //} else if (returnValue.RETURN_VALUE == "0" && returnValue.RETURN_DUPLICATEMAPNAME == "") {
                        //    Swal.fire({
                        //        icon: 'success',
                        //        title: 'Success',
                        //        text: 'Topic added successfully.'
                        //    }).then(() => {
                        //        $('#AddTopicModal').modal('hide');
                        //    });
                        //} else if (returnValue.RETURN_VALUE == "1") {
                        //    Swal.fire({
                        //        icon: 'error',
                        //        title: 'Error',
                        //        text: 'Please enter a unique Topic name. Duplicate data exists for the following Based On with this Topic:\n' + returnValue.RETURN_DUPLICATEMAPNAME
                        //    });
                        //}
                    },
                    error: function () {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while saving the topic.'
                        });
                    }
                });
            }
        });

    }
    function AddQuestionWithContent(ContentId, ContentTitle, TopicId, TopicTitle) {
        Is_ContentId = ContentId;
        Is_ContentTitle = ContentTitle;
        Is_TopicId = TopicId;
        Is_TopicTitle = TopicTitle;

        gridQuestionMapGridList.Refresh();
        gridQuestionMapGridList.Refresh();

       // $("#hdnAddEditMode").val('ADDQUESTION');
        $("#btnMapQuestion").hide();
        $("#btnAddQuestion").show();
        $("#lblAddMapQues").text("Add Question List");
        $("#hdnContentID").val(ContentId);
        $("#MapQuestionListModal").modal('show');

    }

    function AddQuestionWithContentFromSave(ContentId, ContentTitle, TopicId, TopicTitle) {
        Is_ContentId = ContentId;
        Is_ContentTitle = ContentTitle;
        Is_TopicId = TopicId;
        Is_TopicTitle = TopicTitle;

        //gridQuestionMapGridList.Refresh();
        //gridQuestionMapGridList.Refresh();

        $("#hdnAddEditMode").val('ADDQUESTION');
        $("#btnMapQuestion").hide();
        $("#btnAddQuestion").show();
        $("#lblAddMapQues").text("Add Question List");
        $("#hdnContentID").val(ContentId);
        $("#MapQuestionListModal").modal('show');

    }

    function UpdateStatusPublish(ContentId, TopicId, ContentTitle, chkStatus, statusrev) {

        Swal.fire({
            title: 'Change Status?',
            text: "Are you sure you want to " + statusrev + "?",
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes',
            cancelButtonText: 'No'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    type: "POST",
                    url: "/LMSContentUpload/UpdateStatusPublish",
                    data: JSON.stringify({ 'ContentId': ContentId, 'TopicId': TopicId, 'ContentTitle': ContentTitle, 'chkStatus': chkStatus }),
                    async: false,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        console.log(response);
                        if (response == "1") {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: 'Status updated successfully.'
                            }).then(() => {
                                /*gridLMSContent.Refresh();*/

                                $.ajax({
                                    type: "POST",
                                    url: "/LMSContentUpload/GetContentGridListData",
                                    async: false,
                                    data: JSON.stringify({ 'TopicId': TopicId }),
                                    contentType: "application/json; charset=utf-8",
                                    dataType: "json",
                                    success: function (data) {
                                        if (data.length > 0) {
                                            $("#btnShowTotalContents .filter-count").text(data[0].cnt_TotalContents);
                                            $("#btnShowActiveContents .filter-count").text(data[0].cnt_ActiveContents);
                                            $("#btnShowInactiveContents .filter-count").text(data[0].cnt_InactiveContents);

                                            allVideosData = data;
                                            filteredData = data;
                                            displayVideos(filteredData, currentPage);

                                           // $('#searchPanel').show();
                                           // $('#contentListing').show();
                                        }
                                        //hideLoader();
                                    },
                                    error: function (response) {
                                        alert("Please try again later");
                                        //hideLoader();
                                    }
                                });


                            });
                            //GridShow();


                        }
                        else {

                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Error in Status Update.'
                            });
                            //GridShow();

                        }

                    },
                    error: function (response) {
                        console.log(response);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred in Status update.'
                        });
                    }
                });

            }
        });



    }

    function AddQuizTime(ContentId, ContentTitle, TopicId, QuizTime) {

        $("#hdnContentID").val(ContentId);
        $("#hdnTopicID").val(TopicId);

        $("#hdQuizTimeTitle").text('Content : '+ ContentTitle);

        $("#quiztime_hour").val(QuizTime.substring(2,0));
        $("#quiztime_minute").val(QuizTime.substring(3, 5));
        $("#quiztime_second").val(QuizTime.substring(6, 8));

        $("#quizTimeModal").modal('show');


    }

    function UpdateQuizTime() {

        var ContentId = $("#hdnContentID").val();
        var timeValue = $("#quiztime_hour").val() + ":" + $("#quiztime_minute").val() + ":" + $("#quiztime_second").val();
        var TopicId = $("#hdnTopicID").val();

        Swal.fire({
            title: 'Quiz Time',
            text: "Are you sure you want to update Quiz Time ?",
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes',
            cancelButtonText: 'No'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    type: "POST",
                    url: "/LMSContentUpload/UpdateQuizTime",
                    data: JSON.stringify({ 'ContentId': ContentId, QuizTime: timeValue }),
                    async: false,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        console.log(response);
                        if (response == "1") {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: 'Quiz Time updated successfully.'
                            }).then(() => {
                                /*gridLMSContent.Refresh();*/

                                $.ajax({
                                    type: "POST",
                                    url: "/LMSContentUpload/GetContentGridListData",
                                    async: false,
                                    data: JSON.stringify({ 'TopicId': TopicId }),
                                    contentType: "application/json; charset=utf-8",
                                    dataType: "json",
                                    success: function (data) {
                                        if (data.length > 0) {
                                            $("#btnShowTotalContents .filter-count").text(data[0].cnt_TotalContents);
                                            $("#btnShowActiveContents .filter-count").text(data[0].cnt_ActiveContents);
                                            $("#btnShowInactiveContents .filter-count").text(data[0].cnt_InactiveContents);

                                            allVideosData = data;
                                            filteredData = data;
                                            displayVideos(filteredData, currentPage);

                                            //$('#searchPanel').show();
                                            //$('#contentListing').show();
                                        }
                                        //hideLoader();
                                        $("#quizTimeModal").modal('hide');
                                    },
                                    error: function (response) {
                                        alert("Please try again later");
                                        //hideLoader();
                                        $("#quizTimeModal").modal('hide');
                                    }
                                });


                            });
                            //GridShow();


                        }
                        else {

                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Error in Status Update.'
                            });
                            //GridShow();

                        }

                    },
                    error: function (response) {
                        console.log(response);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred in Status update.'
                        });
                    }
                });

            }
        });



    }

    function DeSelectAllGridLookup(s, e) {
        CategoryGridLookup.gridView.UnselectRows();

        Category = [];
        Category_ID = "";
    }
    function CategorySelectionChanged(s, e) {
        CategoryGridLookup.gridView.GetSelectedFieldValues("CATEGORYID", GetSelectedFieldValuesCallbackCategory);
    }
    function GetSelectedFieldValuesCallbackCategory(values) {
        try {
            Category = [];
            Category_ID = "";
            for (var i = 0; i < values.length; i++) {
                Category.push(values[i]);
                Category_ID += values[i] + ',';
            }
        } finally {
            console.log(Category);
        }
    }
    function SelectAllGridLookup(s, e) {
        CategoryGridLookup.gridView.SelectRows();
        Category = "";
        CategoryGridLookup.SetText("");
        $.ajax({
            type: 'POST',
            url: "/LMSQuestions/GetCategoryListJson",
            //data: { "Hoid": Hoid },
            dataType: "json",
            async: false,
            success: function (data) {
                Category = [];
                Category_ID = "";
                $.each(data, function (i, data) {
                    Category.push(data.CATEGORYID);
                    Category_ID += data.CATEGORYID + ',';
                });
                CategoryGridLookup.gridView.SelectRows();
            },
            error: function () {
            }
        });

    }


</script>

<script>
    $(document).ready(function () {
        var current_fs, next_fs, previous_fs; // fieldsets
        var left, opacity, scale; // fieldset properties which we will animate
        var animating; // flag to prevent quick multi-click glitches

        function showFirstFieldset() {
            var first_fs = $("#msform fieldset:first");
            var all_fs = $("#msform fieldset");

            all_fs.hide(); // Hide all fieldsets
            first_fs.show(); // Show the first fieldset

            // Reset the progress bar
            $("#progressbar li").removeClass("active");
            $("#progressbar li:first").addClass("active");

            // Reset any styles applied to the fieldsets
            all_fs.css({
                'transform': 'none',
                'position': 'relative',
                'left': '0',
                'opacity': '1'
            });
        }


        $(".upload-next").click(function () {
            // Rev Sanchita


            if ($("#txtContentTitle").val().trim() == "") {
                Swal.fire({
                    icon: 'warning',
                    title: 'Alert',
                    text: 'Please enter Content Title.'
                }).then(() => {
                    setTimeout(() => {
                        $("#txtContentTitle").focus();
                    }, 200);
                });
                //return;
            }

            else if ($("#txtContentDesc").val().trim() == "") {
                Swal.fire({
                    icon: 'warning',
                    title: 'Alert',
                    text: 'Please enter Content Description.'
                }).then(() => {
                    setTimeout(() => {
                        $("#txtContentDesc").focus();
                    }, 200);
                });
                //return;
            }

            else if ($("#ddlTopic").val() == 0 || $("#ddlTopic").val() == "" || $("#ddlTopic").val() == null) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Alert',
                    text: 'Please select Topic.'
                }).then(() => {
                    setTimeout(() => {
                        $("#ddlTopic").focus();
                    }, 200);
                });
                //return;
            }
            else {
                document.getElementById('divFooter').style.visibility = 'visible';

                $("#btnSubmit").addClass("newposition-btn");

                if ($("#hdnAddEditMode").val() == 'ADDCONTENT') {
                    $("#AddQuestion").hide();
                }
                else {
                    $("#AddQuestion").show();
                }

                if (animating) return false;
                animating = true;

                current_fs = $(this).parent();
                next_fs = $(this).parent().next();

                // Activate next step on progressbar using the index of next_fs
                /*$("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");*/

                // Activate next step on progressbar using the index of next_fs
                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");

                // Show the next fieldset
                next_fs.show();
                // Hide the current fieldset with style
                current_fs.animate({ opacity: 0 }, {
                    step: function (now, mx) {
                        // As the opacity of current_fs reduces to 0 - stored in "now"
                        // 1. Scale current_fs down to 80%
                        scale = 1 - (1 - now) * 0.2;
                        // 2. Bring next_fs from the right (50%)
                        left = (now * 50) + "%";
                        // 3. Increase opacity of next_fs to 1 as it moves in
                        opacity = 1 - now;
                        current_fs.css({
                            'transform': 'scale(' + scale + ')',
                            'position': 'absolute'
                        });
                        next_fs.css({ 'left': left, 'opacity': opacity });
                    },
                    duration: 200,
                    complete: function () {
                        current_fs.hide();
                        animating = false;
                    },
                    easing: 'easeInOutBack'
                });
            }
            // End of Rev Sanchita


        });

        $(".upload-previous").click(function () {
            if (animating) return false;
            animating = true;

            current_fs = $(this).parent();
            previous_fs = $(this).parent().prev();

            // De-activate current step on progressbar
            $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
            $("#progressbar li").eq($("fieldset").index(previous_fs)).addClass("active");

            $("#btnSubmit").removeClass("newposition-btn");

            if ($("#hdnAddEditMode").val() == 'EDITCONTENT') {
                document.getElementById('divFooter').style.visibility = 'visible';
                $("#AddQuestion").show();
            }
            else {
                document.getElementById('divFooter').style.visibility = 'hidden';
                $("#AddQuestion").hide();
            }

            // Show the previous fieldset
            previous_fs.show();
            // Hide the current fieldset with style
            current_fs.animate({ opacity: 0 }, {
                step: function (now, mx) {
                    // As the opacity of current_fs reduces to 0 - stored in "now"
                    // 1. Scale previous_fs from 80% to 100%
                    scale = 0.8 + (1 - now) * 0.2;
                    // 2. Take current_fs to the right (50%) - from 0%
                    left = ((1 - now) * 50) + "%";
                    // 3. Increase opacity of previous_fs to 1 as it moves in
                    opacity = 1 - now;
                    current_fs.css({ 'left': left, 'position': 'relative' });
                    previous_fs.css({ 'transform': 'scale(' + scale + ')', 'opacity': opacity, 'position': 'relative' });
                },
                duration: 200,
                complete: function () {
                    current_fs.hide();
                    animating = false;
                },
                easing: 'easeInOutBack'
            });
        });

        $('#AddContentModal').on('show.bs.modal', function () {
            // Reset the form to the first step when the modal is shown
            showFirstFieldset();
        });

        $('#AddContentModal').on('hide.bs.modal', function () {
            // Reset the form to the first step when the modal is hidden
            showFirstFieldset();
        });

        $(".Add-Question").click(function () {
            //AddQuestion(Is_ContentId, Is_ContentTitle, Is_TopicId);
            AddQuestionWithContent(Is_ContentId, Is_ContentTitle, Is_TopicId, Is_TopicTitle)
        });
    });

    function handleFileSelect(event) {
        const file = event.target.files[0];

        if (!file) {
            return;
        }

        showLoader();

        const filePreview = document.getElementById('filePreview');

        // Clear any existing preview
        filePreview.innerHTML = '';

        if (file.type.startsWith('image/')) {
            // Display image preview
            const img = document.createElement('img');
            img.classList.add('preview-img');
            img.file = file;
            filePreview.appendChild(img);

            const reader = new FileReader();
            reader.onload = (function (aImg) {
                return function (e) {
                    aImg.src = e.target.result;
                };
            })(img);
            reader.readAsDataURL(file);
        } else if (file.type.startsWith('video/')) {
            // Display video preview
            const video = document.createElement('video');
            video.classList.add('preview-video');
            video.file = file;
            video.controls = true;
            filePreview.appendChild(video);

            const reader = new FileReader();
            reader.onload = (function (aVideo) {
                return function (e) {
                    aVideo.src = e.target.result;
                };
            })(video);
            reader.readAsDataURL(file);
        } else {
            // File type not supported for preview
            filePreview.innerHTML = `<p>Preview not available for this file type (${file.type}).</p>`;
        }

        hideLoader();
    }

    function ddlTopicOnChange() {

        var obj = {};
        obj.topicid = $("#ddlTopic").val();

        $.ajax({
            type: "POST",
            url: "/LMSContentUpload/GetLastPlaySeq",
            data: JSON.stringify(obj),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            success: function (data) {
                console.log(data)
                $("#numPlaySequence").val(data.PlaySequence);
            }
        });
    }

    //function close() {
    //    $("#btnSubmit").removeClass("newposition-btn");
    //}

    //$('#content-upload-close').click(function () {
    //    $("#btnSubmit").removeClass("newposition-btn");
    //});


    $(document).ready(function () {
        $('#ddlTopic').select2({
            placeholder: "Select a topic",
        });
    });



    //    $(function () {
    //        $('#duration2').durationPicker({showSeconds: true, checkRanges: true, totalMax: 259200000});
    //});


    function closeContentModal() {
        $('#file-name-icon').text('');
        filePreview.innerHTML = '';

    }

</script>

<script>

    //var TOPICID = [];
    //var TOPIC_ID = "";

    var Category = [];
    var Category_ID = "";

    $(document).ready(function () {
        function validateInput($input, max) {
            $input.on('input', function () {
                let value = $input.val();

                // No negative values
                if (value < 0) {
                    $input.val(0);
                }

                // Max character length 2
                if (value.length > 2) {
                    $input.val(value.slice(0, 2));
                }

                // Max and min values
                if (value > max) {
                    $input.val(max);
                }
                if (value < 0) {
                    $input.val(0);
                }
            });

            $input.on('blur', function () {
                // Pad single digit numbers with a leading zero
                let value = $input.val();
                if (value.length === 1) {
                    $input.val('0' + value);
                }
            });
        }

        validateInput($('#quiztime_hour'), 24);
        validateInput($('#quiztime_minute'), 59);
        validateInput($('#quiztime_second'), 59);
    });

    function CancelQuestionAdd() {
        ClearQuesData();
        $("#AddQuestionModal").modal('hide');
    }

    function SaveQuestion(mode ) {
        var id = $("#hdnIDADd").val();
        if (id == "") {
            id = "0";
        }
        if ($("#txtQuestionName").val().trim() == "") {
        // SweetAlert for empty Question name
        Swal.fire({
            icon: 'warning',
            title: 'Warning',
            text: 'Enter Question Name to proceed.'
        });
        return false;
        }

        //else if ($("#txtQuestionDescription").val().trim() == "") {
        //// SweetAlert for empty Question description
        //Swal.fire({
        //    icon: 'warning',
        //    title: 'Warning',
        //    text: 'Enter Question Description to proceed.'
        //});
        //return false;
        //}
        else if ($("#txtOption1").val().trim() == "") {
            // SweetAlert for empty Question description
            Swal.fire({
                icon: 'warning',
                title: 'Warning',
                text: 'Enter Option1 to proceed.'
            });
            return false;
        }
        else if ($("#txtOption2").val().trim() == "") {
            // SweetAlert for empty Question description
            Swal.fire({
                icon: 'warning',
                title: 'Warning',
                text: 'Enter Option2 to proceed.'
            });
            return false;
        }
        else if ($("#txtOption3").val().trim() == "") {
            // SweetAlert for empty Question description
            Swal.fire({
                icon: 'warning',
                title: 'Warning',
                text: 'Enter Option3 to proceed.'
            });
            return false;
        }
        else if ($("#txtOption4").val().trim() == "") {
            // SweetAlert for empty Question description
            Swal.fire({
                icon: 'warning',
                title: 'Warning',
                text: 'Enter Option4 to proceed.'
            });
            return false;
        }
        if ($("#txtPoint1").val().trim() == "" || $("#txtPoint1").val().trim() == "0") {

            if ($("#txtPoint2").val().trim() == "" || $("#txtPoint2").val().trim() == "0") {

                if ($("#txtPoint3").val().trim() == "" || $("#txtPoint3").val().trim() == "0") {

                    if ($("#txtPoint4").val().trim() == "" || $("#txtPoint4").val().trim() == "0") {

                        //jAlert('Enter Points  to proceed.');
                        Swal.fire({
                            icon: 'warning',
                            title: 'Warning',
                            text: 'Please Enter minimum one point to proceed.'
                        });
                        return false;
                    }
                }
            }
        }
        var chkCorrect1 = document.getElementById("chkCorrect1").checked ? "1" : "0";
        var chkCorrect2 = document.getElementById("chkCorrect2").checked ? "1" : "0";
        var chkCorrect3 = document.getElementById("chkCorrect3").checked ? "1" : "0";
        var chkCorrect4 = document.getElementById("chkCorrect4").checked ? "1" : "0";

        if (chkCorrect1 == "0") {

            if (chkCorrect2 == "0") {

                if (chkCorrect3 == "0") {

                    if (chkCorrect4 == "0") {

                        Swal.fire({
                            icon: 'warning',
                            title: 'Warning',
                            text: 'Please tick the correct answer(s).'
                        });
                        return false;
                    }
                }
            }
        }

        if ($("#ddlTopicQ").val() == "") {
            Swal.fire({
                icon: 'warning',
                title: 'Warning',
                text: 'Select Topic(s) to proceed.'
            });
            return false;
        }
        //else if (Category_ID.trim() == "") {
        //    Swal.fire({
        //        icon: 'warning',
        //        title: 'Warning',
        //        text: 'Select Category to proceed.'
        //    });
        //    return false;
        //}
        else {

        var Option1 = $("#txtOption1").val().trim();
        var Option2 = $("#txtOption2").val().trim();
        var Option3 = $("#txtOption3").val().trim();
        var Option4 = $("#txtOption4").val().trim();

        var Point1 = $("#txtPoint1").val().trim();
        var Point2 = $("#txtPoint2").val().trim();
        var Point3 = $("#txtPoint3").val().trim();
        var Point4 = $("#txtPoint4").val().trim();

        var chkCorrect1 = document.getElementById("chkCorrect1").checked ? "1" : "0";

        if (chkCorrect1 == "1") {
            if ($("#txtPoint1").val().trim() == "" || $("#txtPoint1").val().trim() == "0") {
                Swal.fire({
                    icon: 'warning',
                    title: 'Warning',
                    text: 'Please Enter Point1 to proceed.'
                });
                return false;
            }
            if ($("#txtOption1").val().trim() == "" || $("#txtOption1").val().trim() == "0") {
                Swal.fire({
                    icon: 'warning',
                    title: 'Warning',
                    text: 'Please Enter Option1 to proceed.'
                });
                return false;
            }
        }

        var chkCorrect2 = document.getElementById("chkCorrect2").checked ? "1" : "0";

        if (chkCorrect2 == "1") {
            if ($("#txtPoint2").val().trim() == "" || $("#txtPoint2").val().trim() == "0") {
                Swal.fire({
                    icon: 'warning',
                    title: 'Warning',
                    text: 'Please Enter Point2 to proceed.'
                });
                return false;
            }
            if ($("#txtOption2").val().trim() == "" || $("#txtOption2").val().trim() == "0") {
                Swal.fire({
                    icon: 'warning',
                    title: 'Warning',
                    text: 'Please Enter Option2 to proceed.'
                });
                return false;
            }
        }
        var chkCorrect3 = document.getElementById("chkCorrect3").checked ? "1" : "0";
            if (chkCorrect3 == "1") {
                if ($("#txtPoint3").val().trim() == "" || $("#txtPoint3").val().trim() == "0") {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Warning',
                        text: 'Please Enter Point3 to proceed.'
                    });
                    return false;
                }
                if ($("#txtOption3").val().trim() == "" || $("#txtOption3").val().trim() == "0") {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Warning',
                        text: 'Please Enter Option3 to proceed.'
                    });
                    return false;
                }
            }


        var chkCorrect4 = document.getElementById("chkCorrect4").checked ? "1" : "0";

            if (chkCorrect4 == "1") {
                if ($("#txtPoint4").val().trim() == "" || $("#txtPoint4").val().trim() == "0") {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Warning',
                        text: 'Please Enter Point4 to proceed.'
                    });
                    return false;
                }
                if ($("#txtOption4").val().trim() == "" || $("#txtOption4").val().trim() == "0") {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Warning',
                        text: 'Please Enter Option4 to proceed.'
                    });
                    return false;
                }
            }

            showLoader();

        $.ajax({
            type: "POST",
            url: '@Url.Action("SaveQuestion", "LMSContentUpload")',
            data: {
                name: $("#txtQuestionName").val().trim(),
                id: id,
                description: $("#txtQuestionDescription").val().trim(),

                Option1: Option1,
                Option2: Option2,
                Option3: Option3,
                Option4: Option4,

                Point1: Point1,
                Point2: Point2,
                Point3: Point3,
                Point4: Point4,

                chkCorrect1: chkCorrect1,
                chkCorrect2: chkCorrect2,
                chkCorrect3: chkCorrect3,
                chkCorrect4: chkCorrect4,

                TOPIC_ID: $("#ddlTopicQ").val(),
                Category_ID: Category_ID,

                /*Rev Sanchita*/
                MODE: 'AddOnFly',
                CONTENTID: Is_ContentId
                /*End of Rev Sanchita*/

            },
            success: function (output_msg) {

                hideLoader();

                if (output_msg == "1") {
                    // SweetAlert success message
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Question saved successfully.'
                    }).then(() => {
                        if (mode == "New") {
                            ClearQuesData();

                            // TOPIC_ID = "";
                            Category_ID = "";
                        }
                        else {
                            $("#AddQuestionModal").modal('hide');

                            if ($("#hdnAddQFrom").val() == "save") {
                                ShowContentListiing($("#ddlTopic").val(), '');
                            }
                            else {
                                gridQuestionMapGridList.Refresh();
                                gridQuestionMapGridList.Refresh();
                            }
                            // window.location.href = '/LMS/LMSContentUpload/Index';
                        }

                        //location.reload();
                    });
                } else if (output_msg == "-1") {
                    // SweetAlert duplicate Question name warning
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Duplicate Question name cannot be entered. Please enter a unique Question name.'
                    });
                }
            }
        });
        }
    }
    function DeleteClick1()
    {
        $("#txtOption1").val("");
        $("#txtPoint1").val("");
        $("#chkCorrect1").prop("checked", false);
    }
    function checkboxClick1() {
        $("#txtPoint1").val("");
    }
    function DeleteClick2() {
        $("#txtOption2").val("");
        $("#txtPoint2").val("");
        $("#chkCorrect2").prop("checked", false);
    }
    function checkboxClick2() {
        $("#txtPoint2").val("");
    }
    function DeleteClick3() {
        $("#txtOption3").val("");
        $("#txtPoint3").val("");
        $("#chkCorrect3").prop("checked", false);
    }
    function checkboxClick3() {
        $("#txtPoint3").val("");
    }
    function DeleteClick4() {
        $("#txtOption4").val("");
        $("#txtPoint4").val("");
        $("#chkCorrect4").prop("checked", false);
    }
    function checkboxClick4() {
        $("#txtPoint4").val("");
    }
</script>

@*Rev 1.0*@
<style>
    .btn-VideoShow span img
    {
        width:34px;
        transition: all .3s;
    }

        .btn-VideoShow span img:hover
        {
            transform: scale(1.1);
        }

        .btn-VideoShow {
            background: transparent;
            padding-top: 0;
            padding-right: 0;
        }
    #ContentPlayModal .modal-header {
        margin-bottom: 10px;
        /*border-bottom: 1px solid #d5d5d5;*/
        border-bottom: 0;
        padding: 6px 20px !important;
    }

        #ContentPlayModal .modal-header .close {
            margin-top: 5px;
        }

        #ContentPlayModal .modal-dialog {
            width: 700px;
        }



    /*#ContentPlayModal .modal-body {
        height: 300px;
    }*/

    #ContentPlayModal .modal-footer {
        text-align:left;
        border-top: none;
    }

    #filePreviewListing {
        /*margin-top: 10px;*/
        height: 220px;
    }

        #filePreviewListing video {
            width: 95%;
            /*height: 300px;*/
        }



        #filePreviewListing video {
            position: absolute;
            width: 96%;
            height: 295px;
            top: 0;
            left: 2%;
            overflow: hidden;
            border-radius: 15px;
            box-shadow: 1px 1px 10px #11111136;
            background: #fff;
        }

    #file-nameListing
    {
        font-size: 18px;
        margin-left: 10px;
    }
</style>
<script>
    function ShowContentVideoInListing(ContentId, ContentTitle, TopicId, TopicTitle) {

    $("#hdnContentID").val(ContentId);

    Is_ContentId = ContentId;
    Is_ContentTitle = ContentTitle;
    Is_TopicId = TopicId;
    Is_TopicTitle = TopicTitle;

    $('#file-nameListing').text('');
    filePreviewListing.innerHTML = '';



    //$('#file-name-iocn').text('');
    //filePreviewicon.innerHTML = '';
    //$('#fileuploadicon').fileinput('clear');


    $.ajax({
        url: "@Url.Action("ShowContentDetails", "LMSContentUpload")",
        async: false,
        data: { ContentId: ContentId },
        type: 'POST',
        success: function (data) {

            $("#txtContentTitleListing").text(data[0].ContentTitle);
          //  $("#txtContentDesc").val(data[0].ContentDesc);
          //  $("#ddlTopic").val(data[0].TopicIds).trigger('change');
          //  $("#numPlaySequence").val(data[0].PlaySequence);
          //  $("#chkStatus").prop("checked", data[0].Status);
           // $("#hdnContentStatusOld").val(data[0].Status);
           // $("#chkAllowLike").prop("checked", data[0].AllowLike);
            //$("#chkAllowComments").prop("checked", data[0].AllowComments);
           // $("#chkAllowShare").prop("checked", data[0].AllowShare);
           // document.getElementById('divFooter').style.visibility = 'visible';
           // $("#submit-btnText").text("Save & Exit");
           // $("#btnSubmit img").attr("src", "../../../assests/images/save-circle.svg");
           // $("#AddQuestion").show();

            $('#file-nameListing').text(data[0].CONTENT_FILENAME);
            //$('#file-name-icon').text(data[0].CONTENT_FILENAMEICON);

            var initialPreview = [];
            var initialPreviewConfig = [];

            var videoName = data[0].CONTENT_FILEPATH.replace('~', ''); // Assuming this is the physical path of the video

            var baseUrl = '@Url.Action("Play", "ContentUpload", new { fileName = "" })';


           // Build the full URL
            var videoUrl = '/' + encodeURIComponent(videoName);
            const video = document.createElement('video');
            video.src = videoUrl;

            // Set the video attributes
            video.controls = true; // Show the video controls (play, pause, etc.)

            // Append the video element to the DOM
            const videoContainer = document.getElementById('filePreviewListing');
            videoContainer.appendChild(video);

            // Load and play the video (optional)
            video.load();
            //


            //

            var iconimgName = data[0].CONTENT_FILEPATHICON.replace('~', ''); // Assuming this is the physical path of the video

            var ImgUrlicon = '/' + encodeURIComponent(iconimgName);
            const image = document.createElement('img');

            image.src = ImgUrlicon;

            // Set the image attributes (optional)
            image.alt = 'Preview Image'; // Alternative text for the image

            // Append the image element to the DOM
            const imageContainer = document.getElementById('filePreviewicon');
            imageContainer.appendChild(image);
            //

            $("#ContentPlayModal").modal('show');


            },
        error: function () {
        },
    });
}
</script>
@*Rev 1.0 End*@

<div id="gmap-loader" class="mLoader hide">
    <img src="/assests/images/Rainbow.gif" />
    <h4>Content Uploading, Please Wait</h4>
</div>


<div class="breadCumb">
    <span>Content</span>
</div>

<div class="container ">
    <div class="row">
        <div class="col-md-12">
            <div class="backBox mt-5 p-4">
                <div class="">

                    <div id="secondViewContainer"></div>

                    <div class="col-md-12  buttons-alignment" style="padding-top: 0; margin-bottom: 5px;">
                        <div class="add-show-btns">
                            @if (ViewBag.CanAdd)
                            {
                                <button type="button" class="btn add-btn add-new-btn" data-toggle="modal" data-target="#myModal" data-backdrop="static" data-keyboard="false" onclick="AddContent();">
                                    <span class="btn-icon"><i class="fa fa-plus"></i></span> New Content
                                </button>
                            }

                            @if (ViewBag.CanView)
                            {
                                <button type="button" id="btnshow" class="btn show-btn" tabindex=4>
                                    @*<span class="btn-icon"><i class="fa fa-play" aria-hidden="true"></i></span>*@
                                    <span class="btn-icon"><img src="../../../assests/images/content.svg"></span>
                                    Show Topics
                                </button>
                            }

                            @if (ViewBag.CanView)
                            {
                                <button type="button" id="btnBackToTopicList" class="btn show-btn" tabindex=4>
                                    <span class="btn-icon"><img src="../../../assests/images/back-topic.svg"></span> Back To Topic List
                                </button>
                            }
                        </div>

                        <div class="count-filter-btns">

                            @if (ViewBag.CanView)
                            {
                                <button type="button" class="btn btn-total btn-radius bg-color-6" id="btnShowTotalContents" onclick="ShowTotalContents();">
                                    <h5>Total content(s)</h5> <span class="filter-count">0</span>
                                </button>

                            }

                            @if (ViewBag.CanView)
                            {
                                <button type="button" class="btn btn-total-used btn-radius bg-color-6" id="btnShowActiveContents" onclick="ShowActiveContents();">
                                    <h5>Published content(s)</h5> <span class="filter-count">0</span>
                                </button>

                            }

                            @if (ViewBag.CanView)
                            {
                                <button type="button" class="btn btn-total-unused btn-radius bg-color-6" id="btnShowInactiveContents" onclick="ShowInactiveContents();">
                                    <h5>Unpublished content(s)</h5> <span class="filter-count">0</span>
                                </button>

                            }

                        </div>
                    </div>


                    <div class="clear"></div>
                </div>
                <div class="clear"></div>
                <div class="clearfix"></div>

                @*<div class="scrooler">
                        <div id="refreshgrid">
                            @{
                                Html.RenderAction("PartialContentGridList", "LMSContentUpload", new { Is_PageLoad = "Ispageload" });
                            }
                        </div>
                    </div>*@
                <div class=" mb-3 clearfix" id="divTopicName" style="display:none; margin-top: 15px">
                    <div class="row">
                        <div class="col-md-9 d-flex">
                            <h4> <span id="spTopicName"></span> </h4>
                            <div id="topic-list-search" class="input-group" style="display: none;">
                                <div class="input-group-prepend search-icon">
                                    <span class="input-group-text"><i class="fa fa-search"></i></span>
                                </div>
                                <input type="text" id="searchInput" placeholder="Search topics..." class="form-control topic-search-input">
                            </div>
                        </div>
                        <div class="col-md-3">
                            @*<input type="text" id="searchInput" placeholder="Search topics..." class="form-control">*@

                        </div>

                    </div>

                </div>



                <div class="row topic-list" id="divTopicList" style="margin-top: 15px">

                </div>

                <div id="pagination" class="topic-list-pagination" style="display: none;"></div>

                <div class="content-listing-part" id="contentListing" style="display: none; margin-top: 5px">


                    <div id="searchPanel" class="row" style="display: none;">


                        <div class="col-md-6 content-search-box mb-4">
                            <input type="text" id="searchInput-content" class="form-control" placeholder="Search by video title">
                            @*<button id="btnSearch" class="btn btn-primary"><i class="fa fa-search" aria-hidden="true"></i></button>
                                <button id="btnShowAll" class="btn add-btn"><img src="../../../assests/images/undo.svg">Reset</button>*@
                        </div>

                        <div class="col-md-6">
                            <nav aria-label="Page navigation">
                                <ul class="pagination" id="paginationContainer"></ul>
                            </nav>
                        </div>
                    </div>
                    <div id="noDataMessage" style="display: none;">Sorry! Content not found</div>
                    <div class="row mt-3" id="videoContainer"></div>

                </div>

            </div>
        </div>
    </div>
</div>


<div id="AddContentModal" class="modal fade pmsModal w80" data-backdrop="static" role="dialog">
    <div class="modal-dialog ">
        <div class="modal-content">



            @using (Html.BeginForm("SaveContent", "LMSContentUpload", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" id="content-upload-close" onclick="closeContentModal()">&times;</button>
                    @*<h4 class="modal-title">Create Content</h4>*@
                </div>
                <div class="modal-body">

                    <div id="msform">
                        <ul id="progressbar">
                            <li class="active">

                                <h5>Content Details</h5>
                            </li>
                            <li>

                                <h5>Upload Content</h5>
                            </li>

                        </ul>
                        <fieldset>
                            <div class="row clearfix mb-5">
                                @*<div class="col-lg-12 mb-3">
                                        <h3>Tell Us about your content</h3>

                                    </div>*@
                                <div class="col-lg-12 mb-4 text-left">
                                    <label>Content Title<span style="color: red">*</span></label>
                                    <input type="text" id="txtContentTitle" name="txtContentTitle" class="form-control" maxlength="250" />
                                </div>
                                <div class="col-lg-12 mb-4 text-left">
                                    <label>Content Description<span style="color: red">*</span></label>
                                    <input type="text" id="txtContentDesc" name="txtContentDesc" class="form-control" maxlength="250" />
                                </div>
                                <div class="col-lg-6 mb-5 text-left">
                                    @if (ViewBag.CanAddTopic)
                                    {
                                        <div class="flex-label"><label>Select Topic <span style="color: red">*</span></label> <a href="#" id="openlinkForTopicAdd"><i class="fa fa-plus"></i>Create topic</a></div>
                                    }
                                    else
                                    {
                                        <div class="flex-label"><label>Select Topic <span style="color: red">*</span></label> </div>
                                    }

                                    @*@Html.DropDownListFor(m => m.TopicId, new SelectList(Model.TopicList, "TOPIC_ID", "TOPIC_NAME", Model.TopicId), new { @id = "ddlTopic", @class = "form-control", @onchange = "ddlTopicOnChange();" })*@
                                    @Html.DropDownListFor(m => m.TopicId, new SelectList(Model.TopicList, "TOPIC_ID", "TOPIC_NAME", null), "Select a topic", new { @id = "ddlTopic", @class = "form-control", @onchange = "ddlTopicOnChange();" })
                                </div>
                                <div class="col-lg-6 mb-5 text-left">
                                    <label>Play Sequence</label>
                                    <input type="number" id="numPlaySequence" name="numPlaySequence" class="form-control" maxlength="100" min="1" />
                                </div>

                                <div class="clear"></div>
                                <div class="clearfix">
                                    <div class="col-lg-3 flex-toggle">
                                        <label>Publish</label>
                                        <label class="switch">
                                            <input type="checkbox" id="chkStatus" name="chkStatus" class="styled-checkbox" checked />
                                            <span class="slider round"></span>
                                        </label>
                                    </div>
                                    <div class="col-lg-3 flex-toggle">
                                        <label>Like</label>
                                        @*<button type="button" class="btn btn-sm btn-toggle" id="chkAllowLike" name="chkAllowLike" data-toggle="button" aria-pressed="true" autocomplete="off">
                                                <div class="handle"></div>
                                            </button>*@
                                        @*<div><input type="checkbox" id="chkAllowLike" name="chkAllowLike" class="styled-checkbox" /><label>like</label></div>*@
                                        <label class="switch">
                                            <input type="checkbox" id="chkAllowLike" name="chkAllowLike" class="styled-checkbox" />
                                            <span class="slider round"></span>
                                        </label>
                                    </div>
                                    <div class="col-lg-3 flex-toggle">

                                        <label>Comments</label>
                                        @*<button type="button" class="btn btn-sm btn-toggle" id="chkAllowLike" name="chkAllowLike" data-toggle="button" aria-pressed="true" autocomplete="off">
                                                <div class="handle"></div>
                                            </button>*@
                                        @*<div><input type="checkbox" id="chkAllowComments" name="chkAllowComments" class="styled-checkbox" /><label>Comments</label></div>*@
                                        <label class="switch">
                                            <input type="checkbox" id="chkAllowComments" name="chkAllowComments" class="styled-checkbox" />
                                            <span class="slider round"></span>
                                        </label>
                                    </div>
                                    <div class="col-lg-3 flex-toggle">

                                        <label>Share</label>
                                        @*<button type="button" class="btn btn-sm btn-toggle" id="chkAllowLike" name="chkAllowLike" data-toggle="button" aria-pressed="true" autocomplete="off">
                                                <div class="handle"></div>
                                            </button>*@
                                        @*<div><input type="checkbox" id="chkAllowShare" name="chkAllowShare" class="styled-checkbox" /><label>Share</label></div>*@
                                        <label class="switch">
                                            <input type="checkbox" id="chkAllowShare" name="chkAllowShare" class="styled-checkbox" />
                                            <span class="slider round"></span>
                                        </label>
                                    </div>
                                </div>
                            </div>

                            @*<input type="button" name="AddQuestion" id="AddQuestion" class="Add-Question btn-primary add-question-btn" value="Add Question" />*@
                            @*<input type="button" name="next" class="upload-next action-button btn-primary" value="Next" onclick="NextButtonClick()" />*@

                            @if (ViewBag.CanAddQues)
                            {
                                <button type="button" name="AddQuestion" id="AddQuestion" class="Add-Question btn-primary add-question-btn" style="display:none">
                                    <img src="../../../assests/images/question-add.svg">
                                    Add Question
                                </button>
                            }


                            <button type="button" name="next" class="upload-next action-button btn-primary" onclick="NextButtonClick()">
                                <img src="../../../assests/images/next.svg">
                                Next
                            </button>

                        </fieldset>
                        <fieldset>
                            <div class="col-md-5 col-md-offset-1">
                                @*<h3>Upload your content</h3>*@
                                <div class=" mb-5">
                                    <div class="form-group text-left">
                                        <label>Choose File:</label>
                                        <div class="clearfix">
                                            @*<div class="custom-file">
                                                    <input type="file" id="fileupload" name="fileupload" class="custom-file-input" accept=".mp4" />
                                                </div>*@
                                            <div class="custom-file">
                                                @*<input type="file" id="fileupload" name="fileupload" class="custom-file-input" accept=".mp4" />*@

                                                <input type="file" id="fileupload" name="fileupload" accept=".mp4" onchange="handleFileSelect(event)">
                                                <div id="filePreview"></div>


                                                <label class="custom-file-label upload-btn" for="fileupload">
                                                    <img src="../../../assests/images/upload.svg"> Upload
                                                </label>
                                                <div class="file-name" id="file-name"></div>
                                            </div>

                                        </div>
                                    </div>
                                    <p class="text-muted red" style="color:red">Supported types: MP4 (File size limited to @ViewBag.LMSVideoUploadSize Mb)</p>
                                    <div class="progress" style="display: none">
                                        <div class="bar"></div>
                                        <div class="percent">0%</div>
                                    </div>
                                    <div id="status"></div>
                                </div>
                            </div>

                            <div class="col-md-5">
                                <div class=" mb-5">
                                    <div class="form-group text-left">
                                        <label>Choose Thumbnail File:</label>
                                        <div class="clearfix">
                                            <div class="custom-file">
                                                <input type="file" id="fileuploadicon" name="fileuploadicon" accept=".jpg">
                                                <div id="filePreviewicon"></div>

                                                <label class="custom-file-label upload-btn" for="fileuploadicon">
                                                    <img src="../../../assests/images/upload.svg"> Upload
                                                </label>
                                                <div class="file-name-icon" id="file-name-icon"></div>
                                            </div>

                                        </div>
                                    </div>

                                    <p class="text-muted red" style="color:red">Supported types: JPG (File size limited to 1 Mb)</p>
                                </div>

                            </div>

                            @*<div class="col-md-6  text-left">
                                    <label>Thumbnail:</label>
                                    <div class="thumbnail-box">
                                        <button type="button" class="btn btn-success"><img src="~/assests/images/up-loading.svg"/> Upload</button>
                                        Or
                                        <button type="button" class="btn btn-export"><img src="~/assests/images/create-img.svg" /> Create Thumbnail</button>
                                    </div>
                                </div>*@
                            <div class="clear"></div>

                            <input type="hidden" id="hdnAddEditMode" name="hdnAddEditMode" />
                            <input type="hidden" id="hdnContentID" name="hdnContentID" />
                            <input type="hidden" id="hdnFileDuration" name="hdnFileDuration" />
                            <input type="hidden" id="hdnTopicID" name="hdnTopicID" />
                            <input type="hidden" id="hdnCategoryID" name="hdnCategoryID" />
                            <input type="hidden" id="hdnContentStatusOld" name="hdnContentStatusOld" />
                            <input type="hidden" id="hdnTopicIDForSearch" name="hdnTopicIDForSearch" />
                            <input type="hidden" id="hdnAddQFrom" name="hdnAddEditMode" />


                            @*<input type="button" name="previous" class="upload-previous action-button-previous btn btn-success" value="Previous" onclick="PreviousButtonOnClick()" />*@
                            @*<input type="submit" class="submit action-button" value="Submit" />*@
                            @*<button type="submit" class="submit action-button">Upload & Exit</button>*@

                            @*<button type="button" name="AddQuestion" id="AddQuestion" class="Add-Question btn-primary add-question-btn">
                                    <img src="../../../assests/images/question-add.svg">
                                    Add Question
                                </button>*@

                            <button type="button" name="previous" class="upload-previous action-button-previous btn btn-success" onclick="PreviousButtonOnClick()">
                                <img src="../../../assests/images/previous.svg">
                                Previous
                            </button>

                        </fieldset>

                    </div>

                    <div class="clearfix">

                        <div class="col-lg-7">

                        </div>

                        <div class="col-md-5">

                        </div>

                    </div>
                    @*<div class="clearfix">


                        </div>*@
                    @*<div class="clearfix">

                        </div>*@



                    <div class="clear"></div>
                    <div class="clearfix"></div>


                </div>

                <div class="" id="divFooter">
                    <button type="submit" id="btnSubmit" class="btn btn-success upload-exit-btn"><img src="../../../assests/images/upload-new.svg"> <span id="submit-btnText">Upload & Exit</span></button>
                    @*<button type="button" class="btn btn-danger" data-dismiss="modal">Cancel & Exit</button>*@
                </div>
            }
        </div>
    </div>
</div>

<div id="MapQuestionListModal" class="modal fade pmsModal w80" data-backdrop="static" role="dialog">
    <div class="modal-dialog ">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" onclick="close()">&times;</button>
                <h4 class="modal-title" id="lblAddMapQues">Add/Map Question List</h4>
            </div>

            <div class="modal-body">
                <div class="clearfix">
                    <div class="col-md-12  buttons-alignment" style="padding-top: 0; margin-bottom: 15px;">
                        <div class="add-show-btns">
                            <button type="button" id="btnMapQuestion" class="btn add-btn" data-toggle="modal" data-target="#myModal" data-backdrop="static" data-keyboard="false" onclick="AddContentQuestionMap(Is_ContentId, Is_ContentTitle);">
                                <span class="btn-icon"><i class="fa fa-plus"></i></span> Map Question
                            </button>
                            <button type="button" id="btnAddQuestion" class="btn add-btn" data-toggle="modal" data-target="#myModal" data-backdrop="static" data-keyboard="false" onclick="AddQuestion(Is_ContentId, Is_ContentTitle, Is_TopicId);">
                                <span class="btn-icon"><i class="fa fa-plus"></i></span> Add Question
                            </button>

                            @if (ViewBag.CanExport)
                            {
                                <button type="button" id="btnExportTo" class="btn btn-success btn-export" data-toggle="modal" data-target="#myModal" data-backdrop="static" data-keyboard="false">
                                    <span class="btn-icon"><img src="/assests/images/xlsx.png" /></span>&nbsp; Export to XLSX
                                </button>
                            }
                        </div>
                    </div>
                </div>

                <div class="clear"></div>
                <div class="clearfix"></div>

                <div class="clearfix">
                    <div class="scrooler">
                        <div id="refreshgrid">
                            @{
                                Html.RenderAction("PartialQuestionMapGridList", "LMSContentUpload", new { Is_ContentId = "0" });
                            }
                        </div>
                    </div>
                </div>

            </div>

            <input type="hidden" id="hdnContentIDForMap" name="hdnContentIDForMap" />

        </div>

    </div>
</div>

<div id="AddQuestionMapModal" class="modal fade pmsModal w80" data-backdrop="static" role="dialog">
    <div class="modal-dialog ">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" onclick="close()">&times;</button>
                <h4 class="modal-title">Map Question</h4>
            </div>
            <div class="modal-body">
                <div class="clearfix">
                    <div class="col-lg-12 map-content-title">
                        <label><b>For the Content : </b></label>
                        <label id="lblContent"></label>
                    </div>
                </div>

                <div class="clear"></div>
                <div class="clearfix"></div>

                <div class="clearfix">
                    <div class="col-lg-5">
                        <label>Filter Question on Topic(s)</label>
                        @Html.Action("GetLMSTopicList", "LMSContentUpload")
                    </div>
                    <div class="col-lg-5">
                        <label>Filter Question on Categories(s)</label>
                        @Html.Action("GetLMSCategoriesList", "LMSContentUpload")
                    </div>
                    <div class="col-lg-2" style=" margin-top: 25px;">
                        <button type="button" id="btnShowQuestions" class="btn btn-success" onclick="ShowQuestionsClick();">Show Question(s)</button>
                    </div>
                </div>
                <div class="clearfix">
                    <div class="col-md-12 mt-15">

                        <div>
                            <div id="transfer1" class="transfer-demo"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" onclick="SaveContentQuestionMap();">Assign & Exit</button>
                <button type="button" class="btn btn-danger" data-dismiss="modal">Cancel & Exit</button>

            </div>
        </div>

    </div>
</div>
<div id="MappedQuestionsForViewModal" class="modal fade pmsModal w80" data-backdrop="static" role="dialog">
    <div class="modal-dialog ">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" onclick="close()">&times;</button>
                <h4 class="modal-title">Mappped Questions</h4>
            </div>

            <div class="modal-body">
                <div class="clearfix">
                    <div class="col-lg-12">
                        <label><b>For the Content : </b></label>
                        <label id="lblContentQ"></label>
                    </div>
                </div>

                <div class="clear"></div>
                <div class="clearfix"></div>

                <div class="clearfix">
                    <div class="scrooler">
                        <div id="refreshgrid">
                            @{
                                Html.RenderAction("PartialMappedQuesForView", "LMSContentUpload", new { Is_ContentId = "0" });
                            }
                        </div>
                    </div>
                </div>

            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal">Exit</button>

            </div>
        </div>

    </div>
</div>

<script>


    // scripts.js

    document.addEventListener('DOMContentLoaded', function () {
        const form = document.getElementById('multiStepForm');
        if (form) {
            const steps = form.querySelectorAll('.step');
            let currentStep = 0;

            showStep(currentStep);

            form.addEventListener('click', function (event) {
                if (event.target.classList.contains('next')) {
                    currentStep++;
                    showStep(currentStep);
                } else if (event.target.classList.contains('prev')) {
                    currentStep--;
                    showStep(currentStep);
                }
            });

            form.addEventListener('submit', function (event) {
                event.preventDefault();
                alert('Form submitted!');
                // Add form submission logic here
            });

            function showStep(step) {
                steps.forEach((fieldset, index) => {
                    if (index === step) {
                        fieldset.style.display = 'block';
                    } else {
                        fieldset.style.display = 'none';
                    }
                });
            }
        }
    });


</script>
<div id="AddTopicModal" class="modal fade pmsModal w80" data-backdrop="static" role="dialog">
    <div class="modal-dialog ">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" onclick="close()">&times;</button>
                <h4 class="modal-title">Create Topic</h4>
            </div>
            <div class="modal-body">
                <div class="clearfix">
                    <div class="col-lg-12 mb-3">
                        <label>Topic Name<span style="color: red">*</span></label>
                        <input type="text" id="txtTopicName" class="form-control" maxlength="250" tabindex="-1" />
                        <asp:HiddenField ID="hdnHeaderId" runat="server" />
                    </div>
                    <div class="col-lg-3">
                        <label>Topic Sequence</label>
                        <input type="number" id="numTopicSequence" name="numTopicSequence" class="form-control" maxlength="100" min="1" />
                    </div>
                    <div class="col-lg-6 d-none">
                        <label>Topic Completion Day(s)</label>
                        <input type="number" id="numTopicCompDay" name="numTopicCompDay" class="form-control" maxlength="100" min="1" />
                    </div>
                    <div class="col-lg-4">
                        <label>Based On</label>
                        @Html.DropDownListFor(m => m.TopicBasedOnId, new SelectList(Model.TopicBasedOnList, "TOPICBASEDON_ID", "TOPICBASEDON_NAME", Model.TopicBasedOnId), new { @id = "ddlTopicBasedOn", @class = "form-control", @onchange = "ddlTopicBasedOnChange();" })

                    </div>
                    <div class="col-lg-2 mb-4" style="height: 60px;">
                        <label> </label>
                        <div class="active-checkbox"><input type="checkbox" id="chkStatus" name="chkStatus" class="styled-checkbox" checked /><label>Publish</label></div>
                    </div>
                    <div class="col-lg-3 " style="height: 60px;">
                        <label> </label>
                        <div class="active-checkbox mt-3"><input type="checkbox" id="chkDefault" name="chkDefault" class="styled-checkbox" /><label>Default Topic</label></div>
                    </div>
                </div>
                @*<div class="clearfix">
                        <div class="col-lg-4 " style="height: 60px;">
                            <label> </label>
                            <div class="active-checkbox mt-3"><input type="checkbox" id="chkDefault" name="chkDefault" class="styled-checkbox" /><label>Default Topic</label></div>
                        </div>
                    </div>*@
                <div class="clearfix">
                    <div class="col-md-12">
                        <label id="lblBasedOn"> </label>
                        <div>
                            <div id="transfer1T" class="transfer-demo"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger cancel-catg" data-dismiss="modal"><span class="btn-icon"><img src="../../../assests/images/cancel.svg"></span> Cancel & Exit</button>
                <button type="button" class="btn btn-success save-button" onclick="SaveTopics();"><span class="btn-icon"><img src="../../../assests/images/save-instagram.svg"></span> Save & Exit</button>
            </div>
        </div>

    </div>
</div>

<div id="quizTimeModal" class="modal fade pmsModal w80" data-backdrop="static" role="dialog">
    <div class="modal-dialog ">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" onclick="close()">&times;</button>
                <h4 class="modal-title">Set Quiz Time </h4>
            </div>
            <div class="modal-body">
                <div class="col-lg-12">
                    <h5 id="hdQuizTimeTitle" class="mb-20"> </h5>
                </div>
                <div class="clearfix">
                    <div class="col-lg-4">
                        <label>Hour(s)</label>
                        <input type="number" id="quiztime_hour" class="form-control" maxlength="2" tabindex="1" placeholder="00" />

                    </div>
                    <div class="col-lg-4">
                        <label>Minute(s)</label>
                        <input type="number" id="quiztime_minute" class="form-control" maxlength="2" tabindex="2" placeholder="00" />
                    </div>
                    <div class="col-lg-4">
                        <label>Second(s)</label>
                        <input type="number" id="quiztime_second" class="form-control" maxlength="2" tabindex="3" placeholder="00" />
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger  cancel-catg" tabindex="4" data-dismiss="modal"><span class="btn-icon"><img src="../../../assests/images/cancel.svg"></span> Cancel</button>
                <button type="button" class="btn btn-success save-button" tabindex="5" onclick="UpdateQuizTime();"><span class="btn-icon"><img src="../../../assests/images/save-instagram.svg"></span> Save</button>
            </div>
        </div>

    </div>
</div>

<div id="AddQuestionModal" class="modal fade pmsModal w80" data-backdrop="static" role="dialog">
    <div class="modal-dialog ">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" onclick="CancelQuestionAdd()">&times;</button>
                <h4 class="modal-title">Add Question</h4>
            </div>
            <div class="modal-body">


                <div class="row">
                    <div class="col-md-12">
                        <div><label>Question Name <span class="red">*</span></label></div>
                        <div>
                            <input type="text" id="txtQuestionName" maxlength="250" class="form-control" />
                        </div>
                    </div>
                    <div class="col-md-12 mb-4 mt-3">
                        <div><label>Question Description </label></div>
                        <div>
                            <textarea rows="5" class="form-control" style="height:50px" cols="20" id="txtQuestionDescription" maxlength="500"></textarea>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <label>Options</label>
                    </div>

                </div>

                <div class="option-part">
                    <div class="ans-option">
                        <div class="delete-col">
                            <div>
                                <a style='cursor:pointer' class='pad tooltip-container' onclick="DeleteClick1()"><img src='/assests/images/clear-qst-ans.png' /><div class="tooltip">Clear</div> </a>
                            </div>
                        </div>
                        <div class="option-col">
                            <div>
                                <input type="text" id="txtOption1" class="form-control" placeholder="Option 1" />
                            </div>
                        </div>
                        <div class="number-col">
                            <div>
                                <input type="number" id="txtPoint1" class="form-control  numbersOnly" placeholder="Point 1" min="1" max="999" maxlength="3" disabled />
                            </div>
                        </div>
                        <div class="correct-col">
                            <div><input type="checkbox" id="chkCorrect1" class="styled-checkbox" onclick="checkboxClick1()" /><label>Correct</label></div>
                        </div>
                    </div>
                    <div class="ans-option">


                        <div class="delete-col">
                            <div>
                                <a style='cursor:pointer' class='pad tooltip-container' onclick="DeleteClick2()"><img src='/assests/images/clear-qst-ans.png' /> <div class="tooltip">Clear</div></a>
                            </div>
                        </div>
                        <div class="option-col">
                            <div>
                                <input type="text" id="txtOption2" class="form-control" placeholder="Option 2" />
                            </div>
                        </div>
                        <div class="number-col">
                            <div>
                                <input type="number" id="txtPoint2" class="form-control  numbersOnly" placeholder="Point 2" min="1" max="999" maxlength="3" disabled />
                            </div>
                        </div>
                        <div class="correct-col">
                            <div><input type="checkbox" id="chkCorrect2" class="styled-checkbox" onclick="checkboxClick2()" /><label>Correct</label></div>
                        </div>

                    </div>
                    <div class="ans-option">


                        <div class="delete-col">
                            <div>
                                <a style='cursor:pointer' class='pad tooltip-container' onclick="DeleteClick3()"><img src='/assests/images/clear-qst-ans.png' /> <div class="tooltip">Clear</div></a>
                            </div>
                        </div>
                        <div class="option-col">
                            <div>
                                <input type="text" id="txtOption3" class="form-control" placeholder="Option 3" />
                            </div>
                        </div>
                        <div class="number-col">
                            <div>
                                <input type="number" id="txtPoint3" class="form-control  numbersOnly" placeholder="Point 3" min="1" max="999" maxlength="3" disabled />
                            </div>
                        </div>
                        <div class="correct-col">
                            <div><input type="checkbox" id="chkCorrect3" class="styled-checkbox" onclick="checkboxClick3()" /><label>Correct</label></div>
                        </div>

                    </div>
                    <div class="ans-option">

                        <div class="delete-col">
                            <div>
                                <a style='cursor:pointer' class='pad tooltip-container' onclick="DeleteClick4()"><img src='/assests/images/clear-qst-ans.png' /> <div class="tooltip">Clear</div></a>
                            </div>
                        </div>
                        <div class="option-col">
                            <div>
                                <input type="text" id="txtOption4" class="form-control" placeholder="Option 4" />
                            </div>
                        </div>
                        <div class="number-col">
                            <div>
                                <input type="number" id="txtPoint4" class="form-control  numbersOnly" placeholder="Point 4" min="1" max="999" maxlength="3" disabled />
                            </div>
                        </div>
                        <div class="correct-col">
                            <div><input type="checkbox" id="chkCorrect4" class="styled-checkbox" onclick="checkboxClick4()" /><label>Correct</label></div>
                        </div>

                    </div>
                </div>
                <div class="row mb-5 mt-4">
                    <div class="col-md-6">
                        <label>Map Topic(s)<span class="red">*</span></label>
                        @*@Html.Action("GetTopicList", "LMSQuestions", new { QUESTIONS_ID = @Model.QUESTIONS_ID })*@
                        @Html.DropDownListFor(m => m.TopicId, new SelectList(Model.TopicList, "TOPIC_ID", "TOPIC_NAME", null), "", new { @id = "ddlTopicQ", @class = "form-control" })
                    </div>
                    <div class="col-md-6">
                        <label>Map Categories</label>
                        @Html.Action("GetCategoryList", "LMSQuestions", new { QUESTIONS_ID = @Model.QUESTIONS_ID })
                    </div>

                </div>

            </div>
            <div class="modal-footer">
                <div class="save-exit-btn">
                    <button type="button" class="btn btn-cancel cancel-catg" onclick="CancelQuestionAdd()"><span class="btn-icon"><img src="../../../assests/images/cancel.svg"></span> Cancel & Exit</button>


                    @if (ViewBag.CanAdd && Convert.ToInt16(ViewBag.IsView) == 0 || Convert.ToInt16(ViewBag.IsView) == 2)
                    {
                        <button type="button" id="btnSave" class="btn btn-warning" onclick="SaveQuestion('Exit')"><span class="btn-icon"><img src="../../../assests/images/save-instagram-orange.svg"></span> Save & Exit</button>
                    }
                    @if (ViewBag.CanAdd && Convert.ToInt16(ViewBag.IsView) == 0 || Convert.ToInt16(ViewBag.IsView) == 2)
                    {
                        <button type="button" id="btnSaveNew" class="btn btn-success" onclick="SaveQuestion('New')"><span class="btn-icon"><img src="../../../assests/images/save-instagram.svg"></span> Save & New</button>
                    }

                </div>
            </div>
        </div>
        <input type="hidden" value="@Model.QUESTIONS_ID" id="hdnIDADd" />

    </div>
</div>


@*Rev 1.0*@
<div id="ContentPlayModal" class="modal fade pmsModal w80" data-backdrop="static" role="dialog">
    <div class="modal-dialog ">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" onclick="close()">&times;</button>
                <h4 id="txtContentTitleListing"></h4>

            </div>
            <div class="modal-body">
                @*<div class="clearfix">
                    <div class="row">
                        <div class="col-md-12">*@
                            <div id="filePreviewListing"></div>
                        @*</div>
                    </div>*@
                    @*<div class="row">
                        <div class="col-md-12">
                            
                        </div>
                    </div>*@
                @*</div>*@
            </div>
            <div class="modal-footer">
                <h4 class="file-name" id="file-nameListing"></h4>
            </div>
        </div>
    </div>
</div>


@*Rev 1.0 End*@ 